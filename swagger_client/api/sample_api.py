# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SampleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sample_add_amount_to_series_quantity(self, series_id, delta, **kwargs):  # noqa: E501
        """Add to quantity amount for all samples in a series  # noqa: E501

        This call adds the given amount to the current quantity amounts of all samples in the series. All samples must have a quantity set and need to have the same quantity type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_add_amount_to_series_quantity(series_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: (required)
        :param float delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_add_amount_to_series_quantity_with_http_info(series_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_add_amount_to_series_quantity_with_http_info(series_id, delta, **kwargs)  # noqa: E501
            return data

    def sample_add_amount_to_series_quantity_with_http_info(self, series_id, delta, **kwargs):  # noqa: E501
        """Add to quantity amount for all samples in a series  # noqa: E501

        This call adds the given amount to the current quantity amounts of all samples in the series. All samples must have a quantity set and need to have the same quantity type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_add_amount_to_series_quantity_with_http_info(series_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: (required)
        :param float delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_add_amount_to_series_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if self.api_client.client_side_validation and ('series_id' not in params or
                                                       params['series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `series_id` when calling `sample_add_amount_to_series_quantity`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `sample_add_amount_to_series_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['seriesID'] = params['series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{seriesID}/quantity/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_add_quantity_amount(self, sample_id, delta, **kwargs):  # noqa: E501
        """Add an amount to a sample's quantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_add_quantity_amount(sample_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param float delta: (required)
        :param str x_requested_with: 
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_add_quantity_amount_with_http_info(sample_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_add_quantity_amount_with_http_info(sample_id, delta, **kwargs)  # noqa: E501
            return data

    def sample_add_quantity_amount_with_http_info(self, sample_id, delta, **kwargs):  # noqa: E501
        """Add an amount to a sample's quantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_add_quantity_amount_with_http_info(sample_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param float delta: (required)
        :param str x_requested_with: 
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_add_quantity_amount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_add_quantity_amount`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `sample_add_quantity_amount`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/quantity/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_add_samples_to_series(self, sample_series_id, sample_ids, **kwargs):  # noqa: E501
        """Add samples to a series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_add_samples_to_series(sample_series_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_add_samples_to_series_with_http_info(sample_series_id, sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_add_samples_to_series_with_http_info(sample_series_id, sample_ids, **kwargs)  # noqa: E501
            return data

    def sample_add_samples_to_series_with_http_info(self, sample_series_id, sample_ids, **kwargs):  # noqa: E501
        """Add samples to a series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_add_samples_to_series_with_http_info(sample_series_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_series_id', 'sample_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_add_samples_to_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_series_id' is set
        if self.api_client.client_side_validation and ('sample_series_id' not in params or
                                                       params['sample_series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_series_id` when calling `sample_add_samples_to_series`")  # noqa: E501
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `sample_add_samples_to_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_series_id' in params:
            path_params['sampleSeriesID'] = params['sample_series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{sampleSeriesID}/samples/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_archive_sample(self, sample_id, **kwargs):  # noqa: E501
        """Archive a sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_archive_sample(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_archive_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_archive_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_archive_sample_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Archive a sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_archive_sample_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_archive_sample" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_archive_sample`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_archive_sample_series(self, sample_series_id, **kwargs):  # noqa: E501
        """Archive all samples in a series and remove the series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_archive_sample_series(sample_series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_archive_sample_series_with_http_info(sample_series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_archive_sample_series_with_http_info(sample_series_id, **kwargs)  # noqa: E501
            return data

    def sample_archive_sample_series_with_http_info(self, sample_series_id, **kwargs):  # noqa: E501
        """Archive all samples in a series and remove the series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_archive_sample_series_with_http_info(sample_series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_series_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_archive_sample_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_series_id' is set
        if self.api_client.client_side_validation and ('sample_series_id' not in params or
                                                       params['sample_series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_series_id` when calling `sample_archive_sample_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_series_id' in params:
            path_params['sampleSeriesID'] = params['sample_series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{sampleSeriesID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_archive_samples(self, input, **kwargs):  # noqa: E501
        """Archive multiple samples.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_archive_samples(input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArchiveSamples input: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_archive_samples_with_http_info(input, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_archive_samples_with_http_info(input, **kwargs)  # noqa: E501
            return data

    def sample_archive_samples_with_http_info(self, input, **kwargs):  # noqa: E501
        """Archive multiple samples.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_archive_samples_with_http_info(input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ArchiveSamples input: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_archive_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'input' is set
        if self.api_client.client_side_validation and ('input' not in params or
                                                       params['input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `input` when calling `sample_archive_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input' in params:
            body_params = params['input']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/archive', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_archive_samples_deprecated(self, sample_ids, **kwargs):  # noqa: E501
        """Archive multiple samples  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_archive_samples_deprecated(sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_archive_samples_deprecated_with_http_info(sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_archive_samples_deprecated_with_http_info(sample_ids, **kwargs)  # noqa: E501
            return data

    def sample_archive_samples_deprecated_with_http_info(self, sample_ids, **kwargs):  # noqa: E501
        """Archive multiple samples  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_archive_samples_deprecated_with_http_info(sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_archive_samples_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `sample_archive_samples_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_change_locations(self, updates, **kwargs):  # noqa: E501
        """Change the locations of multiple samples in a box compartment  # noqa: E501

              If you set the optional body parameter 'storageLayerID' then the samples are also moved to that storage compartment.      If you omit this parameter then the samples are only moved within their own compartment.        With this call you can, for example, switch sample positions. Note that if two samples would end up in the same position      as a result of this call a status 409 Conflict is returned.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_change_locations(updates, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleLocationUpdates updates: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_change_locations_with_http_info(updates, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_change_locations_with_http_info(updates, **kwargs)  # noqa: E501
            return data

    def sample_change_locations_with_http_info(self, updates, **kwargs):  # noqa: E501
        """Change the locations of multiple samples in a box compartment  # noqa: E501

              If you set the optional body parameter 'storageLayerID' then the samples are also moved to that storage compartment.      If you omit this parameter then the samples are only moved within their own compartment.        With this call you can, for example, switch sample positions. Note that if two samples would end up in the same position      as a result of this call a status 409 Conflict is returned.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_change_locations_with_http_info(updates, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleLocationUpdates updates: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['updates', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_change_locations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'updates' is set
        if self.api_client.client_side_validation and ('updates' not in params or
                                                       params['updates'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `updates` when calling `sample_change_locations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'updates' in params:
            body_params = params['updates']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/changeLocations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_change_sample_owner(self, sample_id, user_id, **kwargs):  # noqa: E501
        """Change the owner of a sample  # noqa: E501

        This call changes the owner of the specified sample.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_change_sample_owner(sample_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_change_sample_owner_with_http_info(sample_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_change_sample_owner_with_http_info(sample_id, user_id, **kwargs)  # noqa: E501
            return data

    def sample_change_sample_owner_with_http_info(self, sample_id, user_id, **kwargs):  # noqa: E501
        """Change the owner of a sample  # noqa: E501

        This call changes the owner of the specified sample.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_change_sample_owner_with_http_info(sample_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'user_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_change_sample_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_change_sample_owner`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `sample_change_sample_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/changeOwner/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_change_sample_owner_bulk(self, input, **kwargs):  # noqa: E501
        """Change the owner of a sample  # noqa: E501

        This call changes the owner of the specified samples.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_change_sample_owner_bulk(input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeSampleOwner input: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_change_sample_owner_bulk_with_http_info(input, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_change_sample_owner_bulk_with_http_info(input, **kwargs)  # noqa: E501
            return data

    def sample_change_sample_owner_bulk_with_http_info(self, input, **kwargs):  # noqa: E501
        """Change the owner of a sample  # noqa: E501

        This call changes the owner of the specified samples.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_change_sample_owner_bulk_with_http_info(input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeSampleOwner input: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_change_sample_owner_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'input' is set
        if self.api_client.client_side_validation and ('input' not in params or
                                                       params['input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `input` when calling `sample_change_sample_owner_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input' in params:
            body_params = params['input']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/changeOwner', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_change_sample_owner_bulk_deprecated(self, user_id, sample_ids, **kwargs):  # noqa: E501
        """Change the owner of a sample  # noqa: E501

        This call changes the owner of the specified samples.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_change_sample_owner_bulk_deprecated(user_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_change_sample_owner_bulk_deprecated_with_http_info(user_id, sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_change_sample_owner_bulk_deprecated_with_http_info(user_id, sample_ids, **kwargs)  # noqa: E501
            return data

    def sample_change_sample_owner_bulk_deprecated_with_http_info(self, user_id, sample_ids, **kwargs):  # noqa: E501
        """Change the owner of a sample  # noqa: E501

        This call changes the owner of the specified samples.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_change_sample_owner_bulk_deprecated_with_http_info(user_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'sample_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_change_sample_owner_bulk_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `sample_change_sample_owner_bulk_deprecated`")  # noqa: E501
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `sample_change_sample_owner_bulk_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/changeOwner/bulk/{userId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_check_in_sample(self, sample_id, **kwargs):  # noqa: E501
        """Check in a previously checked out sample  # noqa: E501

        This call removes the _checked out_ status of a sample.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_check_in_sample(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_check_in_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_check_in_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_check_in_sample_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Check in a previously checked out sample  # noqa: E501

        This call removes the _checked out_ status of a sample.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_check_in_sample_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_check_in_sample" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_check_in_sample`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/checkin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_check_in_samples(self, sample_ids, **kwargs):  # noqa: E501
        """Check in multiple samples  # noqa: E501

        This call removes the _checked out_ status of the specified samples.    Any samples that weren't checked out are ignored. The sample IDs that were actually checked in are returned as an array.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_check_in_samples(sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_check_in_samples_with_http_info(sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_check_in_samples_with_http_info(sample_ids, **kwargs)  # noqa: E501
            return data

    def sample_check_in_samples_with_http_info(self, sample_ids, **kwargs):  # noqa: E501
        """Check in multiple samples  # noqa: E501

        This call removes the _checked out_ status of the specified samples.    Any samples that weren't checked out are ignored. The sample IDs that were actually checked in are returned as an array.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_check_in_samples_with_http_info(sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_check_in_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `sample_check_in_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/checkin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_check_out_sample(self, sample_id, **kwargs):  # noqa: E501
        """Check out a sample  # noqa: E501

        This call marks a sample as _checked out_ while keeping its location reserved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_check_out_sample(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_check_out_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_check_out_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_check_out_sample_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Check out a sample  # noqa: E501

        This call marks a sample as _checked out_ while keeping its location reserved.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_check_out_sample_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_check_out_sample" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_check_out_sample`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/checkout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_check_out_samples(self, sample_ids, **kwargs):  # noqa: E501
        """Check out multiple samples  # noqa: E501

        This call marks samples as _checked out_ while keeping their locations reserved.    Any samples that were already checked out are ignored. The sample IDs that were actually checked out are returned as an array.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_check_out_samples(sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_check_out_samples_with_http_info(sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_check_out_samples_with_http_info(sample_ids, **kwargs)  # noqa: E501
            return data

    def sample_check_out_samples_with_http_info(self, sample_ids, **kwargs):  # noqa: E501
        """Check out multiple samples  # noqa: E501

        This call marks samples as _checked out_ while keeping their locations reserved.    Any samples that were already checked out are ignored. The sample IDs that were actually checked out are returned as an array.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_check_out_samples_with_http_info(sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_check_out_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `sample_check_out_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/checkout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_clear_quantity(self, sample_id, **kwargs):  # noqa: E501
        """Clear a sample's amount  # noqa: E501

        This call clears the amount and unit specifications of a sample quantity. This call differs from the delete quantity, where delete quantityremoves the quantity settings, this call keeps the threshold settings and only clears the amount and unit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clear_quantity(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_clear_quantity_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_clear_quantity_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_clear_quantity_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Clear a sample's amount  # noqa: E501

        This call clears the amount and unit specifications of a sample quantity. This call differs from the delete quantity, where delete quantityremoves the quantity settings, this call keeps the threshold settings and only clears the amount and unit settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clear_quantity_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_clear_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_clear_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/quantity/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleAmount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_clear_quantity_of_all_samples_in_series(self, series_id, **kwargs):  # noqa: E501
        """Clear amount of all samples in a series  # noqa: E501

        This call clears the amount and unit specifications linked to the quantity of all samples in a series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clear_quantity_of_all_samples_in_series(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_clear_quantity_of_all_samples_in_series_with_http_info(series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_clear_quantity_of_all_samples_in_series_with_http_info(series_id, **kwargs)  # noqa: E501
            return data

    def sample_clear_quantity_of_all_samples_in_series_with_http_info(self, series_id, **kwargs):  # noqa: E501
        """Clear amount of all samples in a series  # noqa: E501

        This call clears the amount and unit specifications linked to the quantity of all samples in a series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clear_quantity_of_all_samples_in_series_with_http_info(series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_clear_quantity_of_all_samples_in_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if self.api_client.client_side_validation and ('series_id' not in params or
                                                       params['series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `series_id` when calling `sample_clear_quantity_of_all_samples_in_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['seriesID'] = params['series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{seriesID}/quantity/clear', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_clone_sample(self, sample_id, options, **kwargs):  # noqa: E501
        """Creates one or more clones of a sample  # noqa: E501

        The storage position ranges for the cloned samples can be given in the storagePositionRanges array, where the offset is the starting position in the storage position range and the limit is how many samples will be placed after the starting position. The total number of storage positions (the sum of limit) must be equal to cloneTimes. If no storage position ranges are specified, the cloned samples will not be added to a storage unit.    The quantity of the cloned samples can be changed using quantity amount and unit.     The trackParent parameter is a boolean indicating whether the original sample should be linked as parent to the clone sample(s).    example:        {          storagePositionRanges: [{              storageLayerID: 109061,              limit: 1,              offset: 2          }],          quantity: {              amount: 1,              unit: \"KiloGram\"          },          cloneTimes: 1,          trackParent: true      }        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clone_sample(sample_id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleCloneOptions options: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_clone_sample_with_http_info(sample_id, options, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_clone_sample_with_http_info(sample_id, options, **kwargs)  # noqa: E501
            return data

    def sample_clone_sample_with_http_info(self, sample_id, options, **kwargs):  # noqa: E501
        """Creates one or more clones of a sample  # noqa: E501

        The storage position ranges for the cloned samples can be given in the storagePositionRanges array, where the offset is the starting position in the storage position range and the limit is how many samples will be placed after the starting position. The total number of storage positions (the sum of limit) must be equal to cloneTimes. If no storage position ranges are specified, the cloned samples will not be added to a storage unit.    The quantity of the cloned samples can be changed using quantity amount and unit.     The trackParent parameter is a boolean indicating whether the original sample should be linked as parent to the clone sample(s).    example:        {          storagePositionRanges: [{              storageLayerID: 109061,              limit: 1,              offset: 2          }],          quantity: {              amount: 1,              unit: \"KiloGram\"          },          cloneTimes: 1,          trackParent: true      }        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clone_sample_with_http_info(sample_id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleCloneOptions options: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'options', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_clone_sample" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_clone_sample`")  # noqa: E501
        # verify the required parameter 'options' is set
        if self.api_client.client_side_validation and ('options' not in params or
                                                       params['options'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `options` when calling `sample_clone_sample`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_clone_sample_to_series(self, sample_id, options, **kwargs):  # noqa: E501
        """Creates a series out of one or more clones of the specified sample  # noqa: E501

        The storage position ranges for the cloned samples can be given in the storagePositionRanges array, where the offset is the starting position in the storage position range and the limit is how many samples will be placed after the starting position. The total number of storage positions (the sum of limit) must be equal to cloneTimes. If no storage position ranges are specified, the cloned samples will not be added to a storage unit.    The quantity of the cloned samples can be changed using quantity amount and unit.     The trackParent parameter is a boolean indicating whether the original sample should be linked as parent to the clone sample(s).    The seriesName parameter is the name of the newly created series.    The incrementSampleName parameter contains all the data for when you want to add an increment to the sample name. The numberPlacement can be 'Prepend' or 'Append'.    The includeSourceSample parameter is a boolean indicating whether the original sample is going to be included into the new series.    example:        {          storagePositionRanges: [{              storageLayerID: 109061,              limit: 1,              offset: 2,          }],          quantity: {              amount: 1,              unit: \"KiloGram\"          },          cloneTimes: 1,          trackParent: true          includeSourceSample: true,          seriesName: \"exampleSeries\",          ignoreAutoNumbering: true,          incrementSampleName: {              startNumber: 0,              stepSize: 5,              numberPosition: \"prepend\"          }      }        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clone_sample_to_series(sample_id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleCloneIntoSeriesOptions options: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_clone_sample_to_series_with_http_info(sample_id, options, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_clone_sample_to_series_with_http_info(sample_id, options, **kwargs)  # noqa: E501
            return data

    def sample_clone_sample_to_series_with_http_info(self, sample_id, options, **kwargs):  # noqa: E501
        """Creates a series out of one or more clones of the specified sample  # noqa: E501

        The storage position ranges for the cloned samples can be given in the storagePositionRanges array, where the offset is the starting position in the storage position range and the limit is how many samples will be placed after the starting position. The total number of storage positions (the sum of limit) must be equal to cloneTimes. If no storage position ranges are specified, the cloned samples will not be added to a storage unit.    The quantity of the cloned samples can be changed using quantity amount and unit.     The trackParent parameter is a boolean indicating whether the original sample should be linked as parent to the clone sample(s).    The seriesName parameter is the name of the newly created series.    The incrementSampleName parameter contains all the data for when you want to add an increment to the sample name. The numberPlacement can be 'Prepend' or 'Append'.    The includeSourceSample parameter is a boolean indicating whether the original sample is going to be included into the new series.    example:        {          storagePositionRanges: [{              storageLayerID: 109061,              limit: 1,              offset: 2,          }],          quantity: {              amount: 1,              unit: \"KiloGram\"          },          cloneTimes: 1,          trackParent: true          includeSourceSample: true,          seriesName: \"exampleSeries\",          ignoreAutoNumbering: true,          incrementSampleName: {              startNumber: 0,              stepSize: 5,              numberPosition: \"prepend\"          }      }        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clone_sample_to_series_with_http_info(sample_id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleCloneIntoSeriesOptions options: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'options', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_clone_sample_to_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_clone_sample_to_series`")  # noqa: E501
        # verify the required parameter 'options' is set
        if self.api_client.client_side_validation and ('options' not in params or
                                                       params['options'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `options` when calling `sample_clone_sample_to_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/cloneIntoSeries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_clone_series(self, sample_series_id, options, **kwargs):  # noqa: E501
        """Copy a sample series to the given location  # noqa: E501

          The storage position ranges for the cloned samples can be given in the storagePositionRanges array, where the offset is the starting position in the storage position range and the limit is how many samples will be placed after the starting position. The total number of storage positions (the sum of limit) must be equal to cloneTimes. If no storage position ranges are specified, the cloned samples will not be added to a storage unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clone_series(sample_series_id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param CloneSeriesOptions options: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_clone_series_with_http_info(sample_series_id, options, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_clone_series_with_http_info(sample_series_id, options, **kwargs)  # noqa: E501
            return data

    def sample_clone_series_with_http_info(self, sample_series_id, options, **kwargs):  # noqa: E501
        """Copy a sample series to the given location  # noqa: E501

          The storage position ranges for the cloned samples can be given in the storagePositionRanges array, where the offset is the starting position in the storage position range and the limit is how many samples will be placed after the starting position. The total number of storage positions (the sum of limit) must be equal to cloneTimes. If no storage position ranges are specified, the cloned samples will not be added to a storage unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_clone_series_with_http_info(sample_series_id, options, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param CloneSeriesOptions options: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_series_id', 'options', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_clone_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_series_id' is set
        if self.api_client.client_side_validation and ('sample_series_id' not in params or
                                                       params['sample_series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_series_id` when calling `sample_clone_series`")  # noqa: E501
        # verify the required parameter 'options' is set
        if self.api_client.client_side_validation and ('options' not in params or
                                                       params['options'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `options` when calling `sample_clone_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_series_id' in params:
            path_params['sampleSeriesID'] = params['sample_series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{sampleSeriesID}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_create_sample(self, sample, **kwargs):  # noqa: E501
        """Create a new sample  # noqa: E501

        By default this call will **not** create any meta fields even if there are required fields.    If you add the query parameter autoCreateMetaDefaults=true to this call then it will create the meta fields with their default or auto-numbering values as defined in the sample type. **Note:** meta fields in the sample type that don't have a default value or have auto-numbering enabled are **not** created.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample(sample, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleComplete sample: (required)
        :param bool auto_create_meta_defaults:
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_create_sample_with_http_info(sample, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_create_sample_with_http_info(sample, **kwargs)  # noqa: E501
            return data

    def sample_create_sample_with_http_info(self, sample, **kwargs):  # noqa: E501
        """Create a new sample  # noqa: E501

        By default this call will **not** create any meta fields even if there are required fields.    If you add the query parameter autoCreateMetaDefaults=true to this call then it will create the meta fields with their default or auto-numbering values as defined in the sample type. **Note:** meta fields in the sample type that don't have a default value or have auto-numbering enabled are **not** created.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample_with_http_info(sample, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleComplete sample: (required)
        :param bool auto_create_meta_defaults:
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample', 'auto_create_meta_defaults', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_create_sample" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample' is set
        if self.api_client.client_side_validation and ('sample' not in params or
                                                       params['sample'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample` when calling `sample_create_sample`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'auto_create_meta_defaults' in params:
            query_params.append(('autoCreateMetaDefaults', params['auto_create_meta_defaults']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample' in params:
            body_params = params['sample']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_create_sample_from_hl7(self, hl7, mapping, auto_create_meta_defaults, **kwargs):  # noqa: E501
        """Create a new sample by using HL7 2.x.x standards  # noqa: E501

        This call will create samples and meta fields using HL7 standards and based on the provided mapping document (e.g. representing vials or tubes),   Values only support ST (string) datatypes. In case of a Batch HL7 file, multiple samples are created. An FHS line with File Name/ID (FHS-9) must be included for the ACK response to return the proper ID.  If ommitted, an ACK will be given to only the last MSH message. As the sample creation is done in transaction, this single ACK represents all the messages.   **Note:** HL7 messages need to be accompanied by a mapping parameter that describes the mapping as a JSON object.     This call does not support automatic naming even if configured as such in the sampletype. Always specify the name explicitly in your calls.    Example:  ```  {      \"sampleTypeID\": 12485,      \"storageLayerID\": 0, /* Optional */      \"position\": 0, /* Optional */      \"name\": {          \"segment\": \"MSH\",          \"field\": 10      },      \"description\": { /* Optional */          \"segment\": \"MSH\",          \"field\": 9,          \"component\": 3      },      \"altBarcode\": { /* Optional: Alternative barcode information. */          \"segment\": \"OBR\",          \"field\": 31      },      \"sampleTypeMetaIDMapping\": [ /* Optional: Array of mappings for the sampleTypeMetaID to the respective segment in the HL7 message */          {              \"sampleTypeMetaID\": 85318,              \"segment\": \"OBX\",              \"field\": 5          },          {              \"sampleTypeMetaID\": 85317,              \"segment\": \"ORC\",              \"field\": 2          }      ]  }   ```    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample_from_hl7(hl7, mapping, auto_create_meta_defaults, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hl7: (required)
        :param str mapping: (required)
        :param bool auto_create_meta_defaults: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_create_sample_from_hl7_with_http_info(hl7, mapping, auto_create_meta_defaults, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_create_sample_from_hl7_with_http_info(hl7, mapping, auto_create_meta_defaults, **kwargs)  # noqa: E501
            return data

    def sample_create_sample_from_hl7_with_http_info(self, hl7, mapping, auto_create_meta_defaults, **kwargs):  # noqa: E501
        """Create a new sample by using HL7 2.x.x standards  # noqa: E501

        This call will create samples and meta fields using HL7 standards and based on the provided mapping document (e.g. representing vials or tubes),   Values only support ST (string) datatypes. In case of a Batch HL7 file, multiple samples are created. An FHS line with File Name/ID (FHS-9) must be included for the ACK response to return the proper ID.  If ommitted, an ACK will be given to only the last MSH message. As the sample creation is done in transaction, this single ACK represents all the messages.   **Note:** HL7 messages need to be accompanied by a mapping parameter that describes the mapping as a JSON object.     This call does not support automatic naming even if configured as such in the sampletype. Always specify the name explicitly in your calls.    Example:  ```  {      \"sampleTypeID\": 12485,      \"storageLayerID\": 0, /* Optional */      \"position\": 0, /* Optional */      \"name\": {          \"segment\": \"MSH\",          \"field\": 10      },      \"description\": { /* Optional */          \"segment\": \"MSH\",          \"field\": 9,          \"component\": 3      },      \"altBarcode\": { /* Optional: Alternative barcode information. */          \"segment\": \"OBR\",          \"field\": 31      },      \"sampleTypeMetaIDMapping\": [ /* Optional: Array of mappings for the sampleTypeMetaID to the respective segment in the HL7 message */          {              \"sampleTypeMetaID\": 85318,              \"segment\": \"OBX\",              \"field\": 5          },          {              \"sampleTypeMetaID\": 85317,              \"segment\": \"ORC\",              \"field\": 2          }      ]  }   ```    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample_from_hl7_with_http_info(hl7, mapping, auto_create_meta_defaults, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hl7: (required)
        :param str mapping: (required)
        :param bool auto_create_meta_defaults: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hl7', 'mapping', 'auto_create_meta_defaults', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_create_sample_from_hl7" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hl7' is set
        if self.api_client.client_side_validation and ('hl7' not in params or
                                                       params['hl7'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `hl7` when calling `sample_create_sample_from_hl7`")  # noqa: E501
        # verify the required parameter 'mapping' is set
        if self.api_client.client_side_validation and ('mapping' not in params or
                                                       params['mapping'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mapping` when calling `sample_create_sample_from_hl7`")  # noqa: E501
        # verify the required parameter 'auto_create_meta_defaults' is set
        if self.api_client.client_side_validation and ('auto_create_meta_defaults' not in params or
                                                       params['auto_create_meta_defaults'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auto_create_meta_defaults` when calling `sample_create_sample_from_hl7`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mapping' in params:
            query_params.append(('mapping', params['mapping']))  # noqa: E501
        if 'auto_create_meta_defaults' in params:
            query_params.append(('autoCreateMetaDefaults', params['auto_create_meta_defaults']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hl7' in params:
            body_params = params['hl7']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/hl7-v2', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/hl7', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_create_sample_meta(self, sample_id, dto, **kwargs):  # noqa: E501
        """Create a new sample's meta field  # noqa: E501

        If you create a sample meta field that is defined in the sample type, make sure that you specify the correct sampleTypeMetaID for it. In addition, the sampleDataType should be the same as defined in the sample type.    You can create a meta field that isn't defined by leaving the sampleTypeMetaID blank. This is not advisable though, and results in the meta field's value not to be searchable!    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma.    Note: it's advisable to use the PUT variant of this call. The POST variant will always make a new field, even if one already exists.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample_meta(sample_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_create_sample_meta_with_http_info(sample_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_create_sample_meta_with_http_info(sample_id, dto, **kwargs)  # noqa: E501
            return data

    def sample_create_sample_meta_with_http_info(self, sample_id, dto, **kwargs):  # noqa: E501
        """Create a new sample's meta field  # noqa: E501

        If you create a sample meta field that is defined in the sample type, make sure that you specify the correct sampleTypeMetaID for it. In addition, the sampleDataType should be the same as defined in the sample type.    You can create a meta field that isn't defined by leaving the sampleTypeMetaID blank. This is not advisable though, and results in the meta field's value not to be searchable!    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma.    Note: it's advisable to use the PUT variant of this call. The POST variant will always make a new field, even if one already exists.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample_meta_with_http_info(sample_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_create_sample_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_create_sample_meta`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `sample_create_sample_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/meta', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_create_sample_series(self, series, **kwargs):  # noqa: E501
        """Create a new sample series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample_series(series, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleSeriesNewWithSampleIDs series: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_create_sample_series_with_http_info(series, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_create_sample_series_with_http_info(series, **kwargs)  # noqa: E501
            return data

    def sample_create_sample_series_with_http_info(self, series, **kwargs):  # noqa: E501
        """Create a new sample series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample_series_with_http_info(series, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleSeriesNewWithSampleIDs series: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_create_sample_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series' is set
        if self.api_client.client_side_validation and ('series' not in params or
                                                       params['series'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `series` when calling `sample_create_sample_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'series' in params:
            body_params = params['series']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_create_sample_series_with_samples(self, series, **kwargs):  # noqa: E501
        """Create a new sample series, together with samples, sample meta fields and sample quantity settings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample_series_with_samples(series, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleSeriesComplete series: (required)
        :param bool auto_create_meta_defaults:
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_create_sample_series_with_samples_with_http_info(series, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_create_sample_series_with_samples_with_http_info(series, **kwargs)  # noqa: E501
            return data

    def sample_create_sample_series_with_samples_with_http_info(self, series, **kwargs):  # noqa: E501
        """Create a new sample series, together with samples, sample meta fields and sample quantity settings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_sample_series_with_samples_with_http_info(series, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleSeriesComplete series: (required)
        :param bool auto_create_meta_defaults:
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series', 'auto_create_meta_defaults', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_create_sample_series_with_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series' is set
        if self.api_client.client_side_validation and ('series' not in params or
                                                       params['series'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `series` when calling `sample_create_sample_series_with_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'auto_create_meta_defaults' in params:
            query_params.append(('autoCreateMetaDefaults', params['auto_create_meta_defaults']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'series' in params:
            body_params = params['series']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/createWithSamples', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_create_samples_bulk(self, sample_and_metas, **kwargs):  # noqa: E501
        """Create multiple new samples with metas  # noqa: E501

        By default this call will **not** create any meta fields even if there are required fields.    If you add the query parameter autoCreateMetaDefaults=true to this call then it will create the meta fields with their default values as defined in the sample type. **Note:** meta fields in the sample type that don't have a default value are **not** created.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_samples_bulk(sample_and_metas, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SampleAndMeta] sample_and_metas: (required)
        :param bool auto_create_meta_defaults:
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_create_samples_bulk_with_http_info(sample_and_metas, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_create_samples_bulk_with_http_info(sample_and_metas, **kwargs)  # noqa: E501
            return data

    def sample_create_samples_bulk_with_http_info(self, sample_and_metas, **kwargs):  # noqa: E501
        """Create multiple new samples with metas  # noqa: E501

        By default this call will **not** create any meta fields even if there are required fields.    If you add the query parameter autoCreateMetaDefaults=true to this call then it will create the meta fields with their default values as defined in the sample type. **Note:** meta fields in the sample type that don't have a default value are **not** created.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_create_samples_bulk_with_http_info(sample_and_metas, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SampleAndMeta] sample_and_metas: (required)
        :param bool auto_create_meta_defaults:
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_and_metas', 'auto_create_meta_defaults', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_create_samples_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_and_metas' is set
        if self.api_client.client_side_validation and ('sample_and_metas' not in params or
                                                       params['sample_and_metas'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_and_metas` when calling `sample_create_samples_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'auto_create_meta_defaults' in params:
            query_params.append(('autoCreateMetaDefaults', params['auto_create_meta_defaults']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_and_metas' in params:
            body_params = params['sample_and_metas']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_delete(self, sample_id, **kwargs):  # noqa: E501
        """Delete a sample's quantity settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_delete(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_delete_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_delete_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_delete_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Delete a sample's quantity settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_delete_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/quantity', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_delete_sample_meta(self, sample_id, sample_meta_id, **kwargs):  # noqa: E501
        """Delete a sample's meta field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_delete_sample_meta(sample_id, sample_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int sample_meta_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_delete_sample_meta_with_http_info(sample_id, sample_meta_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_delete_sample_meta_with_http_info(sample_id, sample_meta_id, **kwargs)  # noqa: E501
            return data

    def sample_delete_sample_meta_with_http_info(self, sample_id, sample_meta_id, **kwargs):  # noqa: E501
        """Delete a sample's meta field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_delete_sample_meta_with_http_info(sample_id, sample_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int sample_meta_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'sample_meta_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_delete_sample_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_delete_sample_meta`")  # noqa: E501
        # verify the required parameter 'sample_meta_id' is set
        if self.api_client.client_side_validation and ('sample_meta_id' not in params or
                                                       params['sample_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_meta_id` when calling `sample_delete_sample_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501
        if 'sample_meta_id' in params:
            path_params['sampleMetaID'] = params['sample_meta_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/meta/{sampleMetaID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_available_view_columns(self, **kwargs):  # noqa: E501
        """Get the available columns for the sample list table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_available_view_columns(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: list[ViewColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_available_view_columns_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_available_view_columns_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_get_available_view_columns_with_http_info(self, **kwargs):  # noqa: E501
        """Get the available columns for the sample list table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_available_view_columns_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: list[ViewColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_available_view_columns" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/viewcolumns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ViewColumn]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_quantity(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample's quantity settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_quantity(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_quantity_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_quantity_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_get_quantity_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample's quantity settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_quantity_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_get_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/quantity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleAmount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_sample_by_id(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample by id  # noqa: E501

        This call will also fetch archived samples.    $expand values (separate with comma for multiple expands):  * location  * quantity  * meta  * experiments  * catalogItem  * parent  * children    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_by_id(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_sample_by_id_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_sample_by_id_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_get_sample_by_id_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample by id  # noqa: E501

        This call will also fetch archived samples.    $expand values (separate with comma for multiple expands):  * location  * quantity  * meta  * experiments  * catalogItem  * parent  * children    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_by_id_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_sample_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_get_sample_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_sample_children(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample's direct children  # noqa: E501

        This call will **not** fetch archived samples.    $expand values (separate with comma for multiple expands):  * location  * quantity  * meta  * experiments    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_children(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_sample_children_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_sample_children_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_get_sample_children_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample's direct children  # noqa: E501

        This call will **not** fetch archived samples.    $expand values (separate with comma for multiple expands):  * location  * quantity  * meta  * experiments    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_children_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_sample_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_get_sample_children`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_sample_experiments(self, sample_id, **kwargs):  # noqa: E501
        """Get all experiment sections where the sample is used  # noqa: E501

        With this endpoint you can retrieve all the experiment sections where the given sample is created or used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_experiments(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentSectionForSample
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_sample_experiments_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_sample_experiments_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_get_sample_experiments_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Get all experiment sections where the sample is used  # noqa: E501

        With this endpoint you can retrieve all the experiment sections where the given sample is created or used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_experiments_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentSectionForSample
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_sample_experiments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_get_sample_experiments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/experiments/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExperimentSectionForSample',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_sample_logs(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample's change logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_logs(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str user_id: Filter by the user who made the change
        :param str storage_id: Filter for samples in a storage unit
        :param str storage_layer_id: Filter for samples in a storage layer
        :param str action: Filter by action (CREATE/UPDATE/DELETE)
        :param str sample_meta_key: Filter by a sample field (including \"Location\")
        :param str x_requested_with: 
        :return: PagedOfSampleLogLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_sample_logs_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_sample_logs_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_get_sample_logs_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample's change logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_logs_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str user_id: Filter by the user who made the change
        :param str storage_id: Filter for samples in a storage unit
        :param str storage_layer_id: Filter for samples in a storage layer
        :param str action: Filter by action (CREATE/UPDATE/DELETE)
        :param str sample_meta_key: Filter by a sample field (including \"Location\")
        :param str x_requested_with: 
        :return: PagedOfSampleLogLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'user_id', 'storage_id', 'storage_layer_id', 'action', 'sample_meta_key', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_sample_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_get_sample_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userID', params['user_id']))  # noqa: E501
        if 'storage_id' in params:
            query_params.append(('storageID', params['storage_id']))  # noqa: E501
        if 'storage_layer_id' in params:
            query_params.append(('storageLayerID', params['storage_layer_id']))  # noqa: E501
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'sample_meta_key' in params:
            query_params.append(('sampleMetaKey', params['sample_meta_key']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLogLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_sample_meta(self, sample_id, sample_meta_id, **kwargs):  # noqa: E501
        """Get a sample's meta field by id  # noqa: E501

        This call will also fetch a meta field from an archived sample.    A meta field of type SAMPLELINK may contain archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_meta(sample_id, sample_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int sample_meta_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleMetaBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_sample_meta_with_http_info(sample_id, sample_meta_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_sample_meta_with_http_info(sample_id, sample_meta_id, **kwargs)  # noqa: E501
            return data

    def sample_get_sample_meta_with_http_info(self, sample_id, sample_meta_id, **kwargs):  # noqa: E501
        """Get a sample's meta field by id  # noqa: E501

        This call will also fetch a meta field from an archived sample.    A meta field of type SAMPLELINK may contain archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_meta_with_http_info(sample_id, sample_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int sample_meta_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleMetaBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'sample_meta_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_sample_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_get_sample_meta`")  # noqa: E501
        # verify the required parameter 'sample_meta_id' is set
        if self.api_client.client_side_validation and ('sample_meta_id' not in params or
                                                       params['sample_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_meta_id` when calling `sample_get_sample_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501
        if 'sample_meta_id' in params:
            path_params['sampleMetaID'] = params['sample_meta_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/meta/{sampleMetaID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleMetaBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_sample_metas(self, sample_id, **kwargs):  # noqa: E501
        """Get all of a sample's meta fields  # noqa: E501

        This call will also fetch meta fields from an archived sample.            Meta fields of type SAMPLELINK may contain archived samples.          $expand values (separate with comma for multiple expands):  * sampleTypeSection            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_metas(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleMetaLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_sample_metas_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_sample_metas_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_get_sample_metas_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Get all of a sample's meta fields  # noqa: E501

        This call will also fetch meta fields from an archived sample.            Meta fields of type SAMPLELINK may contain archived samples.          $expand values (separate with comma for multiple expands):  * sampleTypeSection            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_metas_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleMetaLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_sample_metas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_get_sample_metas`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleMetaLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_sample_parents(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample's full parent ancestry  # noqa: E501

        The result is the direct parent with its `parent` property containing the grandparent and so forth.    This call will **not** fetch archived samples.    $expand values (separate with comma for multiple expands):  * location  * quantity  * meta  * experiments    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_parents(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_sample_parents_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_sample_parents_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_get_sample_parents_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Get a sample's full parent ancestry  # noqa: E501

        The result is the direct parent with its `parent` property containing the grandparent and so forth.    This call will **not** fetch archived samples.    $expand values (separate with comma for multiple expands):  * location  * quantity  * meta  * experiments    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_parents_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_sample_parents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_get_sample_parents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/parents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_sample_series(self, **kwargs):  # noqa: E501
        """Get sample series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_series(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_sample_series_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_sample_series_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_get_sample_series_with_http_info(self, **kwargs):  # noqa: E501
        """Get sample series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_series_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleSeries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_sample_series" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleSeries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_sample_series_by_id(self, sample_series_id, **kwargs):  # noqa: E501
        """Get a sample series by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_series_by_id(sample_series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleSeriesLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_sample_series_by_id_with_http_info(sample_series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_sample_series_by_id_with_http_info(sample_series_id, **kwargs)  # noqa: E501
            return data

    def sample_get_sample_series_by_id_with_http_info(self, sample_series_id, **kwargs):  # noqa: E501
        """Get a sample series by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_sample_series_by_id_with_http_info(sample_series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleSeriesLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_series_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_sample_series_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_series_id' is set
        if self.api_client.client_side_validation and ('sample_series_id' not in params or
                                                       params['sample_series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_series_id` when calling `sample_get_sample_series_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_series_id' in params:
            path_params['sampleSeriesID'] = params['sample_series_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{sampleSeriesID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleSeriesLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples(self, **kwargs):  # noqa: E501
        """Get samples  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied. To get both archived and non-archived samples you have to make two calls.    Searching for archived samples is not possible. The search parameter is ignored when archived=true.    $expand values (separate with comma for multiple expands):  * location  * quantity  * meta  * experiments  * parent  * children  * activeReservation    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str search: Search term to use for filtering samples. This parameter can't be combined with archived=true.
        :param str storage_id: Filter for samples in a storage unit
        :param str name: Filter by sample name
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str archived: Filter by archived or non-archived samples. If set to true the search parameter has no effect.
        :param str quantity_id: Filter by quantityID
        :param str minimum_quantity_amount: Filter for samples that have a minimum quantity amount set
        :param str checked_out: Filter for checked out samples
        :param str storage_layer_id: Filter for samples in a storage layer
        :param str series_id: Filter for samples in a series
        :param str user_id: Filter by userID
        :param str sample_type_id: Filter by sampleTypeID
        :param str filter_by_sample_type_meta_values: (Optional) JSON array used to filter results. Only exact matches will be returned. This parameter can't be combined with archived=true. Example: [{\"sampleTypeMetaID\": 1234, \"metaValue\":\"No\"}]
        :param str filter_by_minimum_date: (Optional) date in ISO 8601 (YYYY-MM-DDThh:mm:ss) in UTC
        :param str filter_by_maximum_date: (Optional) date in ISO 8601 (YYYY-MM-DDThh:mm:ss) in UTC
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_get_samples_with_http_info(self, **kwargs):  # noqa: E501
        """Get samples  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied. To get both archived and non-archived samples you have to make two calls.    Searching for archived samples is not possible. The search parameter is ignored when archived=true.    $expand values (separate with comma for multiple expands):  * location  * quantity  * meta  * experiments  * parent  * children  * activeReservation    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str search: Search term to use for filtering samples. This parameter can't be combined with archived=true.
        :param str storage_id: Filter for samples in a storage unit
        :param str name: Filter by sample name
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str archived: Filter by archived or non-archived samples. If set to true the search parameter has no effect.
        :param str quantity_id: Filter by quantityID
        :param str minimum_quantity_amount: Filter for samples that have a minimum quantity amount set
        :param str checked_out: Filter for checked out samples
        :param str storage_layer_id: Filter for samples in a storage layer
        :param str series_id: Filter for samples in a series
        :param str user_id: Filter by userID
        :param str sample_type_id: Filter by sampleTypeID
        :param str filter_by_sample_type_meta_values: (Optional) JSON array used to filter results. Only exact matches will be returned. This parameter can't be combined with archived=true. Example: [{\"sampleTypeMetaID\": 1234, \"metaValue\":\"No\"}]
        :param str filter_by_minimum_date: (Optional) date in ISO 8601 (YYYY-MM-DDThh:mm:ss) in UTC
        :param str filter_by_maximum_date: (Optional) date in ISO 8601 (YYYY-MM-DDThh:mm:ss) in UTC
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'search', 'storage_id', 'name', 'barcodes', 'archived', 'quantity_id', 'minimum_quantity_amount', 'checked_out', 'storage_layer_id', 'series_id', 'user_id', 'sample_type_id', 'filter_by_sample_type_meta_values', 'filter_by_minimum_date', 'filter_by_maximum_date', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'storage_id' in params:
            query_params.append(('storageID', params['storage_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'barcodes' in params:
            query_params.append(('barcodes', params['barcodes']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'quantity_id' in params:
            query_params.append(('quantityID', params['quantity_id']))  # noqa: E501
        if 'minimum_quantity_amount' in params:
            query_params.append(('minimumQuantityAmount', params['minimum_quantity_amount']))  # noqa: E501
        if 'checked_out' in params:
            query_params.append(('checkedOut', params['checked_out']))  # noqa: E501
        if 'storage_layer_id' in params:
            query_params.append(('storageLayerID', params['storage_layer_id']))  # noqa: E501
        if 'series_id' in params:
            query_params.append(('seriesID', params['series_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userID', params['user_id']))  # noqa: E501
        if 'sample_type_id' in params:
            query_params.append(('sampleTypeID', params['sample_type_id']))  # noqa: E501
        if 'filter_by_sample_type_meta_values' in params:
            query_params.append(('filterBySampleTypeMetaValues', params['filter_by_sample_type_meta_values']))  # noqa: E501
        if 'filter_by_minimum_date' in params:
            query_params.append(('filterByMinimumDate', params['filter_by_minimum_date']))  # noqa: E501
        if 'filter_by_maximum_date' in params:
            query_params.append(('filterByMaximumDate', params['filter_by_maximum_date']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_and_series(self, **kwargs):  # noqa: E501
        """Get single samples and sample series in an aggregated list  # noqa: E501

        Note that in case of an item with type SERIES the sample type and location are taken from the **first** sample in the series.    $expand values (separate with a comma for multiple expands):  * location  * quantity    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_and_series(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str user_id: Filter by userID
        :param str sample_type_id: Filter by sampleTypeID
        :param str name: Filter by sample name
        :param str storage_layer_id: Filter by StorageLayerID
        :param str unassigned_sample_location: Filter by samples with unassigned locations: values: 1/0 | True/False
        :param str exp_journal_id: Filter by expJournalID
        :param str search: Search term to use for filtering samples.
        :param str storage_id: Filter by storageID
        :param str show_shared_samples: Display shared samples (true | false)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_and_series_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_and_series_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_get_samples_and_series_with_http_info(self, **kwargs):  # noqa: E501
        """Get single samples and sample series in an aggregated list  # noqa: E501

        Note that in case of an item with type SERIES the sample type and location are taken from the **first** sample in the series.    $expand values (separate with a comma for multiple expands):  * location  * quantity    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_and_series_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str user_id: Filter by userID
        :param str sample_type_id: Filter by sampleTypeID
        :param str name: Filter by sample name
        :param str storage_layer_id: Filter by StorageLayerID
        :param str unassigned_sample_location: Filter by samples with unassigned locations: values: 1/0 | True/False
        :param str exp_journal_id: Filter by expJournalID
        :param str search: Search term to use for filtering samples.
        :param str storage_id: Filter by storageID
        :param str show_shared_samples: Display shared samples (true | false)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'user_id', 'sample_type_id', 'name', 'storage_layer_id', 'unassigned_sample_location', 'exp_journal_id', 'search', 'storage_id', 'show_shared_samples', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_and_series" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userID', params['user_id']))  # noqa: E501
        if 'sample_type_id' in params:
            query_params.append(('sampleTypeID', params['sample_type_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'storage_layer_id' in params:
            query_params.append(('storageLayerID', params['storage_layer_id']))  # noqa: E501
        if 'unassigned_sample_location' in params:
            query_params.append(('unassignedSampleLocation', params['unassigned_sample_location']))  # noqa: E501
        if 'exp_journal_id' in params:
            query_params.append(('expJournalID', params['exp_journal_id']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'storage_id' in params:
            query_params.append(('storageID', params['storage_id']))  # noqa: E501
        if 'show_shared_samples' in params:
            query_params.append(('showSharedSamples', params['show_shared_samples']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samplesAndSeries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_by_barcode(self, barcodes, **kwargs):  # noqa: E501
        """Get a list of samples for multiple barcodes  # noqa: E501

        This call will also fetch archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_by_barcode(barcodes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] barcodes: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_by_barcode_with_http_info(barcodes, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_by_barcode_with_http_info(barcodes, **kwargs)  # noqa: E501
            return data

    def sample_get_samples_by_barcode_with_http_info(self, barcodes, **kwargs):  # noqa: E501
        """Get a list of samples for multiple barcodes  # noqa: E501

        This call will also fetch archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_by_barcode_with_http_info(barcodes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] barcodes: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['barcodes', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_by_barcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'barcodes' is set
        if self.api_client.client_side_validation and ('barcodes' not in params or
                                                       params['barcodes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `barcodes` when calling `sample_get_samples_by_barcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'barcodes' in params:
            query_params.append(('barcodes', params['barcodes']))  # noqa: E501
            collection_formats['barcodes'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/forBarcodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_by_id(self, sample_id, **kwargs):  # noqa: E501
        """Get a list of samples for multiple ids  # noqa: E501

        This call will also fetch archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_by_id(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: list[SampleLarge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_by_id_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_by_id_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_get_samples_by_id_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Get a list of samples for multiple ids  # noqa: E501

        This call will also fetch archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_by_id_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: list[SampleLarge]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_get_samples_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sample_id' in params:
            query_params.append(('sampleID', params['sample_id']))  # noqa: E501
            collection_formats['sampleID'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SampleLarge]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_samples_for_names(self, names, **kwargs):  # noqa: E501
        """Get a list of samples for multiple names  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied. To get both archived and non-archived samples you have to make two calls.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_for_names(names, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] names: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str archived: Filter by archived or non-archived samples.
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_samples_for_names_with_http_info(names, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_samples_for_names_with_http_info(names, **kwargs)  # noqa: E501
            return data

    def sample_get_samples_for_names_with_http_info(self, names, **kwargs):  # noqa: E501
        """Get a list of samples for multiple names  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied. To get both archived and non-archived samples you have to make two calls.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_samples_for_names_with_http_info(names, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] names: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str archived: Filter by archived or non-archived samples.
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['names', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'archived', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_samples_for_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'names' is set
        if self.api_client.client_side_validation and ('names' not in params or
                                                       params['names'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `names` when calling `sample_get_samples_for_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
            collection_formats['names'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/forNames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get_structure_samples(self, search_method, **kwargs):  # noqa: E501
        """Perform a similarity, substructure or exact search on chemical sample data  # noqa: E501

        searchMethod can be either:      * similarity: structure similarity based on the Tanimoto algorithm      * substructure: whether the substructure query is present in the target structure      * exact: exact structure match        Example values:      * searchMethod: similarity      * query: CC(C)CC(=O)      * searchType: smiles      * searchArchive: false      * reactionTableSearch: false      * resultSetNumber: 0      * threshold: 85  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_structure_samples(search_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_method: (required)
        :param str search_params_query:
        :param str search_params_search_type:
        :param bool search_params_search_archive:
        :param bool search_params_reaction_table_search:
        :param int search_params_result_set_number:
        :param int search_params_threshold:
        :param str x_requested_with: 
        :return: SearchStructureData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_structure_samples_with_http_info(search_method, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_structure_samples_with_http_info(search_method, **kwargs)  # noqa: E501
            return data

    def sample_get_structure_samples_with_http_info(self, search_method, **kwargs):  # noqa: E501
        """Perform a similarity, substructure or exact search on chemical sample data  # noqa: E501

        searchMethod can be either:      * similarity: structure similarity based on the Tanimoto algorithm      * substructure: whether the substructure query is present in the target structure      * exact: exact structure match        Example values:      * searchMethod: similarity      * query: CC(C)CC(=O)      * searchType: smiles      * searchArchive: false      * reactionTableSearch: false      * resultSetNumber: 0      * threshold: 85  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_structure_samples_with_http_info(search_method, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str search_method: (required)
        :param str search_params_query:
        :param str search_params_search_type:
        :param bool search_params_search_archive:
        :param bool search_params_reaction_table_search:
        :param int search_params_result_set_number:
        :param int search_params_threshold:
        :param str x_requested_with: 
        :return: SearchStructureData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_method', 'search_params_query', 'search_params_search_type', 'search_params_search_archive', 'search_params_reaction_table_search', 'search_params_result_set_number', 'search_params_threshold', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get_structure_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_method' is set
        if self.api_client.client_side_validation and ('search_method' not in params or
                                                       params['search_method'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_method` when calling `sample_get_structure_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'search_method' in params:
            path_params['searchMethod'] = params['search_method']  # noqa: E501

        query_params = []
        if 'search_params_query' in params:
            query_params.append(('searchParams.query', params['search_params_query']))  # noqa: E501
        if 'search_params_search_type' in params:
            query_params.append(('searchParams.searchType', params['search_params_search_type']))  # noqa: E501
        if 'search_params_search_archive' in params:
            query_params.append(('searchParams.searchArchive', params['search_params_search_archive']))  # noqa: E501
        if 'search_params_reaction_table_search' in params:
            query_params.append(('searchParams.reactionTableSearch', params['search_params_reaction_table_search']))  # noqa: E501
        if 'search_params_result_set_number' in params:
            query_params.append(('searchParams.resultSetNumber', params['search_params_result_set_number']))  # noqa: E501
        if 'search_params_threshold' in params:
            query_params.append(('searchParams.threshold', params['search_params_threshold']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/structuresearch/{searchMethod}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchStructureData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_move_sample_series_to_layer(self, sample_series_id, storage_layer_id, body, **kwargs):  # noqa: E501
        """Move all samples in a series to another storage layer  # noqa: E501

        You can provide an optional position within the storage layer with the following request body:  ```  {    \"position\": 12  }  ```    Note: the storage layer must have enough contiguous free space left to fit the series, starting from the specified position.        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_move_sample_series_to_layer(sample_series_id, storage_layer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param int storage_layer_id: (required)
        :param object body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_move_sample_series_to_layer_with_http_info(sample_series_id, storage_layer_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_move_sample_series_to_layer_with_http_info(sample_series_id, storage_layer_id, body, **kwargs)  # noqa: E501
            return data

    def sample_move_sample_series_to_layer_with_http_info(self, sample_series_id, storage_layer_id, body, **kwargs):  # noqa: E501
        """Move all samples in a series to another storage layer  # noqa: E501

        You can provide an optional position within the storage layer with the following request body:  ```  {    \"position\": 12  }  ```    Note: the storage layer must have enough contiguous free space left to fit the series, starting from the specified position.        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_move_sample_series_to_layer_with_http_info(sample_series_id, storage_layer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param int storage_layer_id: (required)
        :param object body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_series_id', 'storage_layer_id', 'body', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_move_sample_series_to_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_series_id' is set
        if self.api_client.client_side_validation and ('sample_series_id' not in params or
                                                       params['sample_series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_series_id` when calling `sample_move_sample_series_to_layer`")  # noqa: E501
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `sample_move_sample_series_to_layer`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `sample_move_sample_series_to_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_series_id' in params:
            path_params['sampleSeriesID'] = params['sample_series_id']  # noqa: E501
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{sampleSeriesID}/moveToLayer/{storageLayerID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_move_sample_to_layer(self, sample_id, storage_layer_id, body, **kwargs):  # noqa: E501
        """Move a sample to another storage layer  # noqa: E501

        For boxes you must provide a position with the following request body:  ```  {    \"position\": 12  }  ```  For any other storage layer the request body should be an empty object.        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_move_sample_to_layer(sample_id, storage_layer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int storage_layer_id: (required)
        :param object body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_move_sample_to_layer_with_http_info(sample_id, storage_layer_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_move_sample_to_layer_with_http_info(sample_id, storage_layer_id, body, **kwargs)  # noqa: E501
            return data

    def sample_move_sample_to_layer_with_http_info(self, sample_id, storage_layer_id, body, **kwargs):  # noqa: E501
        """Move a sample to another storage layer  # noqa: E501

        For boxes you must provide a position with the following request body:  ```  {    \"position\": 12  }  ```  For any other storage layer the request body should be an empty object.        # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_move_sample_to_layer_with_http_info(sample_id, storage_layer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int storage_layer_id: (required)
        :param object body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'storage_layer_id', 'body', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_move_sample_to_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_move_sample_to_layer`")  # noqa: E501
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `sample_move_sample_to_layer`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `sample_move_sample_to_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/moveToLayer/{storageLayerID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_move_samples_to_layer(self, input, **kwargs):  # noqa: E501
        """Move samples to another storage layer  # noqa: E501

        For boxes you must provide a position with the following request body:  ```  {    \"position\": 12  }  ```  In boxes this will move the samples contiguously from the indicated position. If there is no space for all samples, or there are other samples in those position, this call will result in an error 400.  For any other storage layer the request body should be an empty object.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_move_samples_to_layer(input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoveSamplesToLayer input: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_move_samples_to_layer_with_http_info(input, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_move_samples_to_layer_with_http_info(input, **kwargs)  # noqa: E501
            return data

    def sample_move_samples_to_layer_with_http_info(self, input, **kwargs):  # noqa: E501
        """Move samples to another storage layer  # noqa: E501

        For boxes you must provide a position with the following request body:  ```  {    \"position\": 12  }  ```  In boxes this will move the samples contiguously from the indicated position. If there is no space for all samples, or there are other samples in those position, this call will result in an error 400.  For any other storage layer the request body should be an empty object.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_move_samples_to_layer_with_http_info(input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MoveSamplesToLayer input: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['input', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_move_samples_to_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'input' is set
        if self.api_client.client_side_validation and ('input' not in params or
                                                       params['input'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `input` when calling `sample_move_samples_to_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input' in params:
            body_params = params['input']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/moveToLayer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_move_samples_to_layer_deprecated(self, sample_ids, storage_layer_id, body, **kwargs):  # noqa: E501
        """Move samples to another storage layer  # noqa: E501

        For boxes you must provide a position with the following request body:  ```  {    \"position\": 12  }  ```  In boxes this will move the samples contiguously from the indicated position. If there is no space for all samples, or there are other samples in those position, this call will result in an error 400.  For any other storage layer the request body should be an empty object.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_move_samples_to_layer_deprecated(sample_ids, storage_layer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param int storage_layer_id: (required)
        :param object body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_move_samples_to_layer_deprecated_with_http_info(sample_ids, storage_layer_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_move_samples_to_layer_deprecated_with_http_info(sample_ids, storage_layer_id, body, **kwargs)  # noqa: E501
            return data

    def sample_move_samples_to_layer_deprecated_with_http_info(self, sample_ids, storage_layer_id, body, **kwargs):  # noqa: E501
        """Move samples to another storage layer  # noqa: E501

        For boxes you must provide a position with the following request body:  ```  {    \"position\": 12  }  ```  In boxes this will move the samples contiguously from the indicated position. If there is no space for all samples, or there are other samples in those position, this call will result in an error 400.  For any other storage layer the request body should be an empty object.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_move_samples_to_layer_deprecated_with_http_info(sample_ids, storage_layer_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param int storage_layer_id: (required)
        :param object body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_ids', 'storage_layer_id', 'body', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_move_samples_to_layer_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `sample_move_samples_to_layer_deprecated`")  # noqa: E501
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `sample_move_samples_to_layer_deprecated`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `sample_move_samples_to_layer_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'sample_ids' in params:
            query_params.append(('sampleIDs', params['sample_ids']))  # noqa: E501
            collection_formats['sampleIDs'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/moveToLayer/{storageLayerID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_patch_quantity(self, sample_id, delta, **kwargs):  # noqa: E501
        """Update a sample's quantity settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_quantity(sample_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleAmountNew delta: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_patch_quantity_with_http_info(sample_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_patch_quantity_with_http_info(sample_id, delta, **kwargs)  # noqa: E501
            return data

    def sample_patch_quantity_with_http_info(self, sample_id, delta, **kwargs):  # noqa: E501
        """Update a sample's quantity settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_quantity_with_http_info(sample_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleAmountNew delta: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_patch_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_patch_quantity`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `sample_patch_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/quantity', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleAmount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_patch_sample(self, sample_id, **kwargs):  # noqa: E501
        """Update a sample's properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_sample(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleUpdateDocs delta:
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_patch_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_patch_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def sample_patch_sample_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Update a sample's properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_sample_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleUpdateDocs delta:
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_patch_sample" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_patch_sample`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_patch_sample_meta(self, sample_id, sample_meta_id, delta, **kwargs):  # noqa: E501
        """Update a sample's meta field properties  # noqa: E501

        Use this call to update a meta field's value, or linked files/samples.    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma. If you want to unselect all options supply an empty string to the value property.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_sample_meta(sample_id, sample_meta_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int sample_meta_id: (required)
        :param SampleMeta delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_patch_sample_meta_with_http_info(sample_id, sample_meta_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_patch_sample_meta_with_http_info(sample_id, sample_meta_id, delta, **kwargs)  # noqa: E501
            return data

    def sample_patch_sample_meta_with_http_info(self, sample_id, sample_meta_id, delta, **kwargs):  # noqa: E501
        """Update a sample's meta field properties  # noqa: E501

        Use this call to update a meta field's value, or linked files/samples.    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma. If you want to unselect all options supply an empty string to the value property.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_sample_meta_with_http_info(sample_id, sample_meta_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param int sample_meta_id: (required)
        :param SampleMeta delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'sample_meta_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_patch_sample_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_patch_sample_meta`")  # noqa: E501
        # verify the required parameter 'sample_meta_id' is set
        if self.api_client.client_side_validation and ('sample_meta_id' not in params or
                                                       params['sample_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_meta_id` when calling `sample_patch_sample_meta`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `sample_patch_sample_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501
        if 'sample_meta_id' in params:
            path_params['sampleMetaID'] = params['sample_meta_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/meta/{sampleMetaID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_patch_sample_series(self, sample_series_id, delta, **kwargs):  # noqa: E501
        """Update a sampleseries properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_sample_series(sample_series_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param SampleSeriesNewWithSampleIDs delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_patch_sample_series_with_http_info(sample_series_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_patch_sample_series_with_http_info(sample_series_id, delta, **kwargs)  # noqa: E501
            return data

    def sample_patch_sample_series_with_http_info(self, sample_series_id, delta, **kwargs):  # noqa: E501
        """Update a sampleseries properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_sample_series_with_http_info(sample_series_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param SampleSeriesNewWithSampleIDs delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_series_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_patch_sample_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_series_id' is set
        if self.api_client.client_side_validation and ('sample_series_id' not in params or
                                                       params['sample_series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_series_id` when calling `sample_patch_sample_series`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `sample_patch_sample_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_series_id' in params:
            path_params['sampleSeriesID'] = params['sample_series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleseries/{sampleSeriesID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_patch_sample_series_samples(self, sample_series_id, **kwargs):  # noqa: E501
        """Update all samples in a sample series  # noqa: E501

        This call updates all the samples within a sample series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_sample_series_samples(sample_series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param UpdateSampleSeriesCompleteDocs sample:
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_patch_sample_series_samples_with_http_info(sample_series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_patch_sample_series_samples_with_http_info(sample_series_id, **kwargs)  # noqa: E501
            return data

    def sample_patch_sample_series_samples_with_http_info(self, sample_series_id, **kwargs):  # noqa: E501
        """Update all samples in a sample series  # noqa: E501

        This call updates all the samples within a sample series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_patch_sample_series_samples_with_http_info(sample_series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param UpdateSampleSeriesCompleteDocs sample:
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_series_id', 'sample', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_patch_sample_series_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_series_id' is set
        if self.api_client.client_side_validation and ('sample_series_id' not in params or
                                                       params['sample_series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_series_id` when calling `sample_patch_sample_series_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_series_id' in params:
            path_params['sampleSeriesID'] = params['sample_series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample' in params:
            body_params = params['sample']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{sampleSeriesID}/samples', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_put_quantity(self, sample_id, quantity, **kwargs):  # noqa: E501
        """Add or replace a sample's quantity settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_quantity(sample_id, quantity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleAmountNew quantity: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_put_quantity_with_http_info(sample_id, quantity, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_put_quantity_with_http_info(sample_id, quantity, **kwargs)  # noqa: E501
            return data

    def sample_put_quantity_with_http_info(self, sample_id, quantity, **kwargs):  # noqa: E501
        """Add or replace a sample's quantity settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_quantity_with_http_info(sample_id, quantity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleAmountNew quantity: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'quantity', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_put_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_put_quantity`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if self.api_client.client_side_validation and ('quantity' not in params or
                                                       params['quantity'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quantity` when calling `sample_put_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'quantity' in params:
            body_params = params['quantity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/quantity', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleAmount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_put_sample_meta(self, sample_id, dto, **kwargs):  # noqa: E501
        """Create or update a sample's meta field  # noqa: E501

        If you create a sample meta field that is defined in the sample type, make sure that you specify the correct sampleTypeMetaID for it. In addition, the sampleDataType should be the same as defined in the sample type.    You can create a meta field that isn't defined by leaving the sampleTypeMetaID blank. This is not advisable though, and results in the meta field's value not to be searchable!    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma.    This call will check if a meta field with the specified key already exists. If so it overwrites that meta field unless the value is the same; otherwise it creates a new meta field. Note: the sampleMetaID will be newly created on an overwrite.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_sample_meta(sample_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_put_sample_meta_with_http_info(sample_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_put_sample_meta_with_http_info(sample_id, dto, **kwargs)  # noqa: E501
            return data

    def sample_put_sample_meta_with_http_info(self, sample_id, dto, **kwargs):  # noqa: E501
        """Create or update a sample's meta field  # noqa: E501

        If you create a sample meta field that is defined in the sample type, make sure that you specify the correct sampleTypeMetaID for it. In addition, the sampleDataType should be the same as defined in the sample type.    You can create a meta field that isn't defined by leaving the sampleTypeMetaID blank. This is not advisable though, and results in the meta field's value not to be searchable!    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma.    This call will check if a meta field with the specified key already exists. If so it overwrites that meta field unless the value is the same; otherwise it creates a new meta field. Note: the sampleMetaID will be newly created on an overwrite.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_sample_meta_with_http_info(sample_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param SampleMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_put_sample_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_put_sample_meta`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `sample_put_sample_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/meta', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_put_sample_meta_bulk(self, new_value, sample_type_meta_id, sample_ids, **kwargs):  # noqa: E501
        """Create or update a sample's meta field properties in bulk, based on its sampleTypeMetaID  # noqa: E501

        Use this call to update a meta field's value, or linked files/samples.    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma. If you want to unselect all options supply an empty string to the value property.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_sample_meta_bulk(new_value, sample_type_meta_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_value: (required)
        :param int sample_type_meta_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_put_sample_meta_bulk_with_http_info(new_value, sample_type_meta_id, sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_put_sample_meta_bulk_with_http_info(new_value, sample_type_meta_id, sample_ids, **kwargs)  # noqa: E501
            return data

    def sample_put_sample_meta_bulk_with_http_info(self, new_value, sample_type_meta_id, sample_ids, **kwargs):  # noqa: E501
        """Create or update a sample's meta field properties in bulk, based on its sampleTypeMetaID  # noqa: E501

        Use this call to update a meta field's value, or linked files/samples.    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma. If you want to unselect all options supply an empty string to the value property.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_sample_meta_bulk_with_http_info(new_value, sample_type_meta_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str new_value: (required)
        :param int sample_type_meta_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['new_value', 'sample_type_meta_id', 'sample_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_put_sample_meta_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'new_value' is set
        if self.api_client.client_side_validation and ('new_value' not in params or
                                                       params['new_value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_value` when calling `sample_put_sample_meta_bulk`")  # noqa: E501
        # verify the required parameter 'sample_type_meta_id' is set
        if self.api_client.client_side_validation and ('sample_type_meta_id' not in params or
                                                       params['sample_type_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_meta_id` when calling `sample_put_sample_meta_bulk`")  # noqa: E501
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `sample_put_sample_meta_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_meta_id' in params:
            path_params['sampleTypeMetaID'] = params['sample_type_meta_id']  # noqa: E501

        query_params = []
        if 'new_value' in params:
            query_params.append(('newValue', params['new_value']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/meta/{sampleTypeMetaID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_put_sample_metas(self, sample_id, dtos, **kwargs):  # noqa: E501
        """Create or update multiple sample's meta fields  # noqa: E501

        If you create a sample meta field that is defined in the sample type, make sure that you specify the correct sampleTypeMetaID for it. In addition, the sampleDataType should be the same as defined in the sample type as defined in the sample type.    You can create a meta field that isn't defined by leaving the sampleTypeMetaID blank. This is not advisable though, and results in the meta field's value not to be searchable!    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma.    This call will check if a meta field with the specified key already exists. If so it overwrites that meta field unless the value is the same; otherwise it creates a new meta field. Note: the sampleMetaID will be newly created on an overwrite.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_sample_metas(sample_id, dtos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param list[SampleMetaNew] dtos: (required)
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_put_sample_metas_with_http_info(sample_id, dtos, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_put_sample_metas_with_http_info(sample_id, dtos, **kwargs)  # noqa: E501
            return data

    def sample_put_sample_metas_with_http_info(self, sample_id, dtos, **kwargs):  # noqa: E501
        """Create or update multiple sample's meta fields  # noqa: E501

        If you create a sample meta field that is defined in the sample type, make sure that you specify the correct sampleTypeMetaID for it. In addition, the sampleDataType should be the same as defined in the sample type as defined in the sample type.    You can create a meta field that isn't defined by leaving the sampleTypeMetaID blank. This is not advisable though, and results in the meta field's value not to be searchable!    In case of a meta field with selectable value - data types CHECKBOX, COMBO and RADIO - make sure that you only specify the values that are listed in the sample type's optionValues property. In case of multiple selected values, separate each value with a comma.    This call will check if a meta field with the specified key already exists. If so it overwrites that meta field unless the value is the same; otherwise it creates a new meta field. Note: the sampleMetaID will be newly created on an overwrite.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_sample_metas_with_http_info(sample_id, dtos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param list[SampleMetaNew] dtos: (required)
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'dtos', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_put_sample_metas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_put_sample_metas`")  # noqa: E501
        # verify the required parameter 'dtos' is set
        if self.api_client.client_side_validation and ('dtos' not in params or
                                                       params['dtos'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dtos` when calling `sample_put_sample_metas`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dtos' in params:
            body_params = params['dtos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/metas', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_put_series_quantity(self, series_id, quantity, **kwargs):  # noqa: E501
        """Add or replace quantity settings for all samples in a series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_series_quantity(series_id, quantity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: (required)
        :param SampleAmountNew quantity: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_put_series_quantity_with_http_info(series_id, quantity, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_put_series_quantity_with_http_info(series_id, quantity, **kwargs)  # noqa: E501
            return data

    def sample_put_series_quantity_with_http_info(self, series_id, quantity, **kwargs):  # noqa: E501
        """Add or replace quantity settings for all samples in a series  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_put_series_quantity_with_http_info(series_id, quantity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: (required)
        :param SampleAmountNew quantity: (required)
        :param str x_requested_with: 
        :return: SampleAmount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id', 'quantity', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_put_series_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if self.api_client.client_side_validation and ('series_id' not in params or
                                                       params['series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `series_id` when calling `sample_put_series_quantity`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if self.api_client.client_side_validation and ('quantity' not in params or
                                                       params['quantity'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quantity` when calling `sample_put_series_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['seriesID'] = params['series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'quantity' in params:
            body_params = params['quantity']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{seriesID}/quantity', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleAmount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_remove_samples_from_series(self, sample_series_id, sample_ids, **kwargs):  # noqa: E501
        """Remove samples from a series  # noqa: E501

        When all samples are removed from a series then the series is automatically disbanded.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_remove_samples_from_series(sample_series_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_remove_samples_from_series_with_http_info(sample_series_id, sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_remove_samples_from_series_with_http_info(sample_series_id, sample_ids, **kwargs)  # noqa: E501
            return data

    def sample_remove_samples_from_series_with_http_info(self, sample_series_id, sample_ids, **kwargs):  # noqa: E501
        """Remove samples from a series  # noqa: E501

        When all samples are removed from a series then the series is automatically disbanded.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_remove_samples_from_series_with_http_info(sample_series_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_series_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_series_id', 'sample_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_remove_samples_from_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_series_id' is set
        if self.api_client.client_side_validation and ('sample_series_id' not in params or
                                                       params['sample_series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_series_id` when calling `sample_remove_samples_from_series`")  # noqa: E501
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `sample_remove_samples_from_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_series_id' in params:
            path_params['sampleSeriesID'] = params['sample_series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{sampleSeriesID}/samples/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_remove_samples_from_their_locations(self, sample_ids, **kwargs):  # noqa: E501
        """Remove the location from multiples samples  # noqa: E501

        This call removes the location from specified samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_remove_samples_from_their_locations(sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_remove_samples_from_their_locations_with_http_info(sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_remove_samples_from_their_locations_with_http_info(sample_ids, **kwargs)  # noqa: E501
            return data

    def sample_remove_samples_from_their_locations_with_http_info(self, sample_ids, **kwargs):  # noqa: E501
        """Remove the location from multiples samples  # noqa: E501

        This call removes the location from specified samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_remove_samples_from_their_locations_with_http_info(sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_remove_samples_from_their_locations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `sample_remove_samples_from_their_locations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/removeFromLocation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_subtract_amount_from_series_quantity(self, series_id, delta, **kwargs):  # noqa: E501
        """Subtract from quantity amount for all samples in a series  # noqa: E501

        This call subtracts the given amount from the current quantity amounts of all samples in the series. All samples must have a quantity set and need to have the same quantity type. The amount of a sample cannot be dropped below 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_subtract_amount_from_series_quantity(series_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: (required)
        :param float delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_subtract_amount_from_series_quantity_with_http_info(series_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_subtract_amount_from_series_quantity_with_http_info(series_id, delta, **kwargs)  # noqa: E501
            return data

    def sample_subtract_amount_from_series_quantity_with_http_info(self, series_id, delta, **kwargs):  # noqa: E501
        """Subtract from quantity amount for all samples in a series  # noqa: E501

        This call subtracts the given amount from the current quantity amounts of all samples in the series. All samples must have a quantity set and need to have the same quantity type. The amount of a sample cannot be dropped below 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_subtract_amount_from_series_quantity_with_http_info(series_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int series_id: (required)
        :param float delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['series_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_subtract_amount_from_series_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'series_id' is set
        if self.api_client.client_side_validation and ('series_id' not in params or
                                                       params['series_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `series_id` when calling `sample_subtract_amount_from_series_quantity`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `sample_subtract_amount_from_series_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'series_id' in params:
            path_params['seriesID'] = params['series_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleSeries/{seriesID}/quantity/subtract', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_subtract_quantity_amount(self, sample_id, delta, **kwargs):  # noqa: E501
        """Subtract an amount from a sample's quantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_subtract_quantity_amount(sample_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param float delta: (required)
        :param str x_requested_with: 
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_subtract_quantity_amount_with_http_info(sample_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_subtract_quantity_amount_with_http_info(sample_id, delta, **kwargs)  # noqa: E501
            return data

    def sample_subtract_quantity_amount_with_http_info(self, sample_id, delta, **kwargs):  # noqa: E501
        """Subtract an amount from a sample's quantity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_subtract_quantity_amount_with_http_info(sample_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: (required)
        :param float delta: (required)
        :param str x_requested_with: 
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_subtract_quantity_amount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if self.api_client.client_side_validation and ('sample_id' not in params or
                                                       params['sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_id` when calling `sample_subtract_quantity_amount`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `sample_subtract_quantity_amount`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleID'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/samples/{sampleID}/quantity/subtract', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
