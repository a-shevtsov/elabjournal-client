# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SampleTypeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sample_type_create_sample_type(self, sample_type, **kwargs):  # noqa: E501
        """Create a new sample type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_create_sample_type(sample_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleTypeNew sample_type: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_create_sample_type_with_http_info(sample_type, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_create_sample_type_with_http_info(sample_type, **kwargs)  # noqa: E501
            return data

    def sample_type_create_sample_type_with_http_info(self, sample_type, **kwargs):  # noqa: E501
        """Create a new sample type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_create_sample_type_with_http_info(sample_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleTypeNew sample_type: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_create_sample_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type' is set
        if self.api_client.client_side_validation and ('sample_type' not in params or
                                                       params['sample_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type` when calling `sample_type_create_sample_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_type' in params:
            body_params = params['sample_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_create_sample_type_meta(self, sample_type_id, dto, **kwargs):  # noqa: E501
        """Create a new sample type's meta field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_create_sample_type_meta(sample_type_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param SampleTypeMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_create_sample_type_meta_with_http_info(sample_type_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_create_sample_type_meta_with_http_info(sample_type_id, dto, **kwargs)  # noqa: E501
            return data

    def sample_type_create_sample_type_meta_with_http_info(self, sample_type_id, dto, **kwargs):  # noqa: E501
        """Create a new sample type's meta field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_create_sample_type_meta_with_http_info(sample_type_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param SampleTypeMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_create_sample_type_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_create_sample_type_meta`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `sample_type_create_sample_type_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}/meta', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_delete_sample_type(self, sample_type_id, **kwargs):  # noqa: E501
        """Delete a sample type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_delete_sample_type(sample_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_delete_sample_type_with_http_info(sample_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_delete_sample_type_with_http_info(sample_type_id, **kwargs)  # noqa: E501
            return data

    def sample_type_delete_sample_type_with_http_info(self, sample_type_id, **kwargs):  # noqa: E501
        """Delete a sample type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_delete_sample_type_with_http_info(sample_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_delete_sample_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_delete_sample_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_delete_sample_type_meta(self, sample_type_id, sample_type_meta_id, **kwargs):  # noqa: E501
        """Delete a sample type's meta field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_delete_sample_type_meta(sample_type_id, sample_type_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_delete_sample_type_meta_with_http_info(sample_type_id, sample_type_meta_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_delete_sample_type_meta_with_http_info(sample_type_id, sample_type_meta_id, **kwargs)  # noqa: E501
            return data

    def sample_type_delete_sample_type_meta_with_http_info(self, sample_type_id, sample_type_meta_id, **kwargs):  # noqa: E501
        """Delete a sample type's meta field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_delete_sample_type_meta_with_http_info(sample_type_id, sample_type_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'sample_type_meta_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_delete_sample_type_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_delete_sample_type_meta`")  # noqa: E501
        # verify the required parameter 'sample_type_meta_id' is set
        if self.api_client.client_side_validation and ('sample_type_meta_id' not in params or
                                                       params['sample_type_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_meta_id` when calling `sample_type_delete_sample_type_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501
        if 'sample_type_meta_id' in params:
            path_params['sampleTypeMetaID'] = params['sample_type_meta_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}/meta/{sampleTypeMetaID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_get_sample_type_by_id(self, sample_type_id, **kwargs):  # noqa: E501
        """Get a sample type by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_by_id(sample_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_get_sample_type_by_id_with_http_info(sample_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_get_sample_type_by_id_with_http_info(sample_type_id, **kwargs)  # noqa: E501
            return data

    def sample_type_get_sample_type_by_id_with_http_info(self, sample_type_id, **kwargs):  # noqa: E501
        """Get a sample type by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_by_id_with_http_info(sample_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_get_sample_type_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_get_sample_type_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_get_sample_type_meta(self, sample_type_id, sample_type_meta_id, **kwargs):  # noqa: E501
        """Get a sample type's meta field by id  # noqa: E501

        $expand values (separate with comma for multiple expands):  * sampleTypeSection    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_meta(sample_type_id, sample_type_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleTypeMetaLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_get_sample_type_meta_with_http_info(sample_type_id, sample_type_meta_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_get_sample_type_meta_with_http_info(sample_type_id, sample_type_meta_id, **kwargs)  # noqa: E501
            return data

    def sample_type_get_sample_type_meta_with_http_info(self, sample_type_id, sample_type_meta_id, **kwargs):  # noqa: E501
        """Get a sample type's meta field by id  # noqa: E501

        $expand values (separate with comma for multiple expands):  * sampleTypeSection    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_meta_with_http_info(sample_type_id, sample_type_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: SampleTypeMetaLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'sample_type_meta_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_get_sample_type_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_get_sample_type_meta`")  # noqa: E501
        # verify the required parameter 'sample_type_meta_id' is set
        if self.api_client.client_side_validation and ('sample_type_meta_id' not in params or
                                                       params['sample_type_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_meta_id` when calling `sample_type_get_sample_type_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501
        if 'sample_type_meta_id' in params:
            path_params['sampleTypeMetaID'] = params['sample_type_meta_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}/meta/{sampleTypeMetaID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SampleTypeMetaLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_get_sample_type_meta_defaults(self, sample_type_id, sample_type_meta_id, **kwargs):  # noqa: E501
        """Get a sample type meta field's default options  # noqa: E501

        The default options are only present for field types RADIO, COMBO and CHECKBOX. These are the same as the \"optionValues\" field in the sample type calls, but this call also includes their database IDs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_meta_defaults(sample_type_id, sample_type_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleTypeMetaDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_get_sample_type_meta_defaults_with_http_info(sample_type_id, sample_type_meta_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_get_sample_type_meta_defaults_with_http_info(sample_type_id, sample_type_meta_id, **kwargs)  # noqa: E501
            return data

    def sample_type_get_sample_type_meta_defaults_with_http_info(self, sample_type_id, sample_type_meta_id, **kwargs):  # noqa: E501
        """Get a sample type meta field's default options  # noqa: E501

        The default options are only present for field types RADIO, COMBO and CHECKBOX. These are the same as the \"optionValues\" field in the sample type calls, but this call also includes their database IDs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_meta_defaults_with_http_info(sample_type_id, sample_type_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleTypeMetaDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'sample_type_meta_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_get_sample_type_meta_defaults" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_get_sample_type_meta_defaults`")  # noqa: E501
        # verify the required parameter 'sample_type_meta_id' is set
        if self.api_client.client_side_validation and ('sample_type_meta_id' not in params or
                                                       params['sample_type_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_meta_id` when calling `sample_type_get_sample_type_meta_defaults`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501
        if 'sample_type_meta_id' in params:
            path_params['sampleTypeMetaID'] = params['sample_type_meta_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}/meta/{sampleTypeMetaID}/defaults', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleTypeMetaDefault',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_get_sample_type_metas(self, sample_type_id, **kwargs):  # noqa: E501
        """Get all of a sample type's meta fields  # noqa: E501

        $expand values (separate with comma for multiple expands):  * sampleTypeSection    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_metas(sample_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleTypeMetaLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_get_sample_type_metas_with_http_info(sample_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_get_sample_type_metas_with_http_info(sample_type_id, **kwargs)  # noqa: E501
            return data

    def sample_type_get_sample_type_metas_with_http_info(self, sample_type_id, **kwargs):  # noqa: E501
        """Get all of a sample type's meta fields  # noqa: E501

        $expand values (separate with comma for multiple expands):  * sampleTypeSection    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_metas_with_http_info(sample_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleTypeMetaLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_get_sample_type_metas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_get_sample_type_metas`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeId'] = params['sample_type_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeId}/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleTypeMetaLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_get_sample_type_metas_for_all_sample_types(self, **kwargs):  # noqa: E501
        """Get all meta fields from all sample types  # noqa: E501

        $expand values (separate with comma for multiple expands):  * sampleTypeSection    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_metas_for_all_sample_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleTypeMetaLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_get_sample_type_metas_for_all_sample_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_get_sample_type_metas_for_all_sample_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_type_get_sample_type_metas_for_all_sample_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get all meta fields from all sample types  # noqa: E501

        $expand values (separate with comma for multiple expands):  * sampleTypeSection    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_type_metas_for_all_sample_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleTypeMetaLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_get_sample_type_metas_for_all_sample_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleTypeMetaLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_get_sample_types(self, **kwargs):  # noqa: E501
        """Get sample types  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied.  $expand values (separate with comma for multiple expands):  * sampleTypeNumbering    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str name: Filter by sample type name
        :param str archived: Filter by archived or non-archived sample types.
        :param str x_requested_with: 
        :return: PagedOfSampleTypeLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_get_sample_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_get_sample_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_type_get_sample_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get sample types  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied.  $expand values (separate with comma for multiple expands):  * sampleTypeNumbering    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str name: Filter by sample type name
        :param str archived: Filter by archived or non-archived sample types.
        :param str x_requested_with: 
        :return: PagedOfSampleTypeLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'name', 'archived', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_get_sample_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleTypeLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_get_sample_types_for_names(self, names, **kwargs):  # noqa: E501
        """Get a list of sample types for multiple names  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_types_for_names(names, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] names: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str archived: Filter by archived or non-archived sample types.
        :param str x_requested_with: 
        :return: PagedOfSampleType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_get_sample_types_for_names_with_http_info(names, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_get_sample_types_for_names_with_http_info(names, **kwargs)  # noqa: E501
            return data

    def sample_type_get_sample_types_for_names_with_http_info(self, names, **kwargs):  # noqa: E501
        """Get a list of sample types for multiple names  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_get_sample_types_for_names_with_http_info(names, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] names: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str archived: Filter by archived or non-archived sample types.
        :param str x_requested_with: 
        :return: PagedOfSampleType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['names', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'archived', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_get_sample_types_for_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'names' is set
        if self.api_client.client_side_validation and ('names' not in params or
                                                       params['names'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `names` when calling `sample_type_get_sample_types_for_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
            collection_formats['names'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/forNames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_patch_sample_type(self, sample_type_id, delta, **kwargs):  # noqa: E501
        """Update a sample type's properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_patch_sample_type(sample_type_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param SampleTypeNew delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_patch_sample_type_with_http_info(sample_type_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_patch_sample_type_with_http_info(sample_type_id, delta, **kwargs)  # noqa: E501
            return data

    def sample_type_patch_sample_type_with_http_info(self, sample_type_id, delta, **kwargs):  # noqa: E501
        """Update a sample type's properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_patch_sample_type_with_http_info(sample_type_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param SampleTypeNew delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_patch_sample_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_patch_sample_type`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `sample_type_patch_sample_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_patch_sample_type_meta(self, sample_type_id, sample_type_meta_id, delta, **kwargs):  # noqa: E501
        """Update a sample type meta field's properties  # noqa: E501

        Only pass the properties within your delta that needs to be changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_patch_sample_type_meta(sample_type_id, sample_type_meta_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param SampleTypeMetaUpdateDto delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_patch_sample_type_meta_with_http_info(sample_type_id, sample_type_meta_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_patch_sample_type_meta_with_http_info(sample_type_id, sample_type_meta_id, delta, **kwargs)  # noqa: E501
            return data

    def sample_type_patch_sample_type_meta_with_http_info(self, sample_type_id, sample_type_meta_id, delta, **kwargs):  # noqa: E501
        """Update a sample type meta field's properties  # noqa: E501

        Only pass the properties within your delta that needs to be changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_patch_sample_type_meta_with_http_info(sample_type_id, sample_type_meta_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param SampleTypeMetaUpdateDto delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'sample_type_meta_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_patch_sample_type_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_patch_sample_type_meta`")  # noqa: E501
        # verify the required parameter 'sample_type_meta_id' is set
        if self.api_client.client_side_validation and ('sample_type_meta_id' not in params or
                                                       params['sample_type_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_meta_id` when calling `sample_type_patch_sample_type_meta`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `sample_type_patch_sample_type_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501
        if 'sample_type_meta_id' in params:
            path_params['sampleTypeMetaID'] = params['sample_type_meta_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}/meta/{sampleTypeMetaID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_put_sample_type_meta(self, sample_type_id, dto, **kwargs):  # noqa: E501
        """Create or update a sample type's meta field  # noqa: E501

        This call will check if a sample type meta field with the specified key already exists. If so it overwrites that meta field; otherwise it creates a new meta field.    Note: the sampleTypeMetaID will always be newly created, even on an overwrite. Don't use this call to update an existing combo, checkbox or radio field that has existing samples if you don't want to get the mapping disconnected.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_put_sample_type_meta(sample_type_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param SampleTypeMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_put_sample_type_meta_with_http_info(sample_type_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_put_sample_type_meta_with_http_info(sample_type_id, dto, **kwargs)  # noqa: E501
            return data

    def sample_type_put_sample_type_meta_with_http_info(self, sample_type_id, dto, **kwargs):  # noqa: E501
        """Create or update a sample type's meta field  # noqa: E501

        This call will check if a sample type meta field with the specified key already exists. If so it overwrites that meta field; otherwise it creates a new meta field.    Note: the sampleTypeMetaID will always be newly created, even on an overwrite. Don't use this call to update an existing combo, checkbox or radio field that has existing samples if you don't want to get the mapping disconnected.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_put_sample_type_meta_with_http_info(sample_type_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param SampleTypeMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_put_sample_type_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_put_sample_type_meta`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `sample_type_put_sample_type_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}/meta', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_put_sample_type_meta_defaults(self, sample_type_id, sample_type_meta_id, option_list, **kwargs):  # noqa: E501
        """Update, Remove and Create a sample type meta field's default options  # noqa: E501

        The default options are only present for field types RADIO, COMBO and CHECKBOX. Ommit the sampleTypeMetaDefaultsID or set to 0 to create a new option value. Be sure to include the options that you need to keep, as the complete option values object will be replaced.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_put_sample_type_meta_defaults(sample_type_id, sample_type_meta_id, option_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param list[SampleTypeMetaOptionFieldDto] option_list: (required)
        :param str x_requested_with: 
        :return: PagedOfSampleTypeMetaDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_put_sample_type_meta_defaults_with_http_info(sample_type_id, sample_type_meta_id, option_list, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_put_sample_type_meta_defaults_with_http_info(sample_type_id, sample_type_meta_id, option_list, **kwargs)  # noqa: E501
            return data

    def sample_type_put_sample_type_meta_defaults_with_http_info(self, sample_type_id, sample_type_meta_id, option_list, **kwargs):  # noqa: E501
        """Update, Remove and Create a sample type meta field's default options  # noqa: E501

        The default options are only present for field types RADIO, COMBO and CHECKBOX. Ommit the sampleTypeMetaDefaultsID or set to 0 to create a new option value. Be sure to include the options that you need to keep, as the complete option values object will be replaced.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_put_sample_type_meta_defaults_with_http_info(sample_type_id, sample_type_meta_id, option_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param int sample_type_meta_id: (required)
        :param list[SampleTypeMetaOptionFieldDto] option_list: (required)
        :param str x_requested_with: 
        :return: PagedOfSampleTypeMetaDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'sample_type_meta_id', 'option_list', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_put_sample_type_meta_defaults" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_put_sample_type_meta_defaults`")  # noqa: E501
        # verify the required parameter 'sample_type_meta_id' is set
        if self.api_client.client_side_validation and ('sample_type_meta_id' not in params or
                                                       params['sample_type_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_meta_id` when calling `sample_type_put_sample_type_meta_defaults`")  # noqa: E501
        # verify the required parameter 'option_list' is set
        if self.api_client.client_side_validation and ('option_list' not in params or
                                                       params['option_list'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `option_list` when calling `sample_type_put_sample_type_meta_defaults`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501
        if 'sample_type_meta_id' in params:
            path_params['sampleTypeMetaID'] = params['sample_type_meta_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'option_list' in params:
            body_params = params['option_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}/meta/{sampleTypeMetaID}/defaults', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleTypeMetaDefault',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_restore_sample_type(self, sample_type_id, **kwargs):  # noqa: E501
        """Restore the given sampleType from archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_restore_sample_type(sample_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_restore_sample_type_with_http_info(sample_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_restore_sample_type_with_http_info(sample_type_id, **kwargs)  # noqa: E501
            return data

    def sample_type_restore_sample_type_with_http_info(self, sample_type_id, **kwargs):  # noqa: E501
        """Restore the given sampleType from archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_restore_sample_type_with_http_info(sample_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_type_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_type_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_restore_sample_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_type_id' is set
        if self.api_client.client_side_validation and ('sample_type_id' not in params or
                                                       params['sample_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_type_id` when calling `sample_type_restore_sample_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_type_id' in params:
            path_params['sampleTypeID'] = params['sample_type_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/sampleTypes/{sampleTypeID}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
