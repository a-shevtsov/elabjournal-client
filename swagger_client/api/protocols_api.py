# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProtocolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def protocol_log_get_protocol_logs(self, prot_id, **kwargs):  # noqa: E501
        """Get log records for a protocol  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_log_get_protocol_logs(prot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfProtocolLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_log_get_protocol_logs_with_http_info(prot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.protocol_log_get_protocol_logs_with_http_info(prot_id, **kwargs)  # noqa: E501
            return data

    def protocol_log_get_protocol_logs_with_http_info(self, prot_id, **kwargs):  # noqa: E501
        """Get log records for a protocol  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_log_get_protocol_logs_with_http_info(prot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfProtocolLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_log_get_protocol_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_id' is set
        if self.api_client.client_side_validation and ('prot_id' not in params or
                                                       params['prot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_id` when calling `protocol_log_get_protocol_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_id' in params:
            path_params['protID'] = params['prot_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/{protID}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfProtocolLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocol_saml_sign_saml_sign_protocol(self, prot_id, witness_user_id, **kwargs):  # noqa: E501
        """Sign a protocol using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_saml_sign_saml_sign_protocol(prot_id, witness_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param int witness_user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_saml_sign_saml_sign_protocol_with_http_info(prot_id, witness_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.protocol_saml_sign_saml_sign_protocol_with_http_info(prot_id, witness_user_id, **kwargs)  # noqa: E501
            return data

    def protocol_saml_sign_saml_sign_protocol_with_http_info(self, prot_id, witness_user_id, **kwargs):  # noqa: E501
        """Sign a protocol using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_saml_sign_saml_sign_protocol_with_http_info(prot_id, witness_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param int witness_user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_id', 'witness_user_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_saml_sign_saml_sign_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_id' is set
        if self.api_client.client_side_validation and ('prot_id' not in params or
                                                       params['prot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_id` when calling `protocol_saml_sign_saml_sign_protocol`")  # noqa: E501
        # verify the required parameter 'witness_user_id' is set
        if self.api_client.client_side_validation and ('witness_user_id' not in params or
                                                       params['witness_user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `witness_user_id` when calling `protocol_saml_sign_saml_sign_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_id' in params:
            path_params['protID'] = params['prot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'witness_user_id' in params:
            body_params = params['witness_user_id']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/{protID}/sign/saml', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocol_saml_sign_saml_witness_sign_protocol(self, prot_id, **kwargs):  # noqa: E501
        """Witness sign a protocol using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_saml_sign_saml_witness_sign_protocol(prot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_saml_sign_saml_witness_sign_protocol_with_http_info(prot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.protocol_saml_sign_saml_witness_sign_protocol_with_http_info(prot_id, **kwargs)  # noqa: E501
            return data

    def protocol_saml_sign_saml_witness_sign_protocol_with_http_info(self, prot_id, **kwargs):  # noqa: E501
        """Witness sign a protocol using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_saml_sign_saml_witness_sign_protocol_with_http_info(prot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_saml_sign_saml_witness_sign_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_id' is set
        if self.api_client.client_side_validation and ('prot_id' not in params or
                                                       params['prot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_id` when calling `protocol_saml_sign_saml_witness_sign_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_id' in params:
            path_params['protID'] = params['prot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/{protID}/witness/sign/saml', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocol_sign_decline_protocol(self, prot_id, reason, **kwargs):  # noqa: E501
        """Decline a protocol sign request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_decline_protocol(prot_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str reason: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_sign_decline_protocol_with_http_info(prot_id, reason, **kwargs)  # noqa: E501
        else:
            (data) = self.protocol_sign_decline_protocol_with_http_info(prot_id, reason, **kwargs)  # noqa: E501
            return data

    def protocol_sign_decline_protocol_with_http_info(self, prot_id, reason, **kwargs):  # noqa: E501
        """Decline a protocol sign request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_decline_protocol_with_http_info(prot_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str reason: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_id', 'reason', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_sign_decline_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_id' is set
        if self.api_client.client_side_validation and ('prot_id' not in params or
                                                       params['prot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_id` when calling `protocol_sign_decline_protocol`")  # noqa: E501
        # verify the required parameter 'reason' is set
        if self.api_client.client_side_validation and ('reason' not in params or
                                                       params['reason'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reason` when calling `protocol_sign_decline_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_id' in params:
            path_params['protID'] = params['prot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reason' in params:
            body_params = params['reason']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/hl7-v2', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/{protID}/witness/decline', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocol_sign_get_declined_witness_signatures(self, **kwargs):  # noqa: E501
        """Retrieve declined witness signatures  # noqa: E501

        Retrieve all declined witness signatures for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_get_declined_witness_signatures(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfDeclinedSignatureDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_sign_get_declined_witness_signatures_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.protocol_sign_get_declined_witness_signatures_with_http_info(**kwargs)  # noqa: E501
            return data

    def protocol_sign_get_declined_witness_signatures_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve declined witness signatures  # noqa: E501

        Retrieve all declined witness signatures for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_get_declined_witness_signatures_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfDeclinedSignatureDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_sign_get_declined_witness_signatures" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/signatures/declined', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfDeclinedSignatureDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocol_sign_get_pending_witness_signatures(self, **kwargs):  # noqa: E501
        """Retrieve pending witness signatures  # noqa: E501

        Retrieve all pending witness signatures for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_get_pending_witness_signatures(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfPendingSignatureDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_sign_get_pending_witness_signatures_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.protocol_sign_get_pending_witness_signatures_with_http_info(**kwargs)  # noqa: E501
            return data

    def protocol_sign_get_pending_witness_signatures_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve pending witness signatures  # noqa: E501

        Retrieve all pending witness signatures for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_get_pending_witness_signatures_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfPendingSignatureDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_sign_get_pending_witness_signatures" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/signatures/pending', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfPendingSignatureDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocol_sign_get_witnesses_candidates(self, prot_id, **kwargs):  # noqa: E501
        """Retrieve list of possible sign witnesses for this protocol  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_get_witnesses_candidates(prot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfProtocolWitnessDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_sign_get_witnesses_candidates_with_http_info(prot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.protocol_sign_get_witnesses_candidates_with_http_info(prot_id, **kwargs)  # noqa: E501
            return data

    def protocol_sign_get_witnesses_candidates_with_http_info(self, prot_id, **kwargs):  # noqa: E501
        """Retrieve list of possible sign witnesses for this protocol  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_get_witnesses_candidates_with_http_info(prot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfProtocolWitnessDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_sign_get_witnesses_candidates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_id' is set
        if self.api_client.client_side_validation and ('prot_id' not in params or
                                                       params['prot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_id` when calling `protocol_sign_get_witnesses_candidates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_id' in params:
            path_params['protID'] = params['prot_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/{protID}/witnessCandidates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfProtocolWitnessDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocol_sign_re_assign_witness(self, prot_id, witness_user_id, **kwargs):  # noqa: E501
        """Reassign a witness  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_re_assign_witness(prot_id, witness_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param int witness_user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_sign_re_assign_witness_with_http_info(prot_id, witness_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.protocol_sign_re_assign_witness_with_http_info(prot_id, witness_user_id, **kwargs)  # noqa: E501
            return data

    def protocol_sign_re_assign_witness_with_http_info(self, prot_id, witness_user_id, **kwargs):  # noqa: E501
        """Reassign a witness  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_re_assign_witness_with_http_info(prot_id, witness_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param int witness_user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_id', 'witness_user_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_sign_re_assign_witness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_id' is set
        if self.api_client.client_side_validation and ('prot_id' not in params or
                                                       params['prot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_id` when calling `protocol_sign_re_assign_witness`")  # noqa: E501
        # verify the required parameter 'witness_user_id' is set
        if self.api_client.client_side_validation and ('witness_user_id' not in params or
                                                       params['witness_user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `witness_user_id` when calling `protocol_sign_re_assign_witness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_id' in params:
            path_params['protID'] = params['prot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'witness_user_id' in params:
            body_params = params['witness_user_id']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/{protID}/sign/reassignWitness', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocol_sign_sign_protocol(self, prot_id, protocol_sign_credentials_dto, **kwargs):  # noqa: E501
        """Sign a protocol  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_sign_protocol(prot_id, protocol_sign_credentials_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param SignProtocolCredentialsDTO protocol_sign_credentials_dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_sign_sign_protocol_with_http_info(prot_id, protocol_sign_credentials_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.protocol_sign_sign_protocol_with_http_info(prot_id, protocol_sign_credentials_dto, **kwargs)  # noqa: E501
            return data

    def protocol_sign_sign_protocol_with_http_info(self, prot_id, protocol_sign_credentials_dto, **kwargs):  # noqa: E501
        """Sign a protocol  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_sign_protocol_with_http_info(prot_id, protocol_sign_credentials_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param SignProtocolCredentialsDTO protocol_sign_credentials_dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_id', 'protocol_sign_credentials_dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_sign_sign_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_id' is set
        if self.api_client.client_side_validation and ('prot_id' not in params or
                                                       params['prot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_id` when calling `protocol_sign_sign_protocol`")  # noqa: E501
        # verify the required parameter 'protocol_sign_credentials_dto' is set
        if self.api_client.client_side_validation and ('protocol_sign_credentials_dto' not in params or
                                                       params['protocol_sign_credentials_dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `protocol_sign_credentials_dto` when calling `protocol_sign_sign_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_id' in params:
            path_params['protID'] = params['prot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'protocol_sign_credentials_dto' in params:
            body_params = params['protocol_sign_credentials_dto']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/{protID}/sign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocol_sign_witness_sign_protocol(self, prot_id, protocol_sign_credentials_dto, **kwargs):  # noqa: E501
        """Witness sign a protocol  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_witness_sign_protocol(prot_id, protocol_sign_credentials_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param SignProtocolCredentialsDTO protocol_sign_credentials_dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocol_sign_witness_sign_protocol_with_http_info(prot_id, protocol_sign_credentials_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.protocol_sign_witness_sign_protocol_with_http_info(prot_id, protocol_sign_credentials_dto, **kwargs)  # noqa: E501
            return data

    def protocol_sign_witness_sign_protocol_with_http_info(self, prot_id, protocol_sign_credentials_dto, **kwargs):  # noqa: E501
        """Witness sign a protocol  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocol_sign_witness_sign_protocol_with_http_info(prot_id, protocol_sign_credentials_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param SignProtocolCredentialsDTO protocol_sign_credentials_dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_id', 'protocol_sign_credentials_dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocol_sign_witness_sign_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_id' is set
        if self.api_client.client_side_validation and ('prot_id' not in params or
                                                       params['prot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_id` when calling `protocol_sign_witness_sign_protocol`")  # noqa: E501
        # verify the required parameter 'protocol_sign_credentials_dto' is set
        if self.api_client.client_side_validation and ('protocol_sign_credentials_dto' not in params or
                                                       params['protocol_sign_credentials_dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `protocol_sign_credentials_dto` when calling `protocol_sign_witness_sign_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_id' in params:
            path_params['protID'] = params['prot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'protocol_sign_credentials_dto' in params:
            body_params = params['protocol_sign_credentials_dto']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/{protID}/witness/sign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocols_add_protocol_category(self, dto, **kwargs):  # noqa: E501
        """Add protocol category  # noqa: E501

        This call adds a protocol category. System admins are able to add public categories by using groupID: 0. Group admins are able to add group specific protocol categories with this call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_add_protocol_category(dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProtocolCategoryNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocols_add_protocol_category_with_http_info(dto, **kwargs)  # noqa: E501
        else:
            (data) = self.protocols_add_protocol_category_with_http_info(dto, **kwargs)  # noqa: E501
            return data

    def protocols_add_protocol_category_with_http_info(self, dto, **kwargs):  # noqa: E501
        """Add protocol category  # noqa: E501

        This call adds a protocol category. System admins are able to add public categories by using groupID: 0. Group admins are able to add group specific protocol categories with this call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_add_protocol_category_with_http_info(dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProtocolCategoryNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocols_add_protocol_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `protocols_add_protocol_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocols_archive_protocol_category(self, protocol_category_id, **kwargs):  # noqa: E501
        """Archive protocol category  # noqa: E501

        This call archives a protocol category. Warning: it is possible to remove categories that are linked to protocols. Be careful when archiving categories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_archive_protocol_category(protocol_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int protocol_category_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocols_archive_protocol_category_with_http_info(protocol_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.protocols_archive_protocol_category_with_http_info(protocol_category_id, **kwargs)  # noqa: E501
            return data

    def protocols_archive_protocol_category_with_http_info(self, protocol_category_id, **kwargs):  # noqa: E501
        """Archive protocol category  # noqa: E501

        This call archives a protocol category. Warning: it is possible to remove categories that are linked to protocols. Be careful when archiving categories.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_archive_protocol_category_with_http_info(protocol_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int protocol_category_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['protocol_category_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocols_archive_protocol_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'protocol_category_id' is set
        if self.api_client.client_side_validation and ('protocol_category_id' not in params or
                                                       params['protocol_category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `protocol_category_id` when calling `protocols_archive_protocol_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'protocol_category_id' in params:
            query_params.append(('protocolCategoryID', params['protocol_category_id']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/categories', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocols_get_categories(self, **kwargs):  # noqa: E501
        """Get available protocol categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str archived: Filter by archived categories
        :param str public: Filter on public protocol categories
        :param str x_requested_with: 
        :return: list[ProtocolCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocols_get_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.protocols_get_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def protocols_get_categories_with_http_info(self, **kwargs):  # noqa: E501
        """Get available protocol categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str archived: Filter by archived categories
        :param str public: Filter on public protocol categories
        :param str x_requested_with: 
        :return: list[ProtocolCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'view_id', 'view_columns', 'archived', 'public', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocols_get_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501
        if 'public' in params:
            query_params.append(('public', params['public']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProtocolCategory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocols_get_protocol_by_id(self, prot_id, **kwargs):  # noqa: E501
        """Get a protocol by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_by_id(prot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ProtocolEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocols_get_protocol_by_id_with_http_info(prot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.protocols_get_protocol_by_id_with_http_info(prot_id, **kwargs)  # noqa: E501
            return data

    def protocols_get_protocol_by_id_with_http_info(self, prot_id, **kwargs):  # noqa: E501
        """Get a protocol by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_by_id_with_http_info(prot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ProtocolEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocols_get_protocol_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_id' is set
        if self.api_client.client_side_validation and ('prot_id' not in params or
                                                       params['prot_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_id` when calling `protocols_get_protocol_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_id' in params:
            path_params['protID'] = params['prot_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/{protID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtocolEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocols_get_protocol_by_protocol_version_id(self, prot_version_id, **kwargs):  # noqa: E501
        """Get a protocol by its version id  # noqa: E501

        $expand values (separate with a comma for multiple expands):  * signingStatus  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_by_protocol_version_id(prot_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_version_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ProtocolEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocols_get_protocol_by_protocol_version_id_with_http_info(prot_version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.protocols_get_protocol_by_protocol_version_id_with_http_info(prot_version_id, **kwargs)  # noqa: E501
            return data

    def protocols_get_protocol_by_protocol_version_id_with_http_info(self, prot_version_id, **kwargs):  # noqa: E501
        """Get a protocol by its version id  # noqa: E501

        $expand values (separate with a comma for multiple expands):  * signingStatus  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_by_protocol_version_id_with_http_info(prot_version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int prot_version_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ProtocolEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['prot_version_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocols_get_protocol_by_protocol_version_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'prot_version_id' is set
        if self.api_client.client_side_validation and ('prot_version_id' not in params or
                                                       params['prot_version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prot_version_id` when calling `protocols_get_protocol_by_protocol_version_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'prot_version_id' in params:
            path_params['protVersionID'] = params['prot_version_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/version/{protVersionID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProtocolEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocols_get_protocol_digest(self, **kwargs):  # noqa: E501
        """Get protocol digest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_digest(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str scope: user/group/userAndGroup/public/all
        :param str x_requested_with: 
        :return: list[ProtocolDigest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocols_get_protocol_digest_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.protocols_get_protocol_digest_with_http_info(**kwargs)  # noqa: E501
            return data

    def protocols_get_protocol_digest_with_http_info(self, **kwargs):  # noqa: E501
        """Get protocol digest  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_digest_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str scope: user/group/userAndGroup/public/all
        :param str x_requested_with: 
        :return: list[ProtocolDigest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'view_id', 'view_columns', 'scope', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocols_get_protocol_digest" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/digest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProtocolDigest]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocols_get_protocol_file(self, file_id, **kwargs):  # noqa: E501
        """Get protocol file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_file(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str max_width: The maximum width of an image
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocols_get_protocol_file_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.protocols_get_protocol_file_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def protocols_get_protocol_file_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """Get protocol file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_file_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str max_width: The maximum width of an image
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id', 'expand', 'view_id', 'view_columns', 'max_width', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocols_get_protocol_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `protocols_get_protocol_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'max_width' in params:
            query_params.append(('maxWidth', params['max_width']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols/file/{fileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def protocols_get_protocol_list(self, **kwargs):  # noqa: E501
        """Get protocols  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str group_ids: Comma-separated list of groups to include if scope is group or userAndGroup
        :param str scope: user/group/userAndGroup/public/all
        :param str search: Search protocols by name or contents
        :param str x_requested_with: 
        :return: list[ProtocolEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.protocols_get_protocol_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.protocols_get_protocol_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def protocols_get_protocol_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get protocols  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.protocols_get_protocol_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str group_ids: Comma-separated list of groups to include if scope is group or userAndGroup
        :param str scope: user/group/userAndGroup/public/all
        :param str search: Search protocols by name or contents
        :param str x_requested_with: 
        :return: list[ProtocolEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'view_id', 'view_columns', 'group_ids', 'scope', 'search', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method protocols_get_protocol_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'group_ids' in params:
            query_params.append(('groupIDs', params['group_ids']))  # noqa: E501
        if 'scope' in params:
            query_params.append(('scope', params['scope']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/protocols', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProtocolEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
