# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TaskManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def task_bulk_update_status(self, bulk_status_update, **kwargs):  # noqa: E501
        """Update multiple task statuses  # noqa: E501

        Updates multiple task statuses. The valid statuses are: 'ASSIGNED', 'PROGRESS', 'COMPLETED'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_bulk_update_status(bulk_status_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskBulkStatusUpdate bulk_status_update: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_bulk_update_status_with_http_info(bulk_status_update, **kwargs)  # noqa: E501
        else:
            (data) = self.task_bulk_update_status_with_http_info(bulk_status_update, **kwargs)  # noqa: E501
            return data

    def task_bulk_update_status_with_http_info(self, bulk_status_update, **kwargs):  # noqa: E501
        """Update multiple task statuses  # noqa: E501

        Updates multiple task statuses. The valid statuses are: 'ASSIGNED', 'PROGRESS', 'COMPLETED'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_bulk_update_status_with_http_info(bulk_status_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskBulkStatusUpdate bulk_status_update: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_status_update', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_bulk_update_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_status_update' is set
        if self.api_client.client_side_validation and ('bulk_status_update' not in params or
                                                       params['bulk_status_update'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bulk_status_update` when calling `task_bulk_update_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bulk_status_update' in params:
            body_params = params['bulk_status_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/bulk', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_create_task(self, task, **kwargs):  # noqa: E501
        """Create a task  # noqa: E501

        Creates a task. The required fields are 'assigneeID' and 'status'. If the assigneeID is 0 the assigneeID willbe changed to the current user id. Also the task can only be assigned to an user in the same group as the current user.The valid statuses are: 'ASSIGNED', 'PROGRESS', 'COMPLETED'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_create_task(task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskNew task: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_create_task_with_http_info(task, **kwargs)  # noqa: E501
        else:
            (data) = self.task_create_task_with_http_info(task, **kwargs)  # noqa: E501
            return data

    def task_create_task_with_http_info(self, task, **kwargs):  # noqa: E501
        """Create a task  # noqa: E501

        Creates a task. The required fields are 'assigneeID' and 'status'. If the assigneeID is 0 the assigneeID willbe changed to the current user id. Also the task can only be assigned to an user in the same group as the current user.The valid statuses are: 'ASSIGNED', 'PROGRESS', 'COMPLETED'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_create_task_with_http_info(task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TaskNew task: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_create_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task' is set
        if self.api_client.client_side_validation and ('task' not in params or
                                                       params['task'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task` when calling `task_create_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task' in params:
            body_params = params['task']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_create_task_experiment_link(self, task_id, target_experiment_id, **kwargs):  # noqa: E501
        """Setup an experiment link  # noqa: E501

        Creates a link between an experiment and a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_create_task_experiment_link(task_id, target_experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param int target_experiment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_create_task_experiment_link_with_http_info(task_id, target_experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.task_create_task_experiment_link_with_http_info(task_id, target_experiment_id, **kwargs)  # noqa: E501
            return data

    def task_create_task_experiment_link_with_http_info(self, task_id, target_experiment_id, **kwargs):  # noqa: E501
        """Setup an experiment link  # noqa: E501

        Creates a link between an experiment and a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_create_task_experiment_link_with_http_info(task_id, target_experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param int target_experiment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'target_experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_create_task_experiment_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `task_create_task_experiment_link`")  # noqa: E501
        # verify the required parameter 'target_experiment_id' is set
        if self.api_client.client_side_validation and ('target_experiment_id' not in params or
                                                       params['target_experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_experiment_id` when calling `task_create_task_experiment_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskID'] = params['task_id']  # noqa: E501
        if 'target_experiment_id' in params:
            path_params['targetExperimentID'] = params['target_experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/{taskID}/links/experiment/{targetExperimentID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_create_task_protocol_link(self, task_id, target_protocol_id, **kwargs):  # noqa: E501
        """Setup a protocol link  # noqa: E501

        Creates a link between a protocol and a task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_create_task_protocol_link(task_id, target_protocol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param int target_protocol_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_create_task_protocol_link_with_http_info(task_id, target_protocol_id, **kwargs)  # noqa: E501
        else:
            (data) = self.task_create_task_protocol_link_with_http_info(task_id, target_protocol_id, **kwargs)  # noqa: E501
            return data

    def task_create_task_protocol_link_with_http_info(self, task_id, target_protocol_id, **kwargs):  # noqa: E501
        """Setup a protocol link  # noqa: E501

        Creates a link between a protocol and a task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_create_task_protocol_link_with_http_info(task_id, target_protocol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param int target_protocol_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'target_protocol_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_create_task_protocol_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `task_create_task_protocol_link`")  # noqa: E501
        # verify the required parameter 'target_protocol_id' is set
        if self.api_client.client_side_validation and ('target_protocol_id' not in params or
                                                       params['target_protocol_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_protocol_id` when calling `task_create_task_protocol_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskID'] = params['task_id']  # noqa: E501
        if 'target_protocol_id' in params:
            path_params['targetProtocolID'] = params['target_protocol_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/{taskID}/links/protocol/{targetProtocolID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_create_task_sample_link(self, task_id, target_sample_id, **kwargs):  # noqa: E501
        """Setup a sample link  # noqa: E501

        Creates a link between a sample and a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_create_task_sample_link(task_id, target_sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param int target_sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_create_task_sample_link_with_http_info(task_id, target_sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.task_create_task_sample_link_with_http_info(task_id, target_sample_id, **kwargs)  # noqa: E501
            return data

    def task_create_task_sample_link_with_http_info(self, task_id, target_sample_id, **kwargs):  # noqa: E501
        """Setup a sample link  # noqa: E501

        Creates a link between a sample and a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_create_task_sample_link_with_http_info(task_id, target_sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param int target_sample_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'target_sample_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_create_task_sample_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `task_create_task_sample_link`")  # noqa: E501
        # verify the required parameter 'target_sample_id' is set
        if self.api_client.client_side_validation and ('target_sample_id' not in params or
                                                       params['target_sample_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_sample_id` when calling `task_create_task_sample_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskID'] = params['task_id']  # noqa: E501
        if 'target_sample_id' in params:
            path_params['targetSampleID'] = params['target_sample_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/{taskID}/links/sample/{targetSampleID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_delete_task(self, task_id, **kwargs):  # noqa: E501
        """Delete a task  # noqa: E501

        Deletes a task which is created by or assigned to the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_delete_task(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_delete_task_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.task_delete_task_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def task_delete_task_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Delete a task  # noqa: E501

        Deletes a task which is created by or assigned to the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_delete_task_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_delete_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `task_delete_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskID'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/{taskID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_delete_tasks(self, task_ids, **kwargs):  # noqa: E501
        """Delete multiple tasks  # noqa: E501

        Deletes multiple tasks which are created by or assigned to the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_delete_tasks(task_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] task_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_delete_tasks_with_http_info(task_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.task_delete_tasks_with_http_info(task_ids, **kwargs)  # noqa: E501
            return data

    def task_delete_tasks_with_http_info(self, task_ids, **kwargs):  # noqa: E501
        """Delete multiple tasks  # noqa: E501

        Deletes multiple tasks which are created by or assigned to the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_delete_tasks_with_http_info(task_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] task_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_delete_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_ids' is set
        if self.api_client.client_side_validation and ('task_ids' not in params or
                                                       params['task_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_ids` when calling `task_delete_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task_ids' in params:
            body_params = params['task_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_get_all(self, **kwargs):  # noqa: E501
        """List all tasks for current logged in user  # noqa: E501

        Gets all the tasks for the current user. The list of task objects will consist of tasks that are created by or assigned to the           current user in descending order based on the created date.     $expand values (separate with comma for multiple expands):  * experiments  * samples  * protocols            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str status: Filter by status
        :param str assignee: Filter by assignee
        :param str before_date: Filter by due date before
        :param str after_date: Filter by due date after
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.task_get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def task_get_all_with_http_info(self, **kwargs):  # noqa: E501
        """List all tasks for current logged in user  # noqa: E501

        Gets all the tasks for the current user. The list of task objects will consist of tasks that are created by or assigned to the           current user in descending order based on the created date.     $expand values (separate with comma for multiple expands):  * experiments  * samples  * protocols            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str status: Filter by status
        :param str assignee: Filter by assignee
        :param str before_date: Filter by due date before
        :param str after_date: Filter by due date after
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'status', 'assignee', 'before_date', 'after_date', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'assignee' in params:
            query_params.append(('assignee', params['assignee']))  # noqa: E501
        if 'before_date' in params:
            query_params.append(('beforeDate', params['before_date']))  # noqa: E501
        if 'after_date' in params:
            query_params.append(('afterDate', params['after_date']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_get_linked_experiments(self, task_id, **kwargs):  # noqa: E501
        """Get the linked experiments of a task  # noqa: E501

        Fetches a link between an experiment and a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_linked_experiments(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_get_linked_experiments_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.task_get_linked_experiments_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def task_get_linked_experiments_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Get the linked experiments of a task  # noqa: E501

        Fetches a link between an experiment and a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_linked_experiments_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_get_linked_experiments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `task_get_linked_experiments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskID'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/{taskID}/links/experiment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_get_linked_protocols(self, task_id, **kwargs):  # noqa: E501
        """Get the linked protocols of a task  # noqa: E501

        Fetches all linked protocols of that task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_linked_protocols(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_get_linked_protocols_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.task_get_linked_protocols_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def task_get_linked_protocols_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Get the linked protocols of a task  # noqa: E501

        Fetches all linked protocols of that task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_linked_protocols_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_get_linked_protocols" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `task_get_linked_protocols`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskID'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/{taskID}/links/protocol', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_get_linked_samples(self, task_id, **kwargs):  # noqa: E501
        """Get the linked samples of a task  # noqa: E501

        Fetches a link between an sample and a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_linked_samples(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_get_linked_samples_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.task_get_linked_samples_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def task_get_linked_samples_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Get the linked samples of a task  # noqa: E501

        Fetches a link between an sample and a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_linked_samples_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_get_linked_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `task_get_linked_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskID'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/{taskID}/links/sample', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_get_single(self, task_id, **kwargs):  # noqa: E501
        """Get single task  # noqa: E501

        Gets a single task which is created by or assigned to the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_single(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_get_single_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.task_get_single_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def task_get_single_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Get single task  # noqa: E501

        Gets a single task which is created by or assigned to the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_get_single_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_get_single" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `task_get_single`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskID'] = params['task_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/{taskID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def task_update_task(self, task_id, task, **kwargs):  # noqa: E501
        """Update a task  # noqa: E501

        Updates a task. The required fields are 'assigneeID' and 'status'. If the assigneeID is 0 the assigneeID will be changed to the current user id. Also the task can only be assigned to an user in the same group as the current user.The valid statuses are: 'ASSIGNED', 'PROGRESS', 'COMPLETED'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_update_task(task_id, task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param TaskUpdate task: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.task_update_task_with_http_info(task_id, task, **kwargs)  # noqa: E501
        else:
            (data) = self.task_update_task_with_http_info(task_id, task, **kwargs)  # noqa: E501
            return data

    def task_update_task_with_http_info(self, task_id, task, **kwargs):  # noqa: E501
        """Update a task  # noqa: E501

        Updates a task. The required fields are 'assigneeID' and 'status'. If the assigneeID is 0 the assigneeID will be changed to the current user id. Also the task can only be assigned to an user in the same group as the current user.The valid statuses are: 'ASSIGNED', 'PROGRESS', 'COMPLETED'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.task_update_task_with_http_info(task_id, task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int task_id: (required)
        :param TaskUpdate task: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'task', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_update_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if self.api_client.client_side_validation and ('task_id' not in params or
                                                       params['task_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task_id` when calling `task_update_task`")  # noqa: E501
        # verify the required parameter 'task' is set
        if self.api_client.client_side_validation and ('task' not in params or
                                                       params['task'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `task` when calling `task_update_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskID'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'task' in params:
            body_params = params['task']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tasks/{taskID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
