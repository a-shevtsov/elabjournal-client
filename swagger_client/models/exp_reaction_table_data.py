# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ExpReactionTableData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reaction_table_id': 'int',
        'exp_journal_meta_id': 'int',
        'exp_journal_id': 'int',
        'iupac_name': 'str',
        'mol_formula': 'str',
        'quantity': 'str',
        'mol_weight': 'str',
        'density': 'str',
        'cas_number': 'str',
        'cas_url': 'str',
        'mdl_molfile': 'str',
        'mass_value': 'str',
        'mass_unit': 'str',
        'volume_value': 'str',
        'volume_unit': 'str',
        'mole_value': 'str',
        'mole_unit': 'str',
        'molarity_value': 'str',
        'molarity_unit': 'str',
        'limiting_reagent': 'bool',
        'equivalent': 'str',
        'used_value': 'str',
        'used_unit': 'str',
        'excess_value': 'str',
        'excess_unit': 'str',
        'theoretical_yield_value': 'str',
        'theoretical_yield_unit': 'str',
        'percent_yield_value': 'str',
        'percent_yield_unit': 'str',
        'coefficient': 'int',
        'type': 'str'
    }

    attribute_map = {
        'reaction_table_id': 'reactionTableID',
        'exp_journal_meta_id': 'expJournalMetaID',
        'exp_journal_id': 'expJournalID',
        'iupac_name': 'iupacName',
        'mol_formula': 'molFormula',
        'quantity': 'quantity',
        'mol_weight': 'molWeight',
        'density': 'density',
        'cas_number': 'casNumber',
        'cas_url': 'casUrl',
        'mdl_molfile': 'mdlMolfile',
        'mass_value': 'massValue',
        'mass_unit': 'massUnit',
        'volume_value': 'volumeValue',
        'volume_unit': 'volumeUnit',
        'mole_value': 'moleValue',
        'mole_unit': 'moleUnit',
        'molarity_value': 'molarityValue',
        'molarity_unit': 'molarityUnit',
        'limiting_reagent': 'limitingReagent',
        'equivalent': 'equivalent',
        'used_value': 'usedValue',
        'used_unit': 'usedUnit',
        'excess_value': 'excessValue',
        'excess_unit': 'excessUnit',
        'theoretical_yield_value': 'theoreticalYieldValue',
        'theoretical_yield_unit': 'theoreticalYieldUnit',
        'percent_yield_value': 'percentYieldValue',
        'percent_yield_unit': 'percentYieldUnit',
        'coefficient': 'coefficient',
        'type': 'type'
    }

    def __init__(self, reaction_table_id=None, exp_journal_meta_id=None, exp_journal_id=None, iupac_name=None, mol_formula=None, quantity=None, mol_weight=None, density=None, cas_number=None, cas_url=None, mdl_molfile=None, mass_value=None, mass_unit=None, volume_value=None, volume_unit=None, mole_value=None, mole_unit=None, molarity_value=None, molarity_unit=None, limiting_reagent=None, equivalent=None, used_value=None, used_unit=None, excess_value=None, excess_unit=None, theoretical_yield_value=None, theoretical_yield_unit=None, percent_yield_value=None, percent_yield_unit=None, coefficient=None, type=None, _configuration=None):  # noqa: E501
        """ExpReactionTableData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._reaction_table_id = None
        self._exp_journal_meta_id = None
        self._exp_journal_id = None
        self._iupac_name = None
        self._mol_formula = None
        self._quantity = None
        self._mol_weight = None
        self._density = None
        self._cas_number = None
        self._cas_url = None
        self._mdl_molfile = None
        self._mass_value = None
        self._mass_unit = None
        self._volume_value = None
        self._volume_unit = None
        self._mole_value = None
        self._mole_unit = None
        self._molarity_value = None
        self._molarity_unit = None
        self._limiting_reagent = None
        self._equivalent = None
        self._used_value = None
        self._used_unit = None
        self._excess_value = None
        self._excess_unit = None
        self._theoretical_yield_value = None
        self._theoretical_yield_unit = None
        self._percent_yield_value = None
        self._percent_yield_unit = None
        self._coefficient = None
        self._type = None
        self.discriminator = None

        if reaction_table_id is not None:
            self.reaction_table_id = reaction_table_id
        if exp_journal_meta_id is not None:
            self.exp_journal_meta_id = exp_journal_meta_id
        if exp_journal_id is not None:
            self.exp_journal_id = exp_journal_id
        if iupac_name is not None:
            self.iupac_name = iupac_name
        if mol_formula is not None:
            self.mol_formula = mol_formula
        if quantity is not None:
            self.quantity = quantity
        if mol_weight is not None:
            self.mol_weight = mol_weight
        if density is not None:
            self.density = density
        if cas_number is not None:
            self.cas_number = cas_number
        if cas_url is not None:
            self.cas_url = cas_url
        if mdl_molfile is not None:
            self.mdl_molfile = mdl_molfile
        if mass_value is not None:
            self.mass_value = mass_value
        if mass_unit is not None:
            self.mass_unit = mass_unit
        if volume_value is not None:
            self.volume_value = volume_value
        if volume_unit is not None:
            self.volume_unit = volume_unit
        if mole_value is not None:
            self.mole_value = mole_value
        if mole_unit is not None:
            self.mole_unit = mole_unit
        if molarity_value is not None:
            self.molarity_value = molarity_value
        if molarity_unit is not None:
            self.molarity_unit = molarity_unit
        if limiting_reagent is not None:
            self.limiting_reagent = limiting_reagent
        if equivalent is not None:
            self.equivalent = equivalent
        if used_value is not None:
            self.used_value = used_value
        if used_unit is not None:
            self.used_unit = used_unit
        if excess_value is not None:
            self.excess_value = excess_value
        if excess_unit is not None:
            self.excess_unit = excess_unit
        if theoretical_yield_value is not None:
            self.theoretical_yield_value = theoretical_yield_value
        if theoretical_yield_unit is not None:
            self.theoretical_yield_unit = theoretical_yield_unit
        if percent_yield_value is not None:
            self.percent_yield_value = percent_yield_value
        if percent_yield_unit is not None:
            self.percent_yield_unit = percent_yield_unit
        if coefficient is not None:
            self.coefficient = coefficient
        if type is not None:
            self.type = type

    @property
    def reaction_table_id(self):
        """Gets the reaction_table_id of this ExpReactionTableData.  # noqa: E501


        :return: The reaction_table_id of this ExpReactionTableData.  # noqa: E501
        :rtype: int
        """
        return self._reaction_table_id

    @reaction_table_id.setter
    def reaction_table_id(self, reaction_table_id):
        """Sets the reaction_table_id of this ExpReactionTableData.


        :param reaction_table_id: The reaction_table_id of this ExpReactionTableData.  # noqa: E501
        :type: int
        """

        self._reaction_table_id = reaction_table_id

    @property
    def exp_journal_meta_id(self):
        """Gets the exp_journal_meta_id of this ExpReactionTableData.  # noqa: E501


        :return: The exp_journal_meta_id of this ExpReactionTableData.  # noqa: E501
        :rtype: int
        """
        return self._exp_journal_meta_id

    @exp_journal_meta_id.setter
    def exp_journal_meta_id(self, exp_journal_meta_id):
        """Sets the exp_journal_meta_id of this ExpReactionTableData.


        :param exp_journal_meta_id: The exp_journal_meta_id of this ExpReactionTableData.  # noqa: E501
        :type: int
        """

        self._exp_journal_meta_id = exp_journal_meta_id

    @property
    def exp_journal_id(self):
        """Gets the exp_journal_id of this ExpReactionTableData.  # noqa: E501


        :return: The exp_journal_id of this ExpReactionTableData.  # noqa: E501
        :rtype: int
        """
        return self._exp_journal_id

    @exp_journal_id.setter
    def exp_journal_id(self, exp_journal_id):
        """Sets the exp_journal_id of this ExpReactionTableData.


        :param exp_journal_id: The exp_journal_id of this ExpReactionTableData.  # noqa: E501
        :type: int
        """

        self._exp_journal_id = exp_journal_id

    @property
    def iupac_name(self):
        """Gets the iupac_name of this ExpReactionTableData.  # noqa: E501


        :return: The iupac_name of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._iupac_name

    @iupac_name.setter
    def iupac_name(self, iupac_name):
        """Sets the iupac_name of this ExpReactionTableData.


        :param iupac_name: The iupac_name of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._iupac_name = iupac_name

    @property
    def mol_formula(self):
        """Gets the mol_formula of this ExpReactionTableData.  # noqa: E501


        :return: The mol_formula of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._mol_formula

    @mol_formula.setter
    def mol_formula(self, mol_formula):
        """Sets the mol_formula of this ExpReactionTableData.


        :param mol_formula: The mol_formula of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._mol_formula = mol_formula

    @property
    def quantity(self):
        """Gets the quantity of this ExpReactionTableData.  # noqa: E501


        :return: The quantity of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ExpReactionTableData.


        :param quantity: The quantity of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def mol_weight(self):
        """Gets the mol_weight of this ExpReactionTableData.  # noqa: E501


        :return: The mol_weight of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._mol_weight

    @mol_weight.setter
    def mol_weight(self, mol_weight):
        """Sets the mol_weight of this ExpReactionTableData.


        :param mol_weight: The mol_weight of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._mol_weight = mol_weight

    @property
    def density(self):
        """Gets the density of this ExpReactionTableData.  # noqa: E501


        :return: The density of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this ExpReactionTableData.


        :param density: The density of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._density = density

    @property
    def cas_number(self):
        """Gets the cas_number of this ExpReactionTableData.  # noqa: E501


        :return: The cas_number of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._cas_number

    @cas_number.setter
    def cas_number(self, cas_number):
        """Sets the cas_number of this ExpReactionTableData.


        :param cas_number: The cas_number of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._cas_number = cas_number

    @property
    def cas_url(self):
        """Gets the cas_url of this ExpReactionTableData.  # noqa: E501


        :return: The cas_url of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._cas_url

    @cas_url.setter
    def cas_url(self, cas_url):
        """Sets the cas_url of this ExpReactionTableData.


        :param cas_url: The cas_url of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._cas_url = cas_url

    @property
    def mdl_molfile(self):
        """Gets the mdl_molfile of this ExpReactionTableData.  # noqa: E501


        :return: The mdl_molfile of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._mdl_molfile

    @mdl_molfile.setter
    def mdl_molfile(self, mdl_molfile):
        """Sets the mdl_molfile of this ExpReactionTableData.


        :param mdl_molfile: The mdl_molfile of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._mdl_molfile = mdl_molfile

    @property
    def mass_value(self):
        """Gets the mass_value of this ExpReactionTableData.  # noqa: E501


        :return: The mass_value of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._mass_value

    @mass_value.setter
    def mass_value(self, mass_value):
        """Sets the mass_value of this ExpReactionTableData.


        :param mass_value: The mass_value of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._mass_value = mass_value

    @property
    def mass_unit(self):
        """Gets the mass_unit of this ExpReactionTableData.  # noqa: E501


        :return: The mass_unit of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._mass_unit

    @mass_unit.setter
    def mass_unit(self, mass_unit):
        """Sets the mass_unit of this ExpReactionTableData.


        :param mass_unit: The mass_unit of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._mass_unit = mass_unit

    @property
    def volume_value(self):
        """Gets the volume_value of this ExpReactionTableData.  # noqa: E501


        :return: The volume_value of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._volume_value

    @volume_value.setter
    def volume_value(self, volume_value):
        """Sets the volume_value of this ExpReactionTableData.


        :param volume_value: The volume_value of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._volume_value = volume_value

    @property
    def volume_unit(self):
        """Gets the volume_unit of this ExpReactionTableData.  # noqa: E501


        :return: The volume_unit of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._volume_unit

    @volume_unit.setter
    def volume_unit(self, volume_unit):
        """Sets the volume_unit of this ExpReactionTableData.


        :param volume_unit: The volume_unit of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._volume_unit = volume_unit

    @property
    def mole_value(self):
        """Gets the mole_value of this ExpReactionTableData.  # noqa: E501


        :return: The mole_value of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._mole_value

    @mole_value.setter
    def mole_value(self, mole_value):
        """Sets the mole_value of this ExpReactionTableData.


        :param mole_value: The mole_value of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._mole_value = mole_value

    @property
    def mole_unit(self):
        """Gets the mole_unit of this ExpReactionTableData.  # noqa: E501


        :return: The mole_unit of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._mole_unit

    @mole_unit.setter
    def mole_unit(self, mole_unit):
        """Sets the mole_unit of this ExpReactionTableData.


        :param mole_unit: The mole_unit of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._mole_unit = mole_unit

    @property
    def molarity_value(self):
        """Gets the molarity_value of this ExpReactionTableData.  # noqa: E501


        :return: The molarity_value of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._molarity_value

    @molarity_value.setter
    def molarity_value(self, molarity_value):
        """Sets the molarity_value of this ExpReactionTableData.


        :param molarity_value: The molarity_value of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._molarity_value = molarity_value

    @property
    def molarity_unit(self):
        """Gets the molarity_unit of this ExpReactionTableData.  # noqa: E501


        :return: The molarity_unit of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._molarity_unit

    @molarity_unit.setter
    def molarity_unit(self, molarity_unit):
        """Sets the molarity_unit of this ExpReactionTableData.


        :param molarity_unit: The molarity_unit of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._molarity_unit = molarity_unit

    @property
    def limiting_reagent(self):
        """Gets the limiting_reagent of this ExpReactionTableData.  # noqa: E501


        :return: The limiting_reagent of this ExpReactionTableData.  # noqa: E501
        :rtype: bool
        """
        return self._limiting_reagent

    @limiting_reagent.setter
    def limiting_reagent(self, limiting_reagent):
        """Sets the limiting_reagent of this ExpReactionTableData.


        :param limiting_reagent: The limiting_reagent of this ExpReactionTableData.  # noqa: E501
        :type: bool
        """

        self._limiting_reagent = limiting_reagent

    @property
    def equivalent(self):
        """Gets the equivalent of this ExpReactionTableData.  # noqa: E501


        :return: The equivalent of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._equivalent

    @equivalent.setter
    def equivalent(self, equivalent):
        """Sets the equivalent of this ExpReactionTableData.


        :param equivalent: The equivalent of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._equivalent = equivalent

    @property
    def used_value(self):
        """Gets the used_value of this ExpReactionTableData.  # noqa: E501


        :return: The used_value of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._used_value

    @used_value.setter
    def used_value(self, used_value):
        """Sets the used_value of this ExpReactionTableData.


        :param used_value: The used_value of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._used_value = used_value

    @property
    def used_unit(self):
        """Gets the used_unit of this ExpReactionTableData.  # noqa: E501


        :return: The used_unit of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._used_unit

    @used_unit.setter
    def used_unit(self, used_unit):
        """Sets the used_unit of this ExpReactionTableData.


        :param used_unit: The used_unit of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._used_unit = used_unit

    @property
    def excess_value(self):
        """Gets the excess_value of this ExpReactionTableData.  # noqa: E501


        :return: The excess_value of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._excess_value

    @excess_value.setter
    def excess_value(self, excess_value):
        """Sets the excess_value of this ExpReactionTableData.


        :param excess_value: The excess_value of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._excess_value = excess_value

    @property
    def excess_unit(self):
        """Gets the excess_unit of this ExpReactionTableData.  # noqa: E501


        :return: The excess_unit of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._excess_unit

    @excess_unit.setter
    def excess_unit(self, excess_unit):
        """Sets the excess_unit of this ExpReactionTableData.


        :param excess_unit: The excess_unit of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._excess_unit = excess_unit

    @property
    def theoretical_yield_value(self):
        """Gets the theoretical_yield_value of this ExpReactionTableData.  # noqa: E501


        :return: The theoretical_yield_value of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._theoretical_yield_value

    @theoretical_yield_value.setter
    def theoretical_yield_value(self, theoretical_yield_value):
        """Sets the theoretical_yield_value of this ExpReactionTableData.


        :param theoretical_yield_value: The theoretical_yield_value of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._theoretical_yield_value = theoretical_yield_value

    @property
    def theoretical_yield_unit(self):
        """Gets the theoretical_yield_unit of this ExpReactionTableData.  # noqa: E501


        :return: The theoretical_yield_unit of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._theoretical_yield_unit

    @theoretical_yield_unit.setter
    def theoretical_yield_unit(self, theoretical_yield_unit):
        """Sets the theoretical_yield_unit of this ExpReactionTableData.


        :param theoretical_yield_unit: The theoretical_yield_unit of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._theoretical_yield_unit = theoretical_yield_unit

    @property
    def percent_yield_value(self):
        """Gets the percent_yield_value of this ExpReactionTableData.  # noqa: E501


        :return: The percent_yield_value of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._percent_yield_value

    @percent_yield_value.setter
    def percent_yield_value(self, percent_yield_value):
        """Sets the percent_yield_value of this ExpReactionTableData.


        :param percent_yield_value: The percent_yield_value of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._percent_yield_value = percent_yield_value

    @property
    def percent_yield_unit(self):
        """Gets the percent_yield_unit of this ExpReactionTableData.  # noqa: E501


        :return: The percent_yield_unit of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._percent_yield_unit

    @percent_yield_unit.setter
    def percent_yield_unit(self, percent_yield_unit):
        """Sets the percent_yield_unit of this ExpReactionTableData.


        :param percent_yield_unit: The percent_yield_unit of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._percent_yield_unit = percent_yield_unit

    @property
    def coefficient(self):
        """Gets the coefficient of this ExpReactionTableData.  # noqa: E501


        :return: The coefficient of this ExpReactionTableData.  # noqa: E501
        :rtype: int
        """
        return self._coefficient

    @coefficient.setter
    def coefficient(self, coefficient):
        """Sets the coefficient of this ExpReactionTableData.


        :param coefficient: The coefficient of this ExpReactionTableData.  # noqa: E501
        :type: int
        """

        self._coefficient = coefficient

    @property
    def type(self):
        """Gets the type of this ExpReactionTableData.  # noqa: E501


        :return: The type of this ExpReactionTableData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExpReactionTableData.


        :param type: The type of this ExpReactionTableData.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpReactionTableData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpReactionTableData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExpReactionTableData):
            return True

        return self.to_dict() != other.to_dict()
