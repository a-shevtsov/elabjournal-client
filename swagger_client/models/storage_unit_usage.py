# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StorageUnitUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'created_by_user_id': 'int',
        'max_size': 'int',
        'name': 'str',
        'position': 'int',
        'sample_count': 'int',
        'storage_layer_definition_id': 'int',
        'sub_column_numbering': 'str',
        'sub_row_numbering': 'str',
        'sub_columns': 'int',
        'sub_rows': 'int',
        'top_storage_layer_id': 'int',
        'transposed': 'bool',
        'storage_layer_id': 'int',
        'storage_id': 'int',
        'storage_layer_count': 'int'
    }

    attribute_map = {
        'created': 'created',
        'created_by_user_id': 'createdByUserID',
        'max_size': 'maxSize',
        'name': 'name',
        'position': 'position',
        'sample_count': 'sampleCount',
        'storage_layer_definition_id': 'storageLayerDefinitionID',
        'sub_column_numbering': 'subColumnNumbering',
        'sub_row_numbering': 'subRowNumbering',
        'sub_columns': 'subColumns',
        'sub_rows': 'subRows',
        'top_storage_layer_id': 'topStorageLayerID',
        'transposed': 'transposed',
        'storage_layer_id': 'storageLayerID',
        'storage_id': 'storageID',
        'storage_layer_count': 'storageLayerCount'
    }

    def __init__(self, created=None, created_by_user_id=None, max_size=None, name=None, position=None, sample_count=None, storage_layer_definition_id=None, sub_column_numbering=None, sub_row_numbering=None, sub_columns=None, sub_rows=None, top_storage_layer_id=None, transposed=None, storage_layer_id=None, storage_id=None, storage_layer_count=None, _configuration=None):  # noqa: E501
        """StorageUnitUsage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._created_by_user_id = None
        self._max_size = None
        self._name = None
        self._position = None
        self._sample_count = None
        self._storage_layer_definition_id = None
        self._sub_column_numbering = None
        self._sub_row_numbering = None
        self._sub_columns = None
        self._sub_rows = None
        self._top_storage_layer_id = None
        self._transposed = None
        self._storage_layer_id = None
        self._storage_id = None
        self._storage_layer_count = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if max_size is not None:
            self.max_size = max_size
        if name is not None:
            self.name = name
        if position is not None:
            self.position = position
        if sample_count is not None:
            self.sample_count = sample_count
        if storage_layer_definition_id is not None:
            self.storage_layer_definition_id = storage_layer_definition_id
        if sub_column_numbering is not None:
            self.sub_column_numbering = sub_column_numbering
        if sub_row_numbering is not None:
            self.sub_row_numbering = sub_row_numbering
        if sub_columns is not None:
            self.sub_columns = sub_columns
        if sub_rows is not None:
            self.sub_rows = sub_rows
        if top_storage_layer_id is not None:
            self.top_storage_layer_id = top_storage_layer_id
        if transposed is not None:
            self.transposed = transposed
        if storage_layer_id is not None:
            self.storage_layer_id = storage_layer_id
        if storage_id is not None:
            self.storage_id = storage_id
        if storage_layer_count is not None:
            self.storage_layer_count = storage_layer_count

    @property
    def created(self):
        """Gets the created of this StorageUnitUsage.  # noqa: E501


        :return: The created of this StorageUnitUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this StorageUnitUsage.


        :param created: The created of this StorageUnitUsage.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this StorageUnitUsage.  # noqa: E501


        :return: The created_by_user_id of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this StorageUnitUsage.


        :param created_by_user_id: The created_by_user_id of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def max_size(self):
        """Gets the max_size of this StorageUnitUsage.  # noqa: E501


        :return: The max_size of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this StorageUnitUsage.


        :param max_size: The max_size of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._max_size = max_size

    @property
    def name(self):
        """Gets the name of this StorageUnitUsage.  # noqa: E501


        :return: The name of this StorageUnitUsage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageUnitUsage.


        :param name: The name of this StorageUnitUsage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this StorageUnitUsage.  # noqa: E501


        :return: The position of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StorageUnitUsage.


        :param position: The position of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def sample_count(self):
        """Gets the sample_count of this StorageUnitUsage.  # noqa: E501


        :return: The sample_count of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._sample_count

    @sample_count.setter
    def sample_count(self, sample_count):
        """Sets the sample_count of this StorageUnitUsage.


        :param sample_count: The sample_count of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._sample_count = sample_count

    @property
    def storage_layer_definition_id(self):
        """Gets the storage_layer_definition_id of this StorageUnitUsage.  # noqa: E501


        :return: The storage_layer_definition_id of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._storage_layer_definition_id

    @storage_layer_definition_id.setter
    def storage_layer_definition_id(self, storage_layer_definition_id):
        """Sets the storage_layer_definition_id of this StorageUnitUsage.


        :param storage_layer_definition_id: The storage_layer_definition_id of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._storage_layer_definition_id = storage_layer_definition_id

    @property
    def sub_column_numbering(self):
        """Gets the sub_column_numbering of this StorageUnitUsage.  # noqa: E501


        :return: The sub_column_numbering of this StorageUnitUsage.  # noqa: E501
        :rtype: str
        """
        return self._sub_column_numbering

    @sub_column_numbering.setter
    def sub_column_numbering(self, sub_column_numbering):
        """Sets the sub_column_numbering of this StorageUnitUsage.


        :param sub_column_numbering: The sub_column_numbering of this StorageUnitUsage.  # noqa: E501
        :type: str
        """
        allowed_values = ["NUMERIC", "ALPHA", "ROMAN", "NONE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sub_column_numbering not in allowed_values):
            raise ValueError(
                "Invalid value for `sub_column_numbering` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_column_numbering, allowed_values)
            )

        self._sub_column_numbering = sub_column_numbering

    @property
    def sub_row_numbering(self):
        """Gets the sub_row_numbering of this StorageUnitUsage.  # noqa: E501


        :return: The sub_row_numbering of this StorageUnitUsage.  # noqa: E501
        :rtype: str
        """
        return self._sub_row_numbering

    @sub_row_numbering.setter
    def sub_row_numbering(self, sub_row_numbering):
        """Sets the sub_row_numbering of this StorageUnitUsage.


        :param sub_row_numbering: The sub_row_numbering of this StorageUnitUsage.  # noqa: E501
        :type: str
        """
        allowed_values = ["NUMERIC", "ALPHA", "ROMAN", "NONE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                sub_row_numbering not in allowed_values):
            raise ValueError(
                "Invalid value for `sub_row_numbering` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_row_numbering, allowed_values)
            )

        self._sub_row_numbering = sub_row_numbering

    @property
    def sub_columns(self):
        """Gets the sub_columns of this StorageUnitUsage.  # noqa: E501


        :return: The sub_columns of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._sub_columns

    @sub_columns.setter
    def sub_columns(self, sub_columns):
        """Sets the sub_columns of this StorageUnitUsage.


        :param sub_columns: The sub_columns of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._sub_columns = sub_columns

    @property
    def sub_rows(self):
        """Gets the sub_rows of this StorageUnitUsage.  # noqa: E501


        :return: The sub_rows of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._sub_rows

    @sub_rows.setter
    def sub_rows(self, sub_rows):
        """Sets the sub_rows of this StorageUnitUsage.


        :param sub_rows: The sub_rows of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._sub_rows = sub_rows

    @property
    def top_storage_layer_id(self):
        """Gets the top_storage_layer_id of this StorageUnitUsage.  # noqa: E501


        :return: The top_storage_layer_id of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._top_storage_layer_id

    @top_storage_layer_id.setter
    def top_storage_layer_id(self, top_storage_layer_id):
        """Sets the top_storage_layer_id of this StorageUnitUsage.


        :param top_storage_layer_id: The top_storage_layer_id of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._top_storage_layer_id = top_storage_layer_id

    @property
    def transposed(self):
        """Gets the transposed of this StorageUnitUsage.  # noqa: E501


        :return: The transposed of this StorageUnitUsage.  # noqa: E501
        :rtype: bool
        """
        return self._transposed

    @transposed.setter
    def transposed(self, transposed):
        """Sets the transposed of this StorageUnitUsage.


        :param transposed: The transposed of this StorageUnitUsage.  # noqa: E501
        :type: bool
        """

        self._transposed = transposed

    @property
    def storage_layer_id(self):
        """Gets the storage_layer_id of this StorageUnitUsage.  # noqa: E501


        :return: The storage_layer_id of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._storage_layer_id

    @storage_layer_id.setter
    def storage_layer_id(self, storage_layer_id):
        """Sets the storage_layer_id of this StorageUnitUsage.


        :param storage_layer_id: The storage_layer_id of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._storage_layer_id = storage_layer_id

    @property
    def storage_id(self):
        """Gets the storage_id of this StorageUnitUsage.  # noqa: E501


        :return: The storage_id of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this StorageUnitUsage.


        :param storage_id: The storage_id of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._storage_id = storage_id

    @property
    def storage_layer_count(self):
        """Gets the storage_layer_count of this StorageUnitUsage.  # noqa: E501


        :return: The storage_layer_count of this StorageUnitUsage.  # noqa: E501
        :rtype: int
        """
        return self._storage_layer_count

    @storage_layer_count.setter
    def storage_layer_count(self, storage_layer_count):
        """Sets the storage_layer_count of this StorageUnitUsage.


        :param storage_layer_count: The storage_layer_count of this StorageUnitUsage.  # noqa: E501
        :type: int
        """

        self._storage_layer_count = storage_layer_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageUnitUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageUnitUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageUnitUsage):
            return True

        return self.to_dict() != other.to_dict()
