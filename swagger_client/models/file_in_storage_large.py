# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FileInStorageLarge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filename': 'str',
        'user_id': 'int',
        'file_id': 'int',
        'size': 'int',
        'group_id': 'int',
        'folder_id': 'int',
        'created': 'datetime',
        'location': 'str',
        'path': 'str',
        'extension': 'str',
        'file_type': 'str',
        'icon': 'str'
    }

    attribute_map = {
        'filename': 'filename',
        'user_id': 'userID',
        'file_id': 'fileID',
        'size': 'size',
        'group_id': 'groupID',
        'folder_id': 'folderID',
        'created': 'created',
        'location': 'location',
        'path': 'path',
        'extension': 'extension',
        'file_type': 'fileType',
        'icon': 'icon'
    }

    def __init__(self, filename=None, user_id=None, file_id=None, size=None, group_id=None, folder_id=None, created=None, location=None, path=None, extension=None, file_type=None, icon=None, _configuration=None):  # noqa: E501
        """FileInStorageLarge - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filename = None
        self._user_id = None
        self._file_id = None
        self._size = None
        self._group_id = None
        self._folder_id = None
        self._created = None
        self._location = None
        self._path = None
        self._extension = None
        self._file_type = None
        self._icon = None
        self.discriminator = None

        if filename is not None:
            self.filename = filename
        if user_id is not None:
            self.user_id = user_id
        if file_id is not None:
            self.file_id = file_id
        if size is not None:
            self.size = size
        if group_id is not None:
            self.group_id = group_id
        if folder_id is not None:
            self.folder_id = folder_id
        if created is not None:
            self.created = created
        if location is not None:
            self.location = location
        if path is not None:
            self.path = path
        if extension is not None:
            self.extension = extension
        if file_type is not None:
            self.file_type = file_type
        if icon is not None:
            self.icon = icon

    @property
    def filename(self):
        """Gets the filename of this FileInStorageLarge.  # noqa: E501


        :return: The filename of this FileInStorageLarge.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this FileInStorageLarge.


        :param filename: The filename of this FileInStorageLarge.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def user_id(self):
        """Gets the user_id of this FileInStorageLarge.  # noqa: E501


        :return: The user_id of this FileInStorageLarge.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FileInStorageLarge.


        :param user_id: The user_id of this FileInStorageLarge.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def file_id(self):
        """Gets the file_id of this FileInStorageLarge.  # noqa: E501


        :return: The file_id of this FileInStorageLarge.  # noqa: E501
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FileInStorageLarge.


        :param file_id: The file_id of this FileInStorageLarge.  # noqa: E501
        :type: int
        """

        self._file_id = file_id

    @property
    def size(self):
        """Gets the size of this FileInStorageLarge.  # noqa: E501


        :return: The size of this FileInStorageLarge.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileInStorageLarge.


        :param size: The size of this FileInStorageLarge.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def group_id(self):
        """Gets the group_id of this FileInStorageLarge.  # noqa: E501


        :return: The group_id of this FileInStorageLarge.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this FileInStorageLarge.


        :param group_id: The group_id of this FileInStorageLarge.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def folder_id(self):
        """Gets the folder_id of this FileInStorageLarge.  # noqa: E501


        :return: The folder_id of this FileInStorageLarge.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this FileInStorageLarge.


        :param folder_id: The folder_id of this FileInStorageLarge.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    @property
    def created(self):
        """Gets the created of this FileInStorageLarge.  # noqa: E501


        :return: The created of this FileInStorageLarge.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FileInStorageLarge.


        :param created: The created of this FileInStorageLarge.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def location(self):
        """Gets the location of this FileInStorageLarge.  # noqa: E501


        :return: The location of this FileInStorageLarge.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FileInStorageLarge.


        :param location: The location of this FileInStorageLarge.  # noqa: E501
        :type: str
        """
        allowed_values = ["ELABJOURNAL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                location not in allowed_values):
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"  # noqa: E501
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def path(self):
        """Gets the path of this FileInStorageLarge.  # noqa: E501


        :return: The path of this FileInStorageLarge.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileInStorageLarge.


        :param path: The path of this FileInStorageLarge.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def extension(self):
        """Gets the extension of this FileInStorageLarge.  # noqa: E501


        :return: The extension of this FileInStorageLarge.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this FileInStorageLarge.


        :param extension: The extension of this FileInStorageLarge.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def file_type(self):
        """Gets the file_type of this FileInStorageLarge.  # noqa: E501


        :return: The file_type of this FileInStorageLarge.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this FileInStorageLarge.


        :param file_type: The file_type of this FileInStorageLarge.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def icon(self):
        """Gets the icon of this FileInStorageLarge.  # noqa: E501


        :return: The icon of this FileInStorageLarge.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this FileInStorageLarge.


        :param icon: The icon of this FileInStorageLarge.  # noqa: E501
        :type: str
        """

        self._icon = icon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileInStorageLarge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileInStorageLarge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileInStorageLarge):
            return True

        return self.to_dict() != other.to_dict()
