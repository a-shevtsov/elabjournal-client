# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AddonMaster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author_name': 'str',
        'plugins': 'list[AddonPlugin]',
        'developer': 'Developer',
        'category_maps': 'list[AddonCategoryMap]',
        'has_config': 'bool',
        'has_file_monitoring_support': 'bool',
        'categories': 'list[AddonCategory]',
        'dependencies': 'list[int]',
        'addon_license_types': 'list[AddonLicenseType]',
        'sdk_plugin_master_id': 'int',
        'sdk_foreign_source_id': 'int',
        'foreign_plugin_master_id': 'int',
        'is_public': 'bool',
        'name': 'str',
        'root_var': 'str',
        'website_link': 'str',
        'developer_mail': 'str',
        'documentation_link': 'str',
        'scope': 'str',
        'active': 'bool',
        'image_url': 'str',
        'sdk_plugin_id': 'int',
        'status': 'str',
        'version': 'str',
        'details': 'Details'
    }

    attribute_map = {
        'author_name': 'AuthorName',
        'plugins': 'Plugins',
        'developer': 'Developer',
        'category_maps': 'CategoryMaps',
        'has_config': 'HasConfig',
        'has_file_monitoring_support': 'HasFileMonitoringSupport',
        'categories': 'Categories',
        'dependencies': 'Dependencies',
        'addon_license_types': 'AddonLicenseTypes',
        'sdk_plugin_master_id': 'sdkPluginMasterID',
        'sdk_foreign_source_id': 'SDKForeignSourceID',
        'foreign_plugin_master_id': 'foreignPluginMasterID',
        'is_public': 'IsPublic',
        'name': 'Name',
        'root_var': 'RootVar',
        'website_link': 'WebsiteLink',
        'developer_mail': 'DeveloperMail',
        'documentation_link': 'DocumentationLink',
        'scope': 'Scope',
        'active': 'Active',
        'image_url': 'imageURL',
        'sdk_plugin_id': 'sdkPluginID',
        'status': 'status',
        'version': 'version',
        'details': 'details'
    }

    def __init__(self, author_name=None, plugins=None, developer=None, category_maps=None, has_config=None, has_file_monitoring_support=None, categories=None, dependencies=None, addon_license_types=None, sdk_plugin_master_id=None, sdk_foreign_source_id=None, foreign_plugin_master_id=None, is_public=None, name=None, root_var=None, website_link=None, developer_mail=None, documentation_link=None, scope=None, active=None, image_url=None, sdk_plugin_id=None, status=None, version=None, details=None, _configuration=None):  # noqa: E501
        """AddonMaster - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._author_name = None
        self._plugins = None
        self._developer = None
        self._category_maps = None
        self._has_config = None
        self._has_file_monitoring_support = None
        self._categories = None
        self._dependencies = None
        self._addon_license_types = None
        self._sdk_plugin_master_id = None
        self._sdk_foreign_source_id = None
        self._foreign_plugin_master_id = None
        self._is_public = None
        self._name = None
        self._root_var = None
        self._website_link = None
        self._developer_mail = None
        self._documentation_link = None
        self._scope = None
        self._active = None
        self._image_url = None
        self._sdk_plugin_id = None
        self._status = None
        self._version = None
        self._details = None
        self.discriminator = None

        if author_name is not None:
            self.author_name = author_name
        if plugins is not None:
            self.plugins = plugins
        if developer is not None:
            self.developer = developer
        if category_maps is not None:
            self.category_maps = category_maps
        if has_config is not None:
            self.has_config = has_config
        if has_file_monitoring_support is not None:
            self.has_file_monitoring_support = has_file_monitoring_support
        if categories is not None:
            self.categories = categories
        if dependencies is not None:
            self.dependencies = dependencies
        if addon_license_types is not None:
            self.addon_license_types = addon_license_types
        if sdk_plugin_master_id is not None:
            self.sdk_plugin_master_id = sdk_plugin_master_id
        if sdk_foreign_source_id is not None:
            self.sdk_foreign_source_id = sdk_foreign_source_id
        if foreign_plugin_master_id is not None:
            self.foreign_plugin_master_id = foreign_plugin_master_id
        if is_public is not None:
            self.is_public = is_public
        if name is not None:
            self.name = name
        if root_var is not None:
            self.root_var = root_var
        if website_link is not None:
            self.website_link = website_link
        if developer_mail is not None:
            self.developer_mail = developer_mail
        if documentation_link is not None:
            self.documentation_link = documentation_link
        if scope is not None:
            self.scope = scope
        if active is not None:
            self.active = active
        if image_url is not None:
            self.image_url = image_url
        if sdk_plugin_id is not None:
            self.sdk_plugin_id = sdk_plugin_id
        if status is not None:
            self.status = status
        if version is not None:
            self.version = version
        if details is not None:
            self.details = details

    @property
    def author_name(self):
        """Gets the author_name of this AddonMaster.  # noqa: E501


        :return: The author_name of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this AddonMaster.


        :param author_name: The author_name of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._author_name = author_name

    @property
    def plugins(self):
        """Gets the plugins of this AddonMaster.  # noqa: E501


        :return: The plugins of this AddonMaster.  # noqa: E501
        :rtype: list[AddonPlugin]
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins):
        """Sets the plugins of this AddonMaster.


        :param plugins: The plugins of this AddonMaster.  # noqa: E501
        :type: list[AddonPlugin]
        """

        self._plugins = plugins

    @property
    def developer(self):
        """Gets the developer of this AddonMaster.  # noqa: E501


        :return: The developer of this AddonMaster.  # noqa: E501
        :rtype: Developer
        """
        return self._developer

    @developer.setter
    def developer(self, developer):
        """Sets the developer of this AddonMaster.


        :param developer: The developer of this AddonMaster.  # noqa: E501
        :type: Developer
        """

        self._developer = developer

    @property
    def category_maps(self):
        """Gets the category_maps of this AddonMaster.  # noqa: E501


        :return: The category_maps of this AddonMaster.  # noqa: E501
        :rtype: list[AddonCategoryMap]
        """
        return self._category_maps

    @category_maps.setter
    def category_maps(self, category_maps):
        """Sets the category_maps of this AddonMaster.


        :param category_maps: The category_maps of this AddonMaster.  # noqa: E501
        :type: list[AddonCategoryMap]
        """

        self._category_maps = category_maps

    @property
    def has_config(self):
        """Gets the has_config of this AddonMaster.  # noqa: E501


        :return: The has_config of this AddonMaster.  # noqa: E501
        :rtype: bool
        """
        return self._has_config

    @has_config.setter
    def has_config(self, has_config):
        """Sets the has_config of this AddonMaster.


        :param has_config: The has_config of this AddonMaster.  # noqa: E501
        :type: bool
        """

        self._has_config = has_config

    @property
    def has_file_monitoring_support(self):
        """Gets the has_file_monitoring_support of this AddonMaster.  # noqa: E501


        :return: The has_file_monitoring_support of this AddonMaster.  # noqa: E501
        :rtype: bool
        """
        return self._has_file_monitoring_support

    @has_file_monitoring_support.setter
    def has_file_monitoring_support(self, has_file_monitoring_support):
        """Sets the has_file_monitoring_support of this AddonMaster.


        :param has_file_monitoring_support: The has_file_monitoring_support of this AddonMaster.  # noqa: E501
        :type: bool
        """

        self._has_file_monitoring_support = has_file_monitoring_support

    @property
    def categories(self):
        """Gets the categories of this AddonMaster.  # noqa: E501


        :return: The categories of this AddonMaster.  # noqa: E501
        :rtype: list[AddonCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AddonMaster.


        :param categories: The categories of this AddonMaster.  # noqa: E501
        :type: list[AddonCategory]
        """

        self._categories = categories

    @property
    def dependencies(self):
        """Gets the dependencies of this AddonMaster.  # noqa: E501


        :return: The dependencies of this AddonMaster.  # noqa: E501
        :rtype: list[int]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this AddonMaster.


        :param dependencies: The dependencies of this AddonMaster.  # noqa: E501
        :type: list[int]
        """

        self._dependencies = dependencies

    @property
    def addon_license_types(self):
        """Gets the addon_license_types of this AddonMaster.  # noqa: E501


        :return: The addon_license_types of this AddonMaster.  # noqa: E501
        :rtype: list[AddonLicenseType]
        """
        return self._addon_license_types

    @addon_license_types.setter
    def addon_license_types(self, addon_license_types):
        """Sets the addon_license_types of this AddonMaster.


        :param addon_license_types: The addon_license_types of this AddonMaster.  # noqa: E501
        :type: list[AddonLicenseType]
        """

        self._addon_license_types = addon_license_types

    @property
    def sdk_plugin_master_id(self):
        """Gets the sdk_plugin_master_id of this AddonMaster.  # noqa: E501


        :return: The sdk_plugin_master_id of this AddonMaster.  # noqa: E501
        :rtype: int
        """
        return self._sdk_plugin_master_id

    @sdk_plugin_master_id.setter
    def sdk_plugin_master_id(self, sdk_plugin_master_id):
        """Sets the sdk_plugin_master_id of this AddonMaster.


        :param sdk_plugin_master_id: The sdk_plugin_master_id of this AddonMaster.  # noqa: E501
        :type: int
        """

        self._sdk_plugin_master_id = sdk_plugin_master_id

    @property
    def sdk_foreign_source_id(self):
        """Gets the sdk_foreign_source_id of this AddonMaster.  # noqa: E501


        :return: The sdk_foreign_source_id of this AddonMaster.  # noqa: E501
        :rtype: int
        """
        return self._sdk_foreign_source_id

    @sdk_foreign_source_id.setter
    def sdk_foreign_source_id(self, sdk_foreign_source_id):
        """Sets the sdk_foreign_source_id of this AddonMaster.


        :param sdk_foreign_source_id: The sdk_foreign_source_id of this AddonMaster.  # noqa: E501
        :type: int
        """

        self._sdk_foreign_source_id = sdk_foreign_source_id

    @property
    def foreign_plugin_master_id(self):
        """Gets the foreign_plugin_master_id of this AddonMaster.  # noqa: E501


        :return: The foreign_plugin_master_id of this AddonMaster.  # noqa: E501
        :rtype: int
        """
        return self._foreign_plugin_master_id

    @foreign_plugin_master_id.setter
    def foreign_plugin_master_id(self, foreign_plugin_master_id):
        """Sets the foreign_plugin_master_id of this AddonMaster.


        :param foreign_plugin_master_id: The foreign_plugin_master_id of this AddonMaster.  # noqa: E501
        :type: int
        """

        self._foreign_plugin_master_id = foreign_plugin_master_id

    @property
    def is_public(self):
        """Gets the is_public of this AddonMaster.  # noqa: E501


        :return: The is_public of this AddonMaster.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this AddonMaster.


        :param is_public: The is_public of this AddonMaster.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def name(self):
        """Gets the name of this AddonMaster.  # noqa: E501


        :return: The name of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddonMaster.


        :param name: The name of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def root_var(self):
        """Gets the root_var of this AddonMaster.  # noqa: E501


        :return: The root_var of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._root_var

    @root_var.setter
    def root_var(self, root_var):
        """Sets the root_var of this AddonMaster.


        :param root_var: The root_var of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._root_var = root_var

    @property
    def website_link(self):
        """Gets the website_link of this AddonMaster.  # noqa: E501


        :return: The website_link of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._website_link

    @website_link.setter
    def website_link(self, website_link):
        """Sets the website_link of this AddonMaster.


        :param website_link: The website_link of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._website_link = website_link

    @property
    def developer_mail(self):
        """Gets the developer_mail of this AddonMaster.  # noqa: E501


        :return: The developer_mail of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._developer_mail

    @developer_mail.setter
    def developer_mail(self, developer_mail):
        """Sets the developer_mail of this AddonMaster.


        :param developer_mail: The developer_mail of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._developer_mail = developer_mail

    @property
    def documentation_link(self):
        """Gets the documentation_link of this AddonMaster.  # noqa: E501


        :return: The documentation_link of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._documentation_link

    @documentation_link.setter
    def documentation_link(self, documentation_link):
        """Sets the documentation_link of this AddonMaster.


        :param documentation_link: The documentation_link of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._documentation_link = documentation_link

    @property
    def scope(self):
        """Gets the scope of this AddonMaster.  # noqa: E501


        :return: The scope of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AddonMaster.


        :param scope: The scope of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def active(self):
        """Gets the active of this AddonMaster.  # noqa: E501


        :return: The active of this AddonMaster.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AddonMaster.


        :param active: The active of this AddonMaster.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def image_url(self):
        """Gets the image_url of this AddonMaster.  # noqa: E501


        :return: The image_url of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this AddonMaster.


        :param image_url: The image_url of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def sdk_plugin_id(self):
        """Gets the sdk_plugin_id of this AddonMaster.  # noqa: E501


        :return: The sdk_plugin_id of this AddonMaster.  # noqa: E501
        :rtype: int
        """
        return self._sdk_plugin_id

    @sdk_plugin_id.setter
    def sdk_plugin_id(self, sdk_plugin_id):
        """Sets the sdk_plugin_id of this AddonMaster.


        :param sdk_plugin_id: The sdk_plugin_id of this AddonMaster.  # noqa: E501
        :type: int
        """

        self._sdk_plugin_id = sdk_plugin_id

    @property
    def status(self):
        """Gets the status of this AddonMaster.  # noqa: E501


        :return: The status of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AddonMaster.


        :param status: The status of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this AddonMaster.  # noqa: E501


        :return: The version of this AddonMaster.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AddonMaster.


        :param version: The version of this AddonMaster.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def details(self):
        """Gets the details of this AddonMaster.  # noqa: E501


        :return: The details of this AddonMaster.  # noqa: E501
        :rtype: Details
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AddonMaster.


        :param details: The details of this AddonMaster.  # noqa: E501
        :type: Details
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddonMaster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddonMaster):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddonMaster):
            return True

        return self.to_dict() != other.to_dict()
