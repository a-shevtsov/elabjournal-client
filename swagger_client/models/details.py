# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currentversion': 'str',
        'date_added': 'str',
        'developer': 'Developer',
        'documentation': 'str',
        'description': 'str',
        'price': 'Price',
        'rating': 'int',
        'currency': 'str'
    }

    attribute_map = {
        'currentversion': 'currentversion',
        'date_added': 'date_added',
        'developer': 'developer',
        'documentation': 'documentation',
        'description': 'description',
        'price': 'price',
        'rating': 'rating',
        'currency': 'currency'
    }

    def __init__(self, currentversion=None, date_added=None, developer=None, documentation=None, description=None, price=None, rating=None, currency=None, _configuration=None):  # noqa: E501
        """Details - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currentversion = None
        self._date_added = None
        self._developer = None
        self._documentation = None
        self._description = None
        self._price = None
        self._rating = None
        self._currency = None
        self.discriminator = None

        if currentversion is not None:
            self.currentversion = currentversion
        if date_added is not None:
            self.date_added = date_added
        if developer is not None:
            self.developer = developer
        if documentation is not None:
            self.documentation = documentation
        if description is not None:
            self.description = description
        if price is not None:
            self.price = price
        if rating is not None:
            self.rating = rating
        if currency is not None:
            self.currency = currency

    @property
    def currentversion(self):
        """Gets the currentversion of this Details.  # noqa: E501


        :return: The currentversion of this Details.  # noqa: E501
        :rtype: str
        """
        return self._currentversion

    @currentversion.setter
    def currentversion(self, currentversion):
        """Sets the currentversion of this Details.


        :param currentversion: The currentversion of this Details.  # noqa: E501
        :type: str
        """

        self._currentversion = currentversion

    @property
    def date_added(self):
        """Gets the date_added of this Details.  # noqa: E501


        :return: The date_added of this Details.  # noqa: E501
        :rtype: str
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this Details.


        :param date_added: The date_added of this Details.  # noqa: E501
        :type: str
        """

        self._date_added = date_added

    @property
    def developer(self):
        """Gets the developer of this Details.  # noqa: E501


        :return: The developer of this Details.  # noqa: E501
        :rtype: Developer
        """
        return self._developer

    @developer.setter
    def developer(self, developer):
        """Sets the developer of this Details.


        :param developer: The developer of this Details.  # noqa: E501
        :type: Developer
        """

        self._developer = developer

    @property
    def documentation(self):
        """Gets the documentation of this Details.  # noqa: E501


        :return: The documentation of this Details.  # noqa: E501
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this Details.


        :param documentation: The documentation of this Details.  # noqa: E501
        :type: str
        """

        self._documentation = documentation

    @property
    def description(self):
        """Gets the description of this Details.  # noqa: E501


        :return: The description of this Details.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Details.


        :param description: The description of this Details.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def price(self):
        """Gets the price of this Details.  # noqa: E501


        :return: The price of this Details.  # noqa: E501
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Details.


        :param price: The price of this Details.  # noqa: E501
        :type: Price
        """

        self._price = price

    @property
    def rating(self):
        """Gets the rating of this Details.  # noqa: E501


        :return: The rating of this Details.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Details.


        :param rating: The rating of this Details.  # noqa: E501
        :type: int
        """

        self._rating = rating

    @property
    def currency(self):
        """Gets the currency of this Details.  # noqa: E501


        :return: The currency of this Details.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Details.


        :param currency: The currency of this Details.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Details, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Details):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Details):
            return True

        return self.to_dict() != other.to_dict()
