# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SampleAmountNew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit': 'str',
        'display_unit': 'str',
        'full_amount_unit': 'str',
        'amount_delta': 'float',
        'amount': 'float',
        'full_amount': 'float',
        'threshold_alert_enabled': 'bool',
        'threshold_percentage': 'float',
        'threshold_action': 'str',
        'catalog_item_id': 'int'
    }

    attribute_map = {
        'unit': 'unit',
        'display_unit': 'displayUnit',
        'full_amount_unit': 'fullAmountUnit',
        'amount_delta': 'amount_delta',
        'amount': 'amount',
        'full_amount': 'fullAmount',
        'threshold_alert_enabled': 'thresholdAlertEnabled',
        'threshold_percentage': 'thresholdPercentage',
        'threshold_action': 'thresholdAction',
        'catalog_item_id': 'catalogItemID'
    }

    def __init__(self, unit=None, display_unit=None, full_amount_unit=None, amount_delta=None, amount=None, full_amount=None, threshold_alert_enabled=None, threshold_percentage=None, threshold_action=None, catalog_item_id=None, _configuration=None):  # noqa: E501
        """SampleAmountNew - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._unit = None
        self._display_unit = None
        self._full_amount_unit = None
        self._amount_delta = None
        self._amount = None
        self._full_amount = None
        self._threshold_alert_enabled = None
        self._threshold_percentage = None
        self._threshold_action = None
        self._catalog_item_id = None
        self.discriminator = None

        self.unit = unit
        self.display_unit = display_unit
        if full_amount_unit is not None:
            self.full_amount_unit = full_amount_unit
        if amount_delta is not None:
            self.amount_delta = amount_delta
        if amount is not None:
            self.amount = amount
        if full_amount is not None:
            self.full_amount = full_amount
        if threshold_alert_enabled is not None:
            self.threshold_alert_enabled = threshold_alert_enabled
        if threshold_percentage is not None:
            self.threshold_percentage = threshold_percentage
        if threshold_action is not None:
            self.threshold_action = threshold_action
        if catalog_item_id is not None:
            self.catalog_item_id = catalog_item_id

    @property
    def unit(self):
        """Gets the unit of this SampleAmountNew.  # noqa: E501


        :return: The unit of this SampleAmountNew.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SampleAmountNew.


        :param unit: The unit of this SampleAmountNew.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501
        allowed_values = ["Nothing", "Liter", "Gram", "Unit"]  # noqa: E501
        if (self._configuration.client_side_validation and
                unit not in allowed_values):
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def display_unit(self):
        """Gets the display_unit of this SampleAmountNew.  # noqa: E501


        :return: The display_unit of this SampleAmountNew.  # noqa: E501
        :rtype: str
        """
        return self._display_unit

    @display_unit.setter
    def display_unit(self, display_unit):
        """Sets the display_unit of this SampleAmountNew.


        :param display_unit: The display_unit of this SampleAmountNew.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_unit is None:
            raise ValueError("Invalid value for `display_unit`, must not be `None`")  # noqa: E501
        allowed_values = ["Nothing", "Liter", "MilliLiter", "MicroLiter", "KiloGram", "Gram", "MilliGram", "MicroGram", "Unit"]  # noqa: E501
        if (self._configuration.client_side_validation and
                display_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `display_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(display_unit, allowed_values)
            )

        self._display_unit = display_unit

    @property
    def full_amount_unit(self):
        """Gets the full_amount_unit of this SampleAmountNew.  # noqa: E501


        :return: The full_amount_unit of this SampleAmountNew.  # noqa: E501
        :rtype: str
        """
        return self._full_amount_unit

    @full_amount_unit.setter
    def full_amount_unit(self, full_amount_unit):
        """Sets the full_amount_unit of this SampleAmountNew.


        :param full_amount_unit: The full_amount_unit of this SampleAmountNew.  # noqa: E501
        :type: str
        """
        allowed_values = ["Nothing", "Liter", "MilliLiter", "MicroLiter", "KiloGram", "Gram", "MilliGram", "MicroGram", "Unit"]  # noqa: E501
        if (self._configuration.client_side_validation and
                full_amount_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `full_amount_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(full_amount_unit, allowed_values)
            )

        self._full_amount_unit = full_amount_unit

    @property
    def amount_delta(self):
        """Gets the amount_delta of this SampleAmountNew.  # noqa: E501


        :return: The amount_delta of this SampleAmountNew.  # noqa: E501
        :rtype: float
        """
        return self._amount_delta

    @amount_delta.setter
    def amount_delta(self, amount_delta):
        """Sets the amount_delta of this SampleAmountNew.


        :param amount_delta: The amount_delta of this SampleAmountNew.  # noqa: E501
        :type: float
        """

        self._amount_delta = amount_delta

    @property
    def amount(self):
        """Gets the amount of this SampleAmountNew.  # noqa: E501


        :return: The amount of this SampleAmountNew.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SampleAmountNew.


        :param amount: The amount of this SampleAmountNew.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                amount is not None and amount < 0):  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def full_amount(self):
        """Gets the full_amount of this SampleAmountNew.  # noqa: E501


        :return: The full_amount of this SampleAmountNew.  # noqa: E501
        :rtype: float
        """
        return self._full_amount

    @full_amount.setter
    def full_amount(self, full_amount):
        """Sets the full_amount of this SampleAmountNew.


        :param full_amount: The full_amount of this SampleAmountNew.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                full_amount is not None and full_amount < 0):  # noqa: E501
            raise ValueError("Invalid value for `full_amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._full_amount = full_amount

    @property
    def threshold_alert_enabled(self):
        """Gets the threshold_alert_enabled of this SampleAmountNew.  # noqa: E501


        :return: The threshold_alert_enabled of this SampleAmountNew.  # noqa: E501
        :rtype: bool
        """
        return self._threshold_alert_enabled

    @threshold_alert_enabled.setter
    def threshold_alert_enabled(self, threshold_alert_enabled):
        """Sets the threshold_alert_enabled of this SampleAmountNew.


        :param threshold_alert_enabled: The threshold_alert_enabled of this SampleAmountNew.  # noqa: E501
        :type: bool
        """

        self._threshold_alert_enabled = threshold_alert_enabled

    @property
    def threshold_percentage(self):
        """Gets the threshold_percentage of this SampleAmountNew.  # noqa: E501


        :return: The threshold_percentage of this SampleAmountNew.  # noqa: E501
        :rtype: float
        """
        return self._threshold_percentage

    @threshold_percentage.setter
    def threshold_percentage(self, threshold_percentage):
        """Sets the threshold_percentage of this SampleAmountNew.


        :param threshold_percentage: The threshold_percentage of this SampleAmountNew.  # noqa: E501
        :type: float
        """
        if (self._configuration.client_side_validation and
                threshold_percentage is not None and threshold_percentage > 100):  # noqa: E501
            raise ValueError("Invalid value for `threshold_percentage`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                threshold_percentage is not None and threshold_percentage < 0):  # noqa: E501
            raise ValueError("Invalid value for `threshold_percentage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._threshold_percentage = threshold_percentage

    @property
    def threshold_action(self):
        """Gets the threshold_action of this SampleAmountNew.  # noqa: E501


        :return: The threshold_action of this SampleAmountNew.  # noqa: E501
        :rtype: str
        """
        return self._threshold_action

    @threshold_action.setter
    def threshold_action(self, threshold_action):
        """Sets the threshold_action of this SampleAmountNew.


        :param threshold_action: The threshold_action of this SampleAmountNew.  # noqa: E501
        :type: str
        """
        allowed_values = ["Nothing", "Notify", "Order", "NotifyAndOrder"]  # noqa: E501
        if (self._configuration.client_side_validation and
                threshold_action not in allowed_values):
            raise ValueError(
                "Invalid value for `threshold_action` ({0}), must be one of {1}"  # noqa: E501
                .format(threshold_action, allowed_values)
            )

        self._threshold_action = threshold_action

    @property
    def catalog_item_id(self):
        """Gets the catalog_item_id of this SampleAmountNew.  # noqa: E501


        :return: The catalog_item_id of this SampleAmountNew.  # noqa: E501
        :rtype: int
        """
        return self._catalog_item_id

    @catalog_item_id.setter
    def catalog_item_id(self, catalog_item_id):
        """Sets the catalog_item_id of this SampleAmountNew.


        :param catalog_item_id: The catalog_item_id of this SampleAmountNew.  # noqa: E501
        :type: int
        """

        self._catalog_item_id = catalog_item_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SampleAmountNew, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleAmountNew):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SampleAmountNew):
            return True

        return self.to_dict() != other.to_dict()
