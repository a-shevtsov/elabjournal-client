# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class License(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'license_id': 'int',
        'product_id': 'int',
        'seats': 'int',
        'product_license': 'str',
        'scope': 'str',
        'domain': 'str',
        'valid_from': 'datetime',
        'valid_to': 'datetime',
        'issued': 'datetime',
        'trial': 'bool'
    }

    attribute_map = {
        'license_id': 'licenseID',
        'product_id': 'productID',
        'seats': 'seats',
        'product_license': 'productLicense',
        'scope': 'scope',
        'domain': 'domain',
        'valid_from': 'valid_from',
        'valid_to': 'valid_to',
        'issued': 'issued',
        'trial': 'trial'
    }

    def __init__(self, license_id=None, product_id=None, seats=None, product_license=None, scope=None, domain=None, valid_from=None, valid_to=None, issued=None, trial=None, _configuration=None):  # noqa: E501
        """License - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._license_id = None
        self._product_id = None
        self._seats = None
        self._product_license = None
        self._scope = None
        self._domain = None
        self._valid_from = None
        self._valid_to = None
        self._issued = None
        self._trial = None
        self.discriminator = None

        if license_id is not None:
            self.license_id = license_id
        if product_id is not None:
            self.product_id = product_id
        if seats is not None:
            self.seats = seats
        if product_license is not None:
            self.product_license = product_license
        if scope is not None:
            self.scope = scope
        if domain is not None:
            self.domain = domain
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to
        if issued is not None:
            self.issued = issued
        if trial is not None:
            self.trial = trial

    @property
    def license_id(self):
        """Gets the license_id of this License.  # noqa: E501


        :return: The license_id of this License.  # noqa: E501
        :rtype: int
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this License.


        :param license_id: The license_id of this License.  # noqa: E501
        :type: int
        """

        self._license_id = license_id

    @property
    def product_id(self):
        """Gets the product_id of this License.  # noqa: E501


        :return: The product_id of this License.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this License.


        :param product_id: The product_id of this License.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def seats(self):
        """Gets the seats of this License.  # noqa: E501


        :return: The seats of this License.  # noqa: E501
        :rtype: int
        """
        return self._seats

    @seats.setter
    def seats(self, seats):
        """Sets the seats of this License.


        :param seats: The seats of this License.  # noqa: E501
        :type: int
        """

        self._seats = seats

    @property
    def product_license(self):
        """Gets the product_license of this License.  # noqa: E501


        :return: The product_license of this License.  # noqa: E501
        :rtype: str
        """
        return self._product_license

    @product_license.setter
    def product_license(self, product_license):
        """Sets the product_license of this License.


        :param product_license: The product_license of this License.  # noqa: E501
        :type: str
        """
        allowed_values = ["OWA", "MARVINJS", "CLONEASSIST", "CHEMASSIST"]  # noqa: E501
        if (self._configuration.client_side_validation and
                product_license not in allowed_values):
            raise ValueError(
                "Invalid value for `product_license` ({0}), must be one of {1}"  # noqa: E501
                .format(product_license, allowed_values)
            )

        self._product_license = product_license

    @property
    def scope(self):
        """Gets the scope of this License.  # noqa: E501


        :return: The scope of this License.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this License.


        :param scope: The scope of this License.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACADEMIC", "COMMERCIAL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                scope not in allowed_values):
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"  # noqa: E501
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def domain(self):
        """Gets the domain of this License.  # noqa: E501


        :return: The domain of this License.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this License.


        :param domain: The domain of this License.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def valid_from(self):
        """Gets the valid_from of this License.  # noqa: E501


        :return: The valid_from of this License.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this License.


        :param valid_from: The valid_from of this License.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this License.  # noqa: E501


        :return: The valid_to of this License.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this License.


        :param valid_to: The valid_to of this License.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    @property
    def issued(self):
        """Gets the issued of this License.  # noqa: E501


        :return: The issued of this License.  # noqa: E501
        :rtype: datetime
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """Sets the issued of this License.


        :param issued: The issued of this License.  # noqa: E501
        :type: datetime
        """

        self._issued = issued

    @property
    def trial(self):
        """Gets the trial of this License.  # noqa: E501


        :return: The trial of this License.  # noqa: E501
        :rtype: bool
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this License.


        :param trial: The trial of this License.  # noqa: E501
        :type: bool
        """

        self._trial = trial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(License, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, License):
            return True

        return self.to_dict() != other.to_dict()
