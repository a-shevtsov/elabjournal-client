# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class StorageLayerHierarchy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_reservation': 'StorageLayerReservationMinimal',
        'active_validation': 'StorageValidation',
        'storage_layers': 'list[StorageLayerHierarchy]',
        'storage_layer_id': 'int',
        'user_id': 'int',
        'created': 'datetime',
        'storage_id': 'int',
        'barcode': 'str',
        'is_grid': 'bool',
        'statistics': 'StorageStatistics',
        'parent_storage_layer_id': 'int',
        'position': 'int',
        'transposed': 'bool',
        'dimension': 'StorageDimension',
        'storage_layer_definition_id': 'int',
        'name': 'str',
        'icon': 'str',
        'max_size': 'int',
        'alt_id': 'str'
    }

    attribute_map = {
        'active_reservation': 'activeReservation',
        'active_validation': 'activeValidation',
        'storage_layers': 'storageLayers',
        'storage_layer_id': 'storageLayerID',
        'user_id': 'userID',
        'created': 'created',
        'storage_id': 'storageID',
        'barcode': 'barcode',
        'is_grid': 'isGrid',
        'statistics': 'statistics',
        'parent_storage_layer_id': 'parentStorageLayerID',
        'position': 'position',
        'transposed': 'transposed',
        'dimension': 'dimension',
        'storage_layer_definition_id': 'storageLayerDefinitionID',
        'name': 'name',
        'icon': 'icon',
        'max_size': 'maxSize',
        'alt_id': 'altID'
    }

    def __init__(self, active_reservation=None, active_validation=None, storage_layers=None, storage_layer_id=None, user_id=None, created=None, storage_id=None, barcode=None, is_grid=None, statistics=None, parent_storage_layer_id=None, position=None, transposed=None, dimension=None, storage_layer_definition_id=None, name=None, icon=None, max_size=None, alt_id=None, _configuration=None):  # noqa: E501
        """StorageLayerHierarchy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active_reservation = None
        self._active_validation = None
        self._storage_layers = None
        self._storage_layer_id = None
        self._user_id = None
        self._created = None
        self._storage_id = None
        self._barcode = None
        self._is_grid = None
        self._statistics = None
        self._parent_storage_layer_id = None
        self._position = None
        self._transposed = None
        self._dimension = None
        self._storage_layer_definition_id = None
        self._name = None
        self._icon = None
        self._max_size = None
        self._alt_id = None
        self.discriminator = None

        if active_reservation is not None:
            self.active_reservation = active_reservation
        if active_validation is not None:
            self.active_validation = active_validation
        if storage_layers is not None:
            self.storage_layers = storage_layers
        if storage_layer_id is not None:
            self.storage_layer_id = storage_layer_id
        if user_id is not None:
            self.user_id = user_id
        if created is not None:
            self.created = created
        if storage_id is not None:
            self.storage_id = storage_id
        if barcode is not None:
            self.barcode = barcode
        if is_grid is not None:
            self.is_grid = is_grid
        if statistics is not None:
            self.statistics = statistics
        if parent_storage_layer_id is not None:
            self.parent_storage_layer_id = parent_storage_layer_id
        if position is not None:
            self.position = position
        if transposed is not None:
            self.transposed = transposed
        if dimension is not None:
            self.dimension = dimension
        self.storage_layer_definition_id = storage_layer_definition_id
        if name is not None:
            self.name = name
        if icon is not None:
            self.icon = icon
        if max_size is not None:
            self.max_size = max_size
        if alt_id is not None:
            self.alt_id = alt_id

    @property
    def active_reservation(self):
        """Gets the active_reservation of this StorageLayerHierarchy.  # noqa: E501


        :return: The active_reservation of this StorageLayerHierarchy.  # noqa: E501
        :rtype: StorageLayerReservationMinimal
        """
        return self._active_reservation

    @active_reservation.setter
    def active_reservation(self, active_reservation):
        """Sets the active_reservation of this StorageLayerHierarchy.


        :param active_reservation: The active_reservation of this StorageLayerHierarchy.  # noqa: E501
        :type: StorageLayerReservationMinimal
        """

        self._active_reservation = active_reservation

    @property
    def active_validation(self):
        """Gets the active_validation of this StorageLayerHierarchy.  # noqa: E501


        :return: The active_validation of this StorageLayerHierarchy.  # noqa: E501
        :rtype: StorageValidation
        """
        return self._active_validation

    @active_validation.setter
    def active_validation(self, active_validation):
        """Sets the active_validation of this StorageLayerHierarchy.


        :param active_validation: The active_validation of this StorageLayerHierarchy.  # noqa: E501
        :type: StorageValidation
        """

        self._active_validation = active_validation

    @property
    def storage_layers(self):
        """Gets the storage_layers of this StorageLayerHierarchy.  # noqa: E501


        :return: The storage_layers of this StorageLayerHierarchy.  # noqa: E501
        :rtype: list[StorageLayerHierarchy]
        """
        return self._storage_layers

    @storage_layers.setter
    def storage_layers(self, storage_layers):
        """Sets the storage_layers of this StorageLayerHierarchy.


        :param storage_layers: The storage_layers of this StorageLayerHierarchy.  # noqa: E501
        :type: list[StorageLayerHierarchy]
        """

        self._storage_layers = storage_layers

    @property
    def storage_layer_id(self):
        """Gets the storage_layer_id of this StorageLayerHierarchy.  # noqa: E501


        :return: The storage_layer_id of this StorageLayerHierarchy.  # noqa: E501
        :rtype: int
        """
        return self._storage_layer_id

    @storage_layer_id.setter
    def storage_layer_id(self, storage_layer_id):
        """Sets the storage_layer_id of this StorageLayerHierarchy.


        :param storage_layer_id: The storage_layer_id of this StorageLayerHierarchy.  # noqa: E501
        :type: int
        """

        self._storage_layer_id = storage_layer_id

    @property
    def user_id(self):
        """Gets the user_id of this StorageLayerHierarchy.  # noqa: E501


        :return: The user_id of this StorageLayerHierarchy.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this StorageLayerHierarchy.


        :param user_id: The user_id of this StorageLayerHierarchy.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def created(self):
        """Gets the created of this StorageLayerHierarchy.  # noqa: E501


        :return: The created of this StorageLayerHierarchy.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this StorageLayerHierarchy.


        :param created: The created of this StorageLayerHierarchy.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def storage_id(self):
        """Gets the storage_id of this StorageLayerHierarchy.  # noqa: E501


        :return: The storage_id of this StorageLayerHierarchy.  # noqa: E501
        :rtype: int
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this StorageLayerHierarchy.


        :param storage_id: The storage_id of this StorageLayerHierarchy.  # noqa: E501
        :type: int
        """

        self._storage_id = storage_id

    @property
    def barcode(self):
        """Gets the barcode of this StorageLayerHierarchy.  # noqa: E501


        :return: The barcode of this StorageLayerHierarchy.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this StorageLayerHierarchy.


        :param barcode: The barcode of this StorageLayerHierarchy.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def is_grid(self):
        """Gets the is_grid of this StorageLayerHierarchy.  # noqa: E501


        :return: The is_grid of this StorageLayerHierarchy.  # noqa: E501
        :rtype: bool
        """
        return self._is_grid

    @is_grid.setter
    def is_grid(self, is_grid):
        """Sets the is_grid of this StorageLayerHierarchy.


        :param is_grid: The is_grid of this StorageLayerHierarchy.  # noqa: E501
        :type: bool
        """

        self._is_grid = is_grid

    @property
    def statistics(self):
        """Gets the statistics of this StorageLayerHierarchy.  # noqa: E501


        :return: The statistics of this StorageLayerHierarchy.  # noqa: E501
        :rtype: StorageStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this StorageLayerHierarchy.


        :param statistics: The statistics of this StorageLayerHierarchy.  # noqa: E501
        :type: StorageStatistics
        """

        self._statistics = statistics

    @property
    def parent_storage_layer_id(self):
        """Gets the parent_storage_layer_id of this StorageLayerHierarchy.  # noqa: E501


        :return: The parent_storage_layer_id of this StorageLayerHierarchy.  # noqa: E501
        :rtype: int
        """
        return self._parent_storage_layer_id

    @parent_storage_layer_id.setter
    def parent_storage_layer_id(self, parent_storage_layer_id):
        """Sets the parent_storage_layer_id of this StorageLayerHierarchy.


        :param parent_storage_layer_id: The parent_storage_layer_id of this StorageLayerHierarchy.  # noqa: E501
        :type: int
        """

        self._parent_storage_layer_id = parent_storage_layer_id

    @property
    def position(self):
        """Gets the position of this StorageLayerHierarchy.  # noqa: E501


        :return: The position of this StorageLayerHierarchy.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StorageLayerHierarchy.


        :param position: The position of this StorageLayerHierarchy.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def transposed(self):
        """Gets the transposed of this StorageLayerHierarchy.  # noqa: E501


        :return: The transposed of this StorageLayerHierarchy.  # noqa: E501
        :rtype: bool
        """
        return self._transposed

    @transposed.setter
    def transposed(self, transposed):
        """Sets the transposed of this StorageLayerHierarchy.


        :param transposed: The transposed of this StorageLayerHierarchy.  # noqa: E501
        :type: bool
        """

        self._transposed = transposed

    @property
    def dimension(self):
        """Gets the dimension of this StorageLayerHierarchy.  # noqa: E501


        :return: The dimension of this StorageLayerHierarchy.  # noqa: E501
        :rtype: StorageDimension
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this StorageLayerHierarchy.


        :param dimension: The dimension of this StorageLayerHierarchy.  # noqa: E501
        :type: StorageDimension
        """

        self._dimension = dimension

    @property
    def storage_layer_definition_id(self):
        """Gets the storage_layer_definition_id of this StorageLayerHierarchy.  # noqa: E501


        :return: The storage_layer_definition_id of this StorageLayerHierarchy.  # noqa: E501
        :rtype: int
        """
        return self._storage_layer_definition_id

    @storage_layer_definition_id.setter
    def storage_layer_definition_id(self, storage_layer_definition_id):
        """Sets the storage_layer_definition_id of this StorageLayerHierarchy.


        :param storage_layer_definition_id: The storage_layer_definition_id of this StorageLayerHierarchy.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and storage_layer_definition_id is None:
            raise ValueError("Invalid value for `storage_layer_definition_id`, must not be `None`")  # noqa: E501

        self._storage_layer_definition_id = storage_layer_definition_id

    @property
    def name(self):
        """Gets the name of this StorageLayerHierarchy.  # noqa: E501


        :return: The name of this StorageLayerHierarchy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageLayerHierarchy.


        :param name: The name of this StorageLayerHierarchy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this StorageLayerHierarchy.  # noqa: E501


        :return: The icon of this StorageLayerHierarchy.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this StorageLayerHierarchy.


        :param icon: The icon of this StorageLayerHierarchy.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def max_size(self):
        """Gets the max_size of this StorageLayerHierarchy.  # noqa: E501


        :return: The max_size of this StorageLayerHierarchy.  # noqa: E501
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this StorageLayerHierarchy.


        :param max_size: The max_size of this StorageLayerHierarchy.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                max_size is not None and max_size > 32767):  # noqa: E501
            raise ValueError("Invalid value for `max_size`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self._configuration.client_side_validation and
                max_size is not None and max_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_size = max_size

    @property
    def alt_id(self):
        """Gets the alt_id of this StorageLayerHierarchy.  # noqa: E501


        :return: The alt_id of this StorageLayerHierarchy.  # noqa: E501
        :rtype: str
        """
        return self._alt_id

    @alt_id.setter
    def alt_id(self, alt_id):
        """Sets the alt_id of this StorageLayerHierarchy.


        :param alt_id: The alt_id of this StorageLayerHierarchy.  # noqa: E501
        :type: str
        """

        self._alt_id = alt_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageLayerHierarchy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageLayerHierarchy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageLayerHierarchy):
            return True

        return self.to_dict() != other.to_dict()
