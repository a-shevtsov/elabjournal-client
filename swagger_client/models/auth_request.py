# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'token_type': 'str',
        'device_string': 'str',
        'domain': 'str'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'token_type': 'tokenType',
        'device_string': 'deviceString',
        'domain': 'domain'
    }

    def __init__(self, username=None, password=None, token_type=None, device_string=None, domain=None, _configuration=None):  # noqa: E501
        """AuthRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username = None
        self._password = None
        self._token_type = None
        self._device_string = None
        self._domain = None
        self.discriminator = None

        self.username = username
        if password is not None:
            self.password = password
        if token_type is not None:
            self.token_type = token_type
        if device_string is not None:
            self.device_string = device_string
        if domain is not None:
            self.domain = domain

    @property
    def username(self):
        """Gets the username of this AuthRequest.  # noqa: E501


        :return: The username of this AuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AuthRequest.


        :param username: The username of this AuthRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this AuthRequest.  # noqa: E501


        :return: The password of this AuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AuthRequest.


        :param password: The password of this AuthRequest.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def token_type(self):
        """Gets the token_type of this AuthRequest.  # noqa: E501


        :return: The token_type of this AuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AuthRequest.


        :param token_type: The token_type of this AuthRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["APPS", "INVENTORY", "JOURNALUPLOAD", "PLUGINS", "DOCUMENTATION"]  # noqa: E501
        if (self._configuration.client_side_validation and
                token_type not in allowed_values):
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"  # noqa: E501
                .format(token_type, allowed_values)
            )

        self._token_type = token_type

    @property
    def device_string(self):
        """Gets the device_string of this AuthRequest.  # noqa: E501


        :return: The device_string of this AuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._device_string

    @device_string.setter
    def device_string(self, device_string):
        """Sets the device_string of this AuthRequest.


        :param device_string: The device_string of this AuthRequest.  # noqa: E501
        :type: str
        """

        self._device_string = device_string

    @property
    def domain(self):
        """Gets the domain of this AuthRequest.  # noqa: E501


        :return: The domain of this AuthRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AuthRequest.


        :param domain: The domain of this AuthRequest.  # noqa: E501
        :type: str
        """

        self._domain = domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthRequest):
            return True

        return self.to_dict() != other.to_dict()
