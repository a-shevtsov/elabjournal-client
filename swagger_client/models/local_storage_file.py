# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LocalStorageFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'storage_url': 'str',
        'storage_directory': 'str',
        'experiment_file_id': 'int',
        'parent_experiment_file_id': 'int',
        'stored_file_name': 'str',
        'real_file_name': 'str',
        'stored': 'datetime',
        'sha256_hash': 'str',
        'certificate_hash': 'str',
        'user_id': 'int',
        'user_name': 'str',
        'user_full_name': 'str',
        'group_id': 'int',
        'group_name': 'str',
        'exp_journal_id': 'int',
        'section_name': 'str',
        'experiment_id': 'int',
        'experiment_name': 'str',
        'study_id': 'int',
        'study_name': 'str',
        'project_id': 'int',
        'project_name': 'str'
    }

    attribute_map = {
        'storage_url': 'storageURL',
        'storage_directory': 'storageDirectory',
        'experiment_file_id': 'experimentFileID',
        'parent_experiment_file_id': 'parentExperimentFileID',
        'stored_file_name': 'storedFileName',
        'real_file_name': 'realFileName',
        'stored': 'stored',
        'sha256_hash': 'sha256Hash',
        'certificate_hash': 'certificateHash',
        'user_id': 'userID',
        'user_name': 'userName',
        'user_full_name': 'userFullName',
        'group_id': 'groupID',
        'group_name': 'groupName',
        'exp_journal_id': 'expJournalID',
        'section_name': 'sectionName',
        'experiment_id': 'experimentID',
        'experiment_name': 'experimentName',
        'study_id': 'studyID',
        'study_name': 'studyName',
        'project_id': 'projectID',
        'project_name': 'projectName'
    }

    def __init__(self, storage_url=None, storage_directory=None, experiment_file_id=None, parent_experiment_file_id=None, stored_file_name=None, real_file_name=None, stored=None, sha256_hash=None, certificate_hash=None, user_id=None, user_name=None, user_full_name=None, group_id=None, group_name=None, exp_journal_id=None, section_name=None, experiment_id=None, experiment_name=None, study_id=None, study_name=None, project_id=None, project_name=None, _configuration=None):  # noqa: E501
        """LocalStorageFile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._storage_url = None
        self._storage_directory = None
        self._experiment_file_id = None
        self._parent_experiment_file_id = None
        self._stored_file_name = None
        self._real_file_name = None
        self._stored = None
        self._sha256_hash = None
        self._certificate_hash = None
        self._user_id = None
        self._user_name = None
        self._user_full_name = None
        self._group_id = None
        self._group_name = None
        self._exp_journal_id = None
        self._section_name = None
        self._experiment_id = None
        self._experiment_name = None
        self._study_id = None
        self._study_name = None
        self._project_id = None
        self._project_name = None
        self.discriminator = None

        if storage_url is not None:
            self.storage_url = storage_url
        if storage_directory is not None:
            self.storage_directory = storage_directory
        if experiment_file_id is not None:
            self.experiment_file_id = experiment_file_id
        if parent_experiment_file_id is not None:
            self.parent_experiment_file_id = parent_experiment_file_id
        if stored_file_name is not None:
            self.stored_file_name = stored_file_name
        if real_file_name is not None:
            self.real_file_name = real_file_name
        if stored is not None:
            self.stored = stored
        if sha256_hash is not None:
            self.sha256_hash = sha256_hash
        if certificate_hash is not None:
            self.certificate_hash = certificate_hash
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if user_full_name is not None:
            self.user_full_name = user_full_name
        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        if exp_journal_id is not None:
            self.exp_journal_id = exp_journal_id
        if section_name is not None:
            self.section_name = section_name
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if experiment_name is not None:
            self.experiment_name = experiment_name
        if study_id is not None:
            self.study_id = study_id
        if study_name is not None:
            self.study_name = study_name
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name

    @property
    def storage_url(self):
        """Gets the storage_url of this LocalStorageFile.  # noqa: E501


        :return: The storage_url of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._storage_url

    @storage_url.setter
    def storage_url(self, storage_url):
        """Sets the storage_url of this LocalStorageFile.


        :param storage_url: The storage_url of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._storage_url = storage_url

    @property
    def storage_directory(self):
        """Gets the storage_directory of this LocalStorageFile.  # noqa: E501


        :return: The storage_directory of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._storage_directory

    @storage_directory.setter
    def storage_directory(self, storage_directory):
        """Sets the storage_directory of this LocalStorageFile.


        :param storage_directory: The storage_directory of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._storage_directory = storage_directory

    @property
    def experiment_file_id(self):
        """Gets the experiment_file_id of this LocalStorageFile.  # noqa: E501


        :return: The experiment_file_id of this LocalStorageFile.  # noqa: E501
        :rtype: int
        """
        return self._experiment_file_id

    @experiment_file_id.setter
    def experiment_file_id(self, experiment_file_id):
        """Sets the experiment_file_id of this LocalStorageFile.


        :param experiment_file_id: The experiment_file_id of this LocalStorageFile.  # noqa: E501
        :type: int
        """

        self._experiment_file_id = experiment_file_id

    @property
    def parent_experiment_file_id(self):
        """Gets the parent_experiment_file_id of this LocalStorageFile.  # noqa: E501


        :return: The parent_experiment_file_id of this LocalStorageFile.  # noqa: E501
        :rtype: int
        """
        return self._parent_experiment_file_id

    @parent_experiment_file_id.setter
    def parent_experiment_file_id(self, parent_experiment_file_id):
        """Sets the parent_experiment_file_id of this LocalStorageFile.


        :param parent_experiment_file_id: The parent_experiment_file_id of this LocalStorageFile.  # noqa: E501
        :type: int
        """

        self._parent_experiment_file_id = parent_experiment_file_id

    @property
    def stored_file_name(self):
        """Gets the stored_file_name of this LocalStorageFile.  # noqa: E501


        :return: The stored_file_name of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._stored_file_name

    @stored_file_name.setter
    def stored_file_name(self, stored_file_name):
        """Sets the stored_file_name of this LocalStorageFile.


        :param stored_file_name: The stored_file_name of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._stored_file_name = stored_file_name

    @property
    def real_file_name(self):
        """Gets the real_file_name of this LocalStorageFile.  # noqa: E501


        :return: The real_file_name of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._real_file_name

    @real_file_name.setter
    def real_file_name(self, real_file_name):
        """Sets the real_file_name of this LocalStorageFile.


        :param real_file_name: The real_file_name of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._real_file_name = real_file_name

    @property
    def stored(self):
        """Gets the stored of this LocalStorageFile.  # noqa: E501


        :return: The stored of this LocalStorageFile.  # noqa: E501
        :rtype: datetime
        """
        return self._stored

    @stored.setter
    def stored(self, stored):
        """Sets the stored of this LocalStorageFile.


        :param stored: The stored of this LocalStorageFile.  # noqa: E501
        :type: datetime
        """

        self._stored = stored

    @property
    def sha256_hash(self):
        """Gets the sha256_hash of this LocalStorageFile.  # noqa: E501


        :return: The sha256_hash of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._sha256_hash

    @sha256_hash.setter
    def sha256_hash(self, sha256_hash):
        """Sets the sha256_hash of this LocalStorageFile.


        :param sha256_hash: The sha256_hash of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._sha256_hash = sha256_hash

    @property
    def certificate_hash(self):
        """Gets the certificate_hash of this LocalStorageFile.  # noqa: E501


        :return: The certificate_hash of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._certificate_hash

    @certificate_hash.setter
    def certificate_hash(self, certificate_hash):
        """Sets the certificate_hash of this LocalStorageFile.


        :param certificate_hash: The certificate_hash of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._certificate_hash = certificate_hash

    @property
    def user_id(self):
        """Gets the user_id of this LocalStorageFile.  # noqa: E501


        :return: The user_id of this LocalStorageFile.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LocalStorageFile.


        :param user_id: The user_id of this LocalStorageFile.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this LocalStorageFile.  # noqa: E501


        :return: The user_name of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this LocalStorageFile.


        :param user_name: The user_name of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_full_name(self):
        """Gets the user_full_name of this LocalStorageFile.  # noqa: E501


        :return: The user_full_name of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._user_full_name

    @user_full_name.setter
    def user_full_name(self, user_full_name):
        """Sets the user_full_name of this LocalStorageFile.


        :param user_full_name: The user_full_name of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._user_full_name = user_full_name

    @property
    def group_id(self):
        """Gets the group_id of this LocalStorageFile.  # noqa: E501


        :return: The group_id of this LocalStorageFile.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this LocalStorageFile.


        :param group_id: The group_id of this LocalStorageFile.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this LocalStorageFile.  # noqa: E501


        :return: The group_name of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this LocalStorageFile.


        :param group_name: The group_name of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def exp_journal_id(self):
        """Gets the exp_journal_id of this LocalStorageFile.  # noqa: E501


        :return: The exp_journal_id of this LocalStorageFile.  # noqa: E501
        :rtype: int
        """
        return self._exp_journal_id

    @exp_journal_id.setter
    def exp_journal_id(self, exp_journal_id):
        """Sets the exp_journal_id of this LocalStorageFile.


        :param exp_journal_id: The exp_journal_id of this LocalStorageFile.  # noqa: E501
        :type: int
        """

        self._exp_journal_id = exp_journal_id

    @property
    def section_name(self):
        """Gets the section_name of this LocalStorageFile.  # noqa: E501


        :return: The section_name of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._section_name

    @section_name.setter
    def section_name(self, section_name):
        """Sets the section_name of this LocalStorageFile.


        :param section_name: The section_name of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._section_name = section_name

    @property
    def experiment_id(self):
        """Gets the experiment_id of this LocalStorageFile.  # noqa: E501


        :return: The experiment_id of this LocalStorageFile.  # noqa: E501
        :rtype: int
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this LocalStorageFile.


        :param experiment_id: The experiment_id of this LocalStorageFile.  # noqa: E501
        :type: int
        """

        self._experiment_id = experiment_id

    @property
    def experiment_name(self):
        """Gets the experiment_name of this LocalStorageFile.  # noqa: E501


        :return: The experiment_name of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """Sets the experiment_name of this LocalStorageFile.


        :param experiment_name: The experiment_name of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._experiment_name = experiment_name

    @property
    def study_id(self):
        """Gets the study_id of this LocalStorageFile.  # noqa: E501


        :return: The study_id of this LocalStorageFile.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this LocalStorageFile.


        :param study_id: The study_id of this LocalStorageFile.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def study_name(self):
        """Gets the study_name of this LocalStorageFile.  # noqa: E501


        :return: The study_name of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._study_name

    @study_name.setter
    def study_name(self, study_name):
        """Sets the study_name of this LocalStorageFile.


        :param study_name: The study_name of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._study_name = study_name

    @property
    def project_id(self):
        """Gets the project_id of this LocalStorageFile.  # noqa: E501


        :return: The project_id of this LocalStorageFile.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this LocalStorageFile.


        :param project_id: The project_id of this LocalStorageFile.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this LocalStorageFile.  # noqa: E501


        :return: The project_name of this LocalStorageFile.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this LocalStorageFile.


        :param project_name: The project_name of this LocalStorageFile.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocalStorageFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalStorageFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocalStorageFile):
            return True

        return self.to_dict() != other.to_dict()
