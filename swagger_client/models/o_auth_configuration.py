# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OAuthConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'o_auth_config_id': 'int',
        'description': 'str',
        'sdk_plugin_id': 'int',
        'created': 'datetime',
        'authorization_uri': 'str',
        'token_request_uri': 'str',
        'refresh_uri': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'method': 'str',
        'needs_nonce': 'bool',
        'scope': 'str',
        'is_public': 'bool',
        'is_encoded': 'bool',
        'reference': 'str'
    }

    attribute_map = {
        'o_auth_config_id': 'oAuthConfigID',
        'description': 'description',
        'sdk_plugin_id': 'sdkPluginID',
        'created': 'created',
        'authorization_uri': 'authorizationURI',
        'token_request_uri': 'tokenRequestURI',
        'refresh_uri': 'refreshURI',
        'client_id': 'clientID',
        'client_secret': 'clientSecret',
        'method': 'method',
        'needs_nonce': 'needsNonce',
        'scope': 'scope',
        'is_public': 'isPublic',
        'is_encoded': 'isEncoded',
        'reference': 'reference'
    }

    def __init__(self, o_auth_config_id=None, description=None, sdk_plugin_id=None, created=None, authorization_uri=None, token_request_uri=None, refresh_uri=None, client_id=None, client_secret=None, method=None, needs_nonce=None, scope=None, is_public=None, is_encoded=None, reference=None, _configuration=None):  # noqa: E501
        """OAuthConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._o_auth_config_id = None
        self._description = None
        self._sdk_plugin_id = None
        self._created = None
        self._authorization_uri = None
        self._token_request_uri = None
        self._refresh_uri = None
        self._client_id = None
        self._client_secret = None
        self._method = None
        self._needs_nonce = None
        self._scope = None
        self._is_public = None
        self._is_encoded = None
        self._reference = None
        self.discriminator = None

        if o_auth_config_id is not None:
            self.o_auth_config_id = o_auth_config_id
        if description is not None:
            self.description = description
        if sdk_plugin_id is not None:
            self.sdk_plugin_id = sdk_plugin_id
        if created is not None:
            self.created = created
        if authorization_uri is not None:
            self.authorization_uri = authorization_uri
        if token_request_uri is not None:
            self.token_request_uri = token_request_uri
        if refresh_uri is not None:
            self.refresh_uri = refresh_uri
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if method is not None:
            self.method = method
        if needs_nonce is not None:
            self.needs_nonce = needs_nonce
        if scope is not None:
            self.scope = scope
        if is_public is not None:
            self.is_public = is_public
        if is_encoded is not None:
            self.is_encoded = is_encoded
        if reference is not None:
            self.reference = reference

    @property
    def o_auth_config_id(self):
        """Gets the o_auth_config_id of this OAuthConfiguration.  # noqa: E501


        :return: The o_auth_config_id of this OAuthConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._o_auth_config_id

    @o_auth_config_id.setter
    def o_auth_config_id(self, o_auth_config_id):
        """Sets the o_auth_config_id of this OAuthConfiguration.


        :param o_auth_config_id: The o_auth_config_id of this OAuthConfiguration.  # noqa: E501
        :type: int
        """

        self._o_auth_config_id = o_auth_config_id

    @property
    def description(self):
        """Gets the description of this OAuthConfiguration.  # noqa: E501


        :return: The description of this OAuthConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OAuthConfiguration.


        :param description: The description of this OAuthConfiguration.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def sdk_plugin_id(self):
        """Gets the sdk_plugin_id of this OAuthConfiguration.  # noqa: E501


        :return: The sdk_plugin_id of this OAuthConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._sdk_plugin_id

    @sdk_plugin_id.setter
    def sdk_plugin_id(self, sdk_plugin_id):
        """Sets the sdk_plugin_id of this OAuthConfiguration.


        :param sdk_plugin_id: The sdk_plugin_id of this OAuthConfiguration.  # noqa: E501
        :type: int
        """

        self._sdk_plugin_id = sdk_plugin_id

    @property
    def created(self):
        """Gets the created of this OAuthConfiguration.  # noqa: E501


        :return: The created of this OAuthConfiguration.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OAuthConfiguration.


        :param created: The created of this OAuthConfiguration.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def authorization_uri(self):
        """Gets the authorization_uri of this OAuthConfiguration.  # noqa: E501


        :return: The authorization_uri of this OAuthConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._authorization_uri

    @authorization_uri.setter
    def authorization_uri(self, authorization_uri):
        """Sets the authorization_uri of this OAuthConfiguration.


        :param authorization_uri: The authorization_uri of this OAuthConfiguration.  # noqa: E501
        :type: str
        """

        self._authorization_uri = authorization_uri

    @property
    def token_request_uri(self):
        """Gets the token_request_uri of this OAuthConfiguration.  # noqa: E501


        :return: The token_request_uri of this OAuthConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._token_request_uri

    @token_request_uri.setter
    def token_request_uri(self, token_request_uri):
        """Sets the token_request_uri of this OAuthConfiguration.


        :param token_request_uri: The token_request_uri of this OAuthConfiguration.  # noqa: E501
        :type: str
        """

        self._token_request_uri = token_request_uri

    @property
    def refresh_uri(self):
        """Gets the refresh_uri of this OAuthConfiguration.  # noqa: E501


        :return: The refresh_uri of this OAuthConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._refresh_uri

    @refresh_uri.setter
    def refresh_uri(self, refresh_uri):
        """Sets the refresh_uri of this OAuthConfiguration.


        :param refresh_uri: The refresh_uri of this OAuthConfiguration.  # noqa: E501
        :type: str
        """

        self._refresh_uri = refresh_uri

    @property
    def client_id(self):
        """Gets the client_id of this OAuthConfiguration.  # noqa: E501


        :return: The client_id of this OAuthConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuthConfiguration.


        :param client_id: The client_id of this OAuthConfiguration.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuthConfiguration.  # noqa: E501


        :return: The client_secret of this OAuthConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuthConfiguration.


        :param client_secret: The client_secret of this OAuthConfiguration.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def method(self):
        """Gets the method of this OAuthConfiguration.  # noqa: E501


        :return: The method of this OAuthConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this OAuthConfiguration.


        :param method: The method of this OAuthConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["BODY", "BASIC_AUTH"]  # noqa: E501
        if (self._configuration.client_side_validation and
                method not in allowed_values):
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def needs_nonce(self):
        """Gets the needs_nonce of this OAuthConfiguration.  # noqa: E501


        :return: The needs_nonce of this OAuthConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._needs_nonce

    @needs_nonce.setter
    def needs_nonce(self, needs_nonce):
        """Sets the needs_nonce of this OAuthConfiguration.


        :param needs_nonce: The needs_nonce of this OAuthConfiguration.  # noqa: E501
        :type: bool
        """

        self._needs_nonce = needs_nonce

    @property
    def scope(self):
        """Gets the scope of this OAuthConfiguration.  # noqa: E501


        :return: The scope of this OAuthConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OAuthConfiguration.


        :param scope: The scope of this OAuthConfiguration.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def is_public(self):
        """Gets the is_public of this OAuthConfiguration.  # noqa: E501


        :return: The is_public of this OAuthConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this OAuthConfiguration.


        :param is_public: The is_public of this OAuthConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_encoded(self):
        """Gets the is_encoded of this OAuthConfiguration.  # noqa: E501


        :return: The is_encoded of this OAuthConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_encoded

    @is_encoded.setter
    def is_encoded(self, is_encoded):
        """Sets the is_encoded of this OAuthConfiguration.


        :param is_encoded: The is_encoded of this OAuthConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_encoded = is_encoded

    @property
    def reference(self):
        """Gets the reference of this OAuthConfiguration.  # noqa: E501


        :return: The reference of this OAuthConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this OAuthConfiguration.


        :param reference: The reference of this OAuthConfiguration.  # noqa: E501
        :type: str
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OAuthConfiguration):
            return True

        return self.to_dict() != other.to_dict()
