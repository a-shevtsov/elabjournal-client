# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import elabjournal_client
from elabjournal_client.api.storage_and_equipment_api import StorageAndEquipmentApi  # noqa: E501
from elabjournal_client.rest import ApiException


class TestStorageAndEquipmentApi(unittest.TestCase):
    """StorageAndEquipmentApi unit test stubs"""

    def setUp(self):
        self.api = elabjournal_client.api.storage_and_equipment_api.StorageAndEquipmentApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_assignment_create_assignment(self):
        """Test case for assignment_create_assignment

        Create compartment assignment.  # noqa: E501
        """
        pass

    def test_assignment_delete_assignment(self):
        """Test case for assignment_delete_assignment

        Delete a compartment assignment.  # noqa: E501
        """
        pass

    def test_assignment_get_assignment_by_storage_layer_id(self):
        """Test case for assignment_get_assignment_by_storage_layer_id

        Get active assignment of a compartment.  # noqa: E501
        """
        pass

    def test_assignment_update_assignment(self):
        """Test case for assignment_update_assignment

        Update a compartment assignment.  # noqa: E501
        """
        pass

    def test_booking_create_booking(self):
        """Test case for booking_create_booking

        Create an equipment booking.  # noqa: E501
        """
        pass

    def test_booking_delete_booking(self):
        """Test case for booking_delete_booking

        Delete an equipment booking.  # noqa: E501
        """
        pass

    def test_booking_get_bookings(self):
        """Test case for booking_get_bookings

        Get equipment bookings.  # noqa: E501
        """
        pass

    def test_booking_update_booking(self):
        """Test case for booking_update_booking

        Update an equipment booking.  # noqa: E501
        """
        pass

    def test_storage_bulk_delete_storage_meta(self):
        """Test case for storage_bulk_delete_storage_meta

        Delete multiple equipment or storage units meta fields  # noqa: E501
        """
        pass

    def test_storage_bulk_patch_storage_meta(self):
        """Test case for storage_bulk_patch_storage_meta

        Update multiple equipment or storage units meta fields  # noqa: E501
        """
        pass

    def test_storage_create_bulk_storage_meta(self):
        """Test case for storage_create_bulk_storage_meta

        Create multiple new equipment or storage unit meta fields  # noqa: E501
        """
        pass

    def test_storage_create_child_storage_layer(self):
        """Test case for storage_create_child_storage_layer

        Create a new compartment within an existing compartment  # noqa: E501
        """
        pass

    def test_storage_create_child_storage_layers(self):
        """Test case for storage_create_child_storage_layers

        Create multiple new compartments within an existing compartment  # noqa: E501
        """
        pass

    def test_storage_create_storage(self):
        """Test case for storage_create_storage

        Create a new storage unit/equipment based on the specified type  # noqa: E501
        """
        pass

    def test_storage_create_storage_layer_definition(self):
        """Test case for storage_create_storage_layer_definition

        Create a new compartment definition for a storage unit. This is a template for creating one or more compartments.  # noqa: E501
        """
        pass

    def test_storage_create_storage_layer_reservation(self):
        """Test case for storage_create_storage_layer_reservation

        Create a new storage/equipment compartment reservation  # noqa: E501
        """
        pass

    def test_storage_create_storage_manager(self):
        """Test case for storage_create_storage_manager

        Add a userID as manager to a storage unit/equipment  # noqa: E501
        """
        pass

    def test_storage_create_storage_managers(self):
        """Test case for storage_create_storage_managers

        Add multiple managers by userID to a storage unit/equipment  # noqa: E501
        """
        pass

    def test_storage_create_storage_meta(self):
        """Test case for storage_create_storage_meta

        Create a new equipment or storage unit meta field  # noqa: E501
        """
        pass

    def test_storage_create_storage_type(self):
        """Test case for storage_create_storage_type

        Create a new equipment type  # noqa: E501
        """
        pass

    def test_storage_create_storage_validation(self):
        """Test case for storage_create_storage_validation

        Create a new storage unit or equipment validation  # noqa: E501
        """
        pass

    def test_storage_delete_storage_layer(self):
        """Test case for storage_delete_storage_layer

        Delete a storageLayer by storageLayerID  # noqa: E501
        """
        pass

    def test_storage_delete_storage_layer_reservation(self):
        """Test case for storage_delete_storage_layer_reservation

        Delete a storage/equipment compartment reservation  # noqa: E501
        """
        pass

    def test_storage_delete_storage_manager(self):
        """Test case for storage_delete_storage_manager

        Remove a manager from a storage unit/equipment by userID  # noqa: E501
        """
        pass

    def test_storage_delete_storage_managers(self):
        """Test case for storage_delete_storage_managers

        Remove multiple managers from a storage unit/equipment by userID  # noqa: E501
        """
        pass

    def test_storage_delete_storage_meta(self):
        """Test case for storage_delete_storage_meta

        Delete an equipment meta field  # noqa: E501
        """
        pass

    def test_storage_delete_storage_validation(self):
        """Test case for storage_delete_storage_validation

        Delete an equipment validation  # noqa: E501
        """
        pass

    def test_storage_find_storage_free_location(self):
        """Test case for storage_find_storage_free_location

        Find a free sample location within a storage unit  # noqa: E501
        """
        pass

    def test_storage_find_storage_layer_free_location(self):
        """Test case for storage_find_storage_layer_free_location

        Find a free sample location in or below a storage layer  # noqa: E501
        """
        pass

    def test_storage_get_child_layers_by_id(self):
        """Test case for storage_get_child_layers_by_id

        Get the storage compartments of a compartment  # noqa: E501
        """
        pass

    def test_storage_get_child_layers_for_ids(self):
        """Test case for storage_get_child_layers_for_ids

        Get the storage compartments of several parent compartments  # noqa: E501
        """
        pass

    def test_storage_get_empty_compartment_in_layer(self):
        """Test case for storage_get_empty_compartment_in_layer

        Find an empty compartment in a storage layer  # noqa: E501
        """
        pass

    def test_storage_get_equipment_logs(self):
        """Test case for storage_get_equipment_logs

        Get full log of an equipment  # noqa: E501
        """
        pass

    def test_storage_get_sample_logs(self):
        """Test case for storage_get_sample_logs

        Get a storage unit's sample logs  # noqa: E501
        """
        pass

    def test_storage_get_storage(self):
        """Test case for storage_get_storage

        Get storage units/equipment  # noqa: E501
        """
        pass

    def test_storage_get_storage_by_id(self):
        """Test case for storage_get_storage_by_id

        Get a storage unit/equipment by id  # noqa: E501
        """
        pass

    def test_storage_get_storage_layer_ancestry(self):
        """Test case for storage_get_storage_layer_ancestry

        Get the storage compartment ancestry of a compartment  # noqa: E501
        """
        pass

    def test_storage_get_storage_layer_by_id(self):
        """Test case for storage_get_storage_layer_by_id

        Get a storage unit/equipment compartment by id  # noqa: E501
        """
        pass

    def test_storage_get_storage_layer_definition_by_id(self):
        """Test case for storage_get_storage_layer_definition_by_id

        Get a compartment definition by id.  # noqa: E501
        """
        pass

    def test_storage_get_storage_layer_definitions(self):
        """Test case for storage_get_storage_layer_definitions

        Get all compartment definitions for a storage unit.  # noqa: E501
        """
        pass

    def test_storage_get_storage_layer_logs(self):
        """Test case for storage_get_storage_layer_logs

        Get a storage compartment's logs  # noqa: E501
        """
        pass

    def test_storage_get_storage_layer_reservation(self):
        """Test case for storage_get_storage_layer_reservation

        Get a storage/equipment compartment reservation by id  # noqa: E501
        """
        pass

    def test_storage_get_storage_layer_reservations(self):
        """Test case for storage_get_storage_layer_reservations

        Get all reservations of a storage/equipment compartment  # noqa: E501
        """
        pass

    def test_storage_get_storage_layer_samples(self):
        """Test case for storage_get_storage_layer_samples

        Get a storage layer's samples  # noqa: E501
        """
        pass

    def test_storage_get_storage_layer_usage(self):
        """Test case for storage_get_storage_layer_usage

        Get usage information on a specific storagelayer...  # noqa: E501
        """
        pass

    def test_storage_get_storage_layers(self):
        """Test case for storage_get_storage_layers

        Get storage unit/equipment compartments  # noqa: E501
        """
        pass

    def test_storage_get_storage_layers_for_barcodes(self):
        """Test case for storage_get_storage_layers_for_barcodes

        Get a storage unit/equipment compartment by its barcode  # noqa: E501
        """
        pass

    def test_storage_get_storage_logs(self):
        """Test case for storage_get_storage_logs

        Get a storage unit's full logs  # noqa: E501
        """
        pass

    def test_storage_get_storage_managers(self):
        """Test case for storage_get_storage_managers

        Get all of a storage unit or equipment managers  # noqa: E501
        """
        pass

    def test_storage_get_storage_meta(self):
        """Test case for storage_get_storage_meta

        Get an equipment or storage unit meta field by id  # noqa: E501
        """
        pass

    def test_storage_get_storage_metas(self):
        """Test case for storage_get_storage_metas

        Get all of a equipment or storage unit meta fields  # noqa: E501
        """
        pass

    def test_storage_get_storage_report(self):
        """Test case for storage_get_storage_report

        Get an equipment reservations report  # noqa: E501
        """
        pass

    def test_storage_get_storage_samples(self):
        """Test case for storage_get_storage_samples

        Get a storage unit's samples  # noqa: E501
        """
        pass

    def test_storage_get_storage_statistics(self):
        """Test case for storage_get_storage_statistics

        Get statistics for a storage unit  # noqa: E501
        """
        pass

    def test_storage_get_storage_type_by_id(self):
        """Test case for storage_get_storage_type_by_id

        Get a storage unit/equipment type by id  # noqa: E501
        """
        pass

    def test_storage_get_storage_types(self):
        """Test case for storage_get_storage_types

        Get all storage unit/equipment types  # noqa: E501
        """
        pass

    def test_storage_get_storage_validation(self):
        """Test case for storage_get_storage_validation

        Get an equipment validation by id  # noqa: E501
        """
        pass

    def test_storage_get_storage_validations(self):
        """Test case for storage_get_storage_validations

        Get all of an equipment's validations  # noqa: E501
        """
        pass

    def test_storage_move_storage_layer_to_layer(self):
        """Test case for storage_move_storage_layer_to_layer

        Move a storage compartment into another compartment  # noqa: E501
        """
        pass

    def test_storage_patch_storage(self):
        """Test case for storage_patch_storage

        Update properties of a storage unit or equipment   # noqa: E501
        """
        pass

    def test_storage_patch_storage_layer(self):
        """Test case for storage_patch_storage_layer

        Update a storage compartment's properties  # noqa: E501
        """
        pass

    def test_storage_patch_storage_layer_reservation(self):
        """Test case for storage_patch_storage_layer_reservation

        Update a storage/equipment compartment reservation  # noqa: E501
        """
        pass

    def test_storage_patch_storage_meta(self):
        """Test case for storage_patch_storage_meta

        Update an equipment or storage unit meta field properties  # noqa: E501
        """
        pass

    def test_storage_patch_storage_validation(self):
        """Test case for storage_patch_storage_validation

        Update an equipment validation properties  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
