# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class FieldOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'dict(str, str)',
        'paging': 'FieldPaging',
        'expand': 'FieldExpansion',
        'sort': 'FieldSort',
        'view_id': 'int',
        'view_columns': 'list[str]'
    }

    attribute_map = {
        'filters': 'Filters',
        'paging': 'Paging',
        'expand': 'Expand',
        'sort': 'Sort',
        'view_id': 'ViewID',
        'view_columns': 'ViewColumns'
    }

    def __init__(self, filters=None, paging=None, expand=None, sort=None, view_id=None, view_columns=None, _configuration=None):  # noqa: E501
        """FieldOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filters = None
        self._paging = None
        self._expand = None
        self._sort = None
        self._view_id = None
        self._view_columns = None
        self.discriminator = None

        if filters is not None:
            self.filters = filters
        if paging is not None:
            self.paging = paging
        if expand is not None:
            self.expand = expand
        if sort is not None:
            self.sort = sort
        if view_id is not None:
            self.view_id = view_id
        if view_columns is not None:
            self.view_columns = view_columns

    @property
    def filters(self):
        """Gets the filters of this FieldOptions.  # noqa: E501


        :return: The filters of this FieldOptions.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this FieldOptions.


        :param filters: The filters of this FieldOptions.  # noqa: E501
        :type: dict(str, str)
        """

        self._filters = filters

    @property
    def paging(self):
        """Gets the paging of this FieldOptions.  # noqa: E501


        :return: The paging of this FieldOptions.  # noqa: E501
        :rtype: FieldPaging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this FieldOptions.


        :param paging: The paging of this FieldOptions.  # noqa: E501
        :type: FieldPaging
        """

        self._paging = paging

    @property
    def expand(self):
        """Gets the expand of this FieldOptions.  # noqa: E501


        :return: The expand of this FieldOptions.  # noqa: E501
        :rtype: FieldExpansion
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this FieldOptions.


        :param expand: The expand of this FieldOptions.  # noqa: E501
        :type: FieldExpansion
        """

        self._expand = expand

    @property
    def sort(self):
        """Gets the sort of this FieldOptions.  # noqa: E501


        :return: The sort of this FieldOptions.  # noqa: E501
        :rtype: FieldSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this FieldOptions.


        :param sort: The sort of this FieldOptions.  # noqa: E501
        :type: FieldSort
        """

        self._sort = sort

    @property
    def view_id(self):
        """Gets the view_id of this FieldOptions.  # noqa: E501


        :return: The view_id of this FieldOptions.  # noqa: E501
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this FieldOptions.


        :param view_id: The view_id of this FieldOptions.  # noqa: E501
        :type: int
        """

        self._view_id = view_id

    @property
    def view_columns(self):
        """Gets the view_columns of this FieldOptions.  # noqa: E501


        :return: The view_columns of this FieldOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._view_columns

    @view_columns.setter
    def view_columns(self, view_columns):
        """Sets the view_columns of this FieldOptions.


        :param view_columns: The view_columns of this FieldOptions.  # noqa: E501
        :type: list[str]
        """

        self._view_columns = view_columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldOptions):
            return True

        return self.to_dict() != other.to_dict()
