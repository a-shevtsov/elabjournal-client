# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class ExperimentTemplateLarge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creator_id': 'int',
        'creator_name': 'str',
        'exp_template_label_id': 'int',
        'experiment_id': 'int',
        'name': 'str',
        'created': 'datetime'
    }

    attribute_map = {
        'creator_id': 'creatorID',
        'creator_name': 'creatorName',
        'exp_template_label_id': 'expTemplateLabelID',
        'experiment_id': 'experimentID',
        'name': 'name',
        'created': 'created'
    }

    def __init__(self, creator_id=None, creator_name=None, exp_template_label_id=None, experiment_id=None, name=None, created=None, _configuration=None):  # noqa: E501
        """ExperimentTemplateLarge - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creator_id = None
        self._creator_name = None
        self._exp_template_label_id = None
        self._experiment_id = None
        self._name = None
        self._created = None
        self.discriminator = None

        if creator_id is not None:
            self.creator_id = creator_id
        if creator_name is not None:
            self.creator_name = creator_name
        if exp_template_label_id is not None:
            self.exp_template_label_id = exp_template_label_id
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if name is not None:
            self.name = name
        if created is not None:
            self.created = created

    @property
    def creator_id(self):
        """Gets the creator_id of this ExperimentTemplateLarge.  # noqa: E501


        :return: The creator_id of this ExperimentTemplateLarge.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ExperimentTemplateLarge.


        :param creator_id: The creator_id of this ExperimentTemplateLarge.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def creator_name(self):
        """Gets the creator_name of this ExperimentTemplateLarge.  # noqa: E501


        :return: The creator_name of this ExperimentTemplateLarge.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this ExperimentTemplateLarge.


        :param creator_name: The creator_name of this ExperimentTemplateLarge.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def exp_template_label_id(self):
        """Gets the exp_template_label_id of this ExperimentTemplateLarge.  # noqa: E501


        :return: The exp_template_label_id of this ExperimentTemplateLarge.  # noqa: E501
        :rtype: int
        """
        return self._exp_template_label_id

    @exp_template_label_id.setter
    def exp_template_label_id(self, exp_template_label_id):
        """Sets the exp_template_label_id of this ExperimentTemplateLarge.


        :param exp_template_label_id: The exp_template_label_id of this ExperimentTemplateLarge.  # noqa: E501
        :type: int
        """

        self._exp_template_label_id = exp_template_label_id

    @property
    def experiment_id(self):
        """Gets the experiment_id of this ExperimentTemplateLarge.  # noqa: E501


        :return: The experiment_id of this ExperimentTemplateLarge.  # noqa: E501
        :rtype: int
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this ExperimentTemplateLarge.


        :param experiment_id: The experiment_id of this ExperimentTemplateLarge.  # noqa: E501
        :type: int
        """

        self._experiment_id = experiment_id

    @property
    def name(self):
        """Gets the name of this ExperimentTemplateLarge.  # noqa: E501


        :return: The name of this ExperimentTemplateLarge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExperimentTemplateLarge.


        :param name: The name of this ExperimentTemplateLarge.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created(self):
        """Gets the created of this ExperimentTemplateLarge.  # noqa: E501


        :return: The created of this ExperimentTemplateLarge.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ExperimentTemplateLarge.


        :param created: The created of this ExperimentTemplateLarge.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExperimentTemplateLarge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentTemplateLarge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExperimentTemplateLarge):
            return True

        return self.to_dict() != other.to_dict()
