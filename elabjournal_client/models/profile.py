# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'profile_id': 'int',
        'user_id': 'int',
        'user': 'User',
        'title': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'initials': 'str',
        'headline': 'str',
        'location': 'str',
        'timezone': 'str',
        'summary': 'str',
        'specialties': 'str',
        'picture_url': 'str',
        'current_position': 'str',
        'last_position': 'str',
        'education': 'str',
        'institute_department': 'str',
        'institute_address': 'str',
        'institute_phone': 'str',
        'institute_fax': 'str',
        'website': 'str',
        'internal_position': 'str',
        'email_updates': 'bool'
    }

    attribute_map = {
        'profile_id': 'profileID',
        'user_id': 'userID',
        'user': 'user',
        'title': 'title',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'initials': 'initials',
        'headline': 'headline',
        'location': 'location',
        'timezone': 'timezone',
        'summary': 'summary',
        'specialties': 'specialties',
        'picture_url': 'pictureURL',
        'current_position': 'currentPosition',
        'last_position': 'lastPosition',
        'education': 'education',
        'institute_department': 'instituteDepartment',
        'institute_address': 'instituteAddress',
        'institute_phone': 'institutePhone',
        'institute_fax': 'instituteFax',
        'website': 'website',
        'internal_position': 'internalPosition',
        'email_updates': 'emailUpdates'
    }

    def __init__(self, profile_id=None, user_id=None, user=None, title=None, first_name=None, last_name=None, initials=None, headline=None, location=None, timezone=None, summary=None, specialties=None, picture_url=None, current_position=None, last_position=None, education=None, institute_department=None, institute_address=None, institute_phone=None, institute_fax=None, website=None, internal_position=None, email_updates=None, _configuration=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._profile_id = None
        self._user_id = None
        self._user = None
        self._title = None
        self._first_name = None
        self._last_name = None
        self._initials = None
        self._headline = None
        self._location = None
        self._timezone = None
        self._summary = None
        self._specialties = None
        self._picture_url = None
        self._current_position = None
        self._last_position = None
        self._education = None
        self._institute_department = None
        self._institute_address = None
        self._institute_phone = None
        self._institute_fax = None
        self._website = None
        self._internal_position = None
        self._email_updates = None
        self.discriminator = None

        if profile_id is not None:
            self.profile_id = profile_id
        if user_id is not None:
            self.user_id = user_id
        if user is not None:
            self.user = user
        if title is not None:
            self.title = title
        self.first_name = first_name
        self.last_name = last_name
        if initials is not None:
            self.initials = initials
        if headline is not None:
            self.headline = headline
        if location is not None:
            self.location = location
        if timezone is not None:
            self.timezone = timezone
        if summary is not None:
            self.summary = summary
        if specialties is not None:
            self.specialties = specialties
        if picture_url is not None:
            self.picture_url = picture_url
        if current_position is not None:
            self.current_position = current_position
        if last_position is not None:
            self.last_position = last_position
        if education is not None:
            self.education = education
        if institute_department is not None:
            self.institute_department = institute_department
        if institute_address is not None:
            self.institute_address = institute_address
        if institute_phone is not None:
            self.institute_phone = institute_phone
        if institute_fax is not None:
            self.institute_fax = institute_fax
        if website is not None:
            self.website = website
        if internal_position is not None:
            self.internal_position = internal_position
        if email_updates is not None:
            self.email_updates = email_updates

    @property
    def profile_id(self):
        """Gets the profile_id of this Profile.  # noqa: E501


        :return: The profile_id of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this Profile.


        :param profile_id: The profile_id of this Profile.  # noqa: E501
        :type: int
        """

        self._profile_id = profile_id

    @property
    def user_id(self):
        """Gets the user_id of this Profile.  # noqa: E501


        :return: The user_id of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Profile.


        :param user_id: The user_id of this Profile.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user(self):
        """Gets the user of this Profile.  # noqa: E501


        :return: The user of this Profile.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Profile.


        :param user: The user of this Profile.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def title(self):
        """Gets the title of this Profile.  # noqa: E501


        :return: The title of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Profile.


        :param title: The title of this Profile.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def first_name(self):
        """Gets the first_name of this Profile.  # noqa: E501


        :return: The first_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Profile.


        :param first_name: The first_name of this Profile.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Profile.  # noqa: E501


        :return: The last_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Profile.


        :param last_name: The last_name of this Profile.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def initials(self):
        """Gets the initials of this Profile.  # noqa: E501


        :return: The initials of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this Profile.


        :param initials: The initials of this Profile.  # noqa: E501
        :type: str
        """

        self._initials = initials

    @property
    def headline(self):
        """Gets the headline of this Profile.  # noqa: E501


        :return: The headline of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this Profile.


        :param headline: The headline of this Profile.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def location(self):
        """Gets the location of this Profile.  # noqa: E501


        :return: The location of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Profile.


        :param location: The location of this Profile.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def timezone(self):
        """Gets the timezone of this Profile.  # noqa: E501


        :return: The timezone of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Profile.


        :param timezone: The timezone of this Profile.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def summary(self):
        """Gets the summary of this Profile.  # noqa: E501


        :return: The summary of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Profile.


        :param summary: The summary of this Profile.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def specialties(self):
        """Gets the specialties of this Profile.  # noqa: E501


        :return: The specialties of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._specialties

    @specialties.setter
    def specialties(self, specialties):
        """Sets the specialties of this Profile.


        :param specialties: The specialties of this Profile.  # noqa: E501
        :type: str
        """

        self._specialties = specialties

    @property
    def picture_url(self):
        """Gets the picture_url of this Profile.  # noqa: E501


        :return: The picture_url of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this Profile.


        :param picture_url: The picture_url of this Profile.  # noqa: E501
        :type: str
        """

        self._picture_url = picture_url

    @property
    def current_position(self):
        """Gets the current_position of this Profile.  # noqa: E501


        :return: The current_position of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._current_position

    @current_position.setter
    def current_position(self, current_position):
        """Sets the current_position of this Profile.


        :param current_position: The current_position of this Profile.  # noqa: E501
        :type: str
        """

        self._current_position = current_position

    @property
    def last_position(self):
        """Gets the last_position of this Profile.  # noqa: E501


        :return: The last_position of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._last_position

    @last_position.setter
    def last_position(self, last_position):
        """Sets the last_position of this Profile.


        :param last_position: The last_position of this Profile.  # noqa: E501
        :type: str
        """

        self._last_position = last_position

    @property
    def education(self):
        """Gets the education of this Profile.  # noqa: E501


        :return: The education of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._education

    @education.setter
    def education(self, education):
        """Sets the education of this Profile.


        :param education: The education of this Profile.  # noqa: E501
        :type: str
        """

        self._education = education

    @property
    def institute_department(self):
        """Gets the institute_department of this Profile.  # noqa: E501


        :return: The institute_department of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._institute_department

    @institute_department.setter
    def institute_department(self, institute_department):
        """Sets the institute_department of this Profile.


        :param institute_department: The institute_department of this Profile.  # noqa: E501
        :type: str
        """

        self._institute_department = institute_department

    @property
    def institute_address(self):
        """Gets the institute_address of this Profile.  # noqa: E501


        :return: The institute_address of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._institute_address

    @institute_address.setter
    def institute_address(self, institute_address):
        """Sets the institute_address of this Profile.


        :param institute_address: The institute_address of this Profile.  # noqa: E501
        :type: str
        """

        self._institute_address = institute_address

    @property
    def institute_phone(self):
        """Gets the institute_phone of this Profile.  # noqa: E501


        :return: The institute_phone of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._institute_phone

    @institute_phone.setter
    def institute_phone(self, institute_phone):
        """Sets the institute_phone of this Profile.


        :param institute_phone: The institute_phone of this Profile.  # noqa: E501
        :type: str
        """

        self._institute_phone = institute_phone

    @property
    def institute_fax(self):
        """Gets the institute_fax of this Profile.  # noqa: E501


        :return: The institute_fax of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._institute_fax

    @institute_fax.setter
    def institute_fax(self, institute_fax):
        """Sets the institute_fax of this Profile.


        :param institute_fax: The institute_fax of this Profile.  # noqa: E501
        :type: str
        """

        self._institute_fax = institute_fax

    @property
    def website(self):
        """Gets the website of this Profile.  # noqa: E501


        :return: The website of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Profile.


        :param website: The website of this Profile.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def internal_position(self):
        """Gets the internal_position of this Profile.  # noqa: E501


        :return: The internal_position of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._internal_position

    @internal_position.setter
    def internal_position(self, internal_position):
        """Sets the internal_position of this Profile.


        :param internal_position: The internal_position of this Profile.  # noqa: E501
        :type: str
        """

        self._internal_position = internal_position

    @property
    def email_updates(self):
        """Gets the email_updates of this Profile.  # noqa: E501


        :return: The email_updates of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._email_updates

    @email_updates.setter
    def email_updates(self, email_updates):
        """Sets the email_updates of this Profile.


        :param email_updates: The email_updates of this Profile.  # noqa: E501
        :type: bool
        """

        self._email_updates = email_updates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Profile):
            return True

        return self.to_dict() != other.to_dict()
