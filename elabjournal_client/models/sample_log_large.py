# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class SampleLogLarge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_name': 'str',
        'alt_id': 'str',
        'changed_by': 'str',
        'storage_id': 'int',
        'storage_layer_id': 'int',
        'barcode': 'str',
        'archived': 'bool',
        'sample_log_id': 'int',
        'user_id': 'int',
        'changed': 'datetime',
        'sample_id': 'int',
        'sample_meta_id': 'int',
        'sample_meta_key': 'str',
        'action': 'str',
        'old_value': 'str',
        'new_value': 'str'
    }

    attribute_map = {
        'sample_name': 'sampleName',
        'alt_id': 'altID',
        'changed_by': 'changedBy',
        'storage_id': 'storageID',
        'storage_layer_id': 'storageLayerID',
        'barcode': 'barcode',
        'archived': 'archived',
        'sample_log_id': 'sampleLogID',
        'user_id': 'userID',
        'changed': 'changed',
        'sample_id': 'sampleID',
        'sample_meta_id': 'sampleMetaID',
        'sample_meta_key': 'sampleMetaKey',
        'action': 'action',
        'old_value': 'oldValue',
        'new_value': 'newValue'
    }

    def __init__(self, sample_name=None, alt_id=None, changed_by=None, storage_id=None, storage_layer_id=None, barcode=None, archived=None, sample_log_id=None, user_id=None, changed=None, sample_id=None, sample_meta_id=None, sample_meta_key=None, action=None, old_value=None, new_value=None, _configuration=None):  # noqa: E501
        """SampleLogLarge - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sample_name = None
        self._alt_id = None
        self._changed_by = None
        self._storage_id = None
        self._storage_layer_id = None
        self._barcode = None
        self._archived = None
        self._sample_log_id = None
        self._user_id = None
        self._changed = None
        self._sample_id = None
        self._sample_meta_id = None
        self._sample_meta_key = None
        self._action = None
        self._old_value = None
        self._new_value = None
        self.discriminator = None

        if sample_name is not None:
            self.sample_name = sample_name
        if alt_id is not None:
            self.alt_id = alt_id
        if changed_by is not None:
            self.changed_by = changed_by
        if storage_id is not None:
            self.storage_id = storage_id
        if storage_layer_id is not None:
            self.storage_layer_id = storage_layer_id
        if barcode is not None:
            self.barcode = barcode
        if archived is not None:
            self.archived = archived
        if sample_log_id is not None:
            self.sample_log_id = sample_log_id
        if user_id is not None:
            self.user_id = user_id
        if changed is not None:
            self.changed = changed
        self.sample_id = sample_id
        if sample_meta_id is not None:
            self.sample_meta_id = sample_meta_id
        self.sample_meta_key = sample_meta_key
        self.action = action
        if old_value is not None:
            self.old_value = old_value
        if new_value is not None:
            self.new_value = new_value

    @property
    def sample_name(self):
        """Gets the sample_name of this SampleLogLarge.  # noqa: E501


        :return: The sample_name of this SampleLogLarge.  # noqa: E501
        :rtype: str
        """
        return self._sample_name

    @sample_name.setter
    def sample_name(self, sample_name):
        """Sets the sample_name of this SampleLogLarge.


        :param sample_name: The sample_name of this SampleLogLarge.  # noqa: E501
        :type: str
        """

        self._sample_name = sample_name

    @property
    def alt_id(self):
        """Gets the alt_id of this SampleLogLarge.  # noqa: E501


        :return: The alt_id of this SampleLogLarge.  # noqa: E501
        :rtype: str
        """
        return self._alt_id

    @alt_id.setter
    def alt_id(self, alt_id):
        """Sets the alt_id of this SampleLogLarge.


        :param alt_id: The alt_id of this SampleLogLarge.  # noqa: E501
        :type: str
        """

        self._alt_id = alt_id

    @property
    def changed_by(self):
        """Gets the changed_by of this SampleLogLarge.  # noqa: E501


        :return: The changed_by of this SampleLogLarge.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this SampleLogLarge.


        :param changed_by: The changed_by of this SampleLogLarge.  # noqa: E501
        :type: str
        """

        self._changed_by = changed_by

    @property
    def storage_id(self):
        """Gets the storage_id of this SampleLogLarge.  # noqa: E501


        :return: The storage_id of this SampleLogLarge.  # noqa: E501
        :rtype: int
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this SampleLogLarge.


        :param storage_id: The storage_id of this SampleLogLarge.  # noqa: E501
        :type: int
        """

        self._storage_id = storage_id

    @property
    def storage_layer_id(self):
        """Gets the storage_layer_id of this SampleLogLarge.  # noqa: E501


        :return: The storage_layer_id of this SampleLogLarge.  # noqa: E501
        :rtype: int
        """
        return self._storage_layer_id

    @storage_layer_id.setter
    def storage_layer_id(self, storage_layer_id):
        """Sets the storage_layer_id of this SampleLogLarge.


        :param storage_layer_id: The storage_layer_id of this SampleLogLarge.  # noqa: E501
        :type: int
        """

        self._storage_layer_id = storage_layer_id

    @property
    def barcode(self):
        """Gets the barcode of this SampleLogLarge.  # noqa: E501


        :return: The barcode of this SampleLogLarge.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this SampleLogLarge.


        :param barcode: The barcode of this SampleLogLarge.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def archived(self):
        """Gets the archived of this SampleLogLarge.  # noqa: E501


        :return: The archived of this SampleLogLarge.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this SampleLogLarge.


        :param archived: The archived of this SampleLogLarge.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def sample_log_id(self):
        """Gets the sample_log_id of this SampleLogLarge.  # noqa: E501


        :return: The sample_log_id of this SampleLogLarge.  # noqa: E501
        :rtype: int
        """
        return self._sample_log_id

    @sample_log_id.setter
    def sample_log_id(self, sample_log_id):
        """Sets the sample_log_id of this SampleLogLarge.


        :param sample_log_id: The sample_log_id of this SampleLogLarge.  # noqa: E501
        :type: int
        """

        self._sample_log_id = sample_log_id

    @property
    def user_id(self):
        """Gets the user_id of this SampleLogLarge.  # noqa: E501


        :return: The user_id of this SampleLogLarge.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SampleLogLarge.


        :param user_id: The user_id of this SampleLogLarge.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def changed(self):
        """Gets the changed of this SampleLogLarge.  # noqa: E501


        :return: The changed of this SampleLogLarge.  # noqa: E501
        :rtype: datetime
        """
        return self._changed

    @changed.setter
    def changed(self, changed):
        """Sets the changed of this SampleLogLarge.


        :param changed: The changed of this SampleLogLarge.  # noqa: E501
        :type: datetime
        """

        self._changed = changed

    @property
    def sample_id(self):
        """Gets the sample_id of this SampleLogLarge.  # noqa: E501


        :return: The sample_id of this SampleLogLarge.  # noqa: E501
        :rtype: int
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this SampleLogLarge.


        :param sample_id: The sample_id of this SampleLogLarge.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and sample_id is None:
            raise ValueError("Invalid value for `sample_id`, must not be `None`")  # noqa: E501

        self._sample_id = sample_id

    @property
    def sample_meta_id(self):
        """Gets the sample_meta_id of this SampleLogLarge.  # noqa: E501


        :return: The sample_meta_id of this SampleLogLarge.  # noqa: E501
        :rtype: int
        """
        return self._sample_meta_id

    @sample_meta_id.setter
    def sample_meta_id(self, sample_meta_id):
        """Sets the sample_meta_id of this SampleLogLarge.


        :param sample_meta_id: The sample_meta_id of this SampleLogLarge.  # noqa: E501
        :type: int
        """

        self._sample_meta_id = sample_meta_id

    @property
    def sample_meta_key(self):
        """Gets the sample_meta_key of this SampleLogLarge.  # noqa: E501


        :return: The sample_meta_key of this SampleLogLarge.  # noqa: E501
        :rtype: str
        """
        return self._sample_meta_key

    @sample_meta_key.setter
    def sample_meta_key(self, sample_meta_key):
        """Sets the sample_meta_key of this SampleLogLarge.


        :param sample_meta_key: The sample_meta_key of this SampleLogLarge.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and sample_meta_key is None:
            raise ValueError("Invalid value for `sample_meta_key`, must not be `None`")  # noqa: E501

        self._sample_meta_key = sample_meta_key

    @property
    def action(self):
        """Gets the action of this SampleLogLarge.  # noqa: E501


        :return: The action of this SampleLogLarge.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SampleLogLarge.


        :param action: The action of this SampleLogLarge.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["CREATE", "UPDATE", "DELETE", "RENAME"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def old_value(self):
        """Gets the old_value of this SampleLogLarge.  # noqa: E501


        :return: The old_value of this SampleLogLarge.  # noqa: E501
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this SampleLogLarge.


        :param old_value: The old_value of this SampleLogLarge.  # noqa: E501
        :type: str
        """

        self._old_value = old_value

    @property
    def new_value(self):
        """Gets the new_value of this SampleLogLarge.  # noqa: E501


        :return: The new_value of this SampleLogLarge.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this SampleLogLarge.


        :param new_value: The new_value of this SampleLogLarge.  # noqa: E501
        :type: str
        """

        self._new_value = new_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SampleLogLarge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleLogLarge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SampleLogLarge):
            return True

        return self.to_dict() != other.to_dict()
