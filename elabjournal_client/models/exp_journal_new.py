# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class ExpJournalNew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'section_type': 'str',
        'order': 'int',
        'section_header': 'str',
        'section_date': 'datetime'
    }

    attribute_map = {
        'section_type': 'sectionType',
        'order': 'order',
        'section_header': 'sectionHeader',
        'section_date': 'sectionDate'
    }

    def __init__(self, section_type=None, order=None, section_header=None, section_date=None, _configuration=None):  # noqa: E501
        """ExpJournalNew - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._section_type = None
        self._order = None
        self._section_header = None
        self._section_date = None
        self.discriminator = None

        self.section_type = section_type
        if order is not None:
            self.order = order
        self.section_header = section_header
        if section_date is not None:
            self.section_date = section_date

    @property
    def section_type(self):
        """Gets the section_type of this ExpJournalNew.  # noqa: E501


        :return: The section_type of this ExpJournalNew.  # noqa: E501
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this ExpJournalNew.


        :param section_type: The section_type of this ExpJournalNew.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and section_type is None:
            raise ValueError("Invalid value for `section_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CANVAS", "COMMENT", "IMAGE", "NOTES", "FILES", "OUTPUTSAMPLES", "BASESAMPLES", "PARAGRAPH", "PROCEDURE", "DATATABLE", "SAMPLESIN", "SAMPLESOUT", "FILE", "EXCEL", "MARVINJS", "CHEMICAL", "CUSTOM"]  # noqa: E501
        if (self._configuration.client_side_validation and
                section_type not in allowed_values):
            raise ValueError(
                "Invalid value for `section_type` ({0}), must be one of {1}"  # noqa: E501
                .format(section_type, allowed_values)
            )

        self._section_type = section_type

    @property
    def order(self):
        """Gets the order of this ExpJournalNew.  # noqa: E501


        :return: The order of this ExpJournalNew.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ExpJournalNew.


        :param order: The order of this ExpJournalNew.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def section_header(self):
        """Gets the section_header of this ExpJournalNew.  # noqa: E501


        :return: The section_header of this ExpJournalNew.  # noqa: E501
        :rtype: str
        """
        return self._section_header

    @section_header.setter
    def section_header(self, section_header):
        """Sets the section_header of this ExpJournalNew.


        :param section_header: The section_header of this ExpJournalNew.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and section_header is None:
            raise ValueError("Invalid value for `section_header`, must not be `None`")  # noqa: E501

        self._section_header = section_header

    @property
    def section_date(self):
        """Gets the section_date of this ExpJournalNew.  # noqa: E501


        :return: The section_date of this ExpJournalNew.  # noqa: E501
        :rtype: datetime
        """
        return self._section_date

    @section_date.setter
    def section_date(self, section_date):
        """Sets the section_date of this ExpJournalNew.


        :param section_date: The section_date of this ExpJournalNew.  # noqa: E501
        :type: datetime
        """

        self._section_date = section_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpJournalNew, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpJournalNew):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExpJournalNew):
            return True

        return self.to_dict() != other.to_dict()
