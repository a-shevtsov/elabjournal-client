# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class CreateProjectData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'longname': 'str',
        'description': 'str',
        'notes': 'str',
        'label': 'list[str]',
        'project_meta': 'list[ProjectMetaSmall]'
    }

    attribute_map = {
        'name': 'name',
        'longname': 'longname',
        'description': 'description',
        'notes': 'notes',
        'label': 'label',
        'project_meta': 'projectMeta'
    }

    def __init__(self, name=None, longname=None, description=None, notes=None, label=None, project_meta=None, _configuration=None):  # noqa: E501
        """CreateProjectData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._longname = None
        self._description = None
        self._notes = None
        self._label = None
        self._project_meta = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if longname is not None:
            self.longname = longname
        if description is not None:
            self.description = description
        if notes is not None:
            self.notes = notes
        if label is not None:
            self.label = label
        if project_meta is not None:
            self.project_meta = project_meta

    @property
    def name(self):
        """Gets the name of this CreateProjectData.  # noqa: E501


        :return: The name of this CreateProjectData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateProjectData.


        :param name: The name of this CreateProjectData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def longname(self):
        """Gets the longname of this CreateProjectData.  # noqa: E501


        :return: The longname of this CreateProjectData.  # noqa: E501
        :rtype: str
        """
        return self._longname

    @longname.setter
    def longname(self, longname):
        """Sets the longname of this CreateProjectData.


        :param longname: The longname of this CreateProjectData.  # noqa: E501
        :type: str
        """

        self._longname = longname

    @property
    def description(self):
        """Gets the description of this CreateProjectData.  # noqa: E501


        :return: The description of this CreateProjectData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateProjectData.


        :param description: The description of this CreateProjectData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def notes(self):
        """Gets the notes of this CreateProjectData.  # noqa: E501


        :return: The notes of this CreateProjectData.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateProjectData.


        :param notes: The notes of this CreateProjectData.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def label(self):
        """Gets the label of this CreateProjectData.  # noqa: E501


        :return: The label of this CreateProjectData.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CreateProjectData.


        :param label: The label of this CreateProjectData.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def project_meta(self):
        """Gets the project_meta of this CreateProjectData.  # noqa: E501


        :return: The project_meta of this CreateProjectData.  # noqa: E501
        :rtype: list[ProjectMetaSmall]
        """
        return self._project_meta

    @project_meta.setter
    def project_meta(self, project_meta):
        """Sets the project_meta of this CreateProjectData.


        :param project_meta: The project_meta of this CreateProjectData.  # noqa: E501
        :type: list[ProjectMetaSmall]
        """

        self._project_meta = project_meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateProjectData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateProjectData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateProjectData):
            return True

        return self.to_dict() != other.to_dict()
