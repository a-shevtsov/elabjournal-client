# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class SampleNew(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_type_id': 'int',
        'checked_out': 'bool',
        'parent_sample_id': 'int',
        'name': 'str',
        'description': 'str',
        'note': 'str',
        'alt_id': 'str',
        'storage_layer_id': 'int',
        'position': 'int',
        'expiration_date': 'datetime'
    }

    attribute_map = {
        'sample_type_id': 'sampleTypeID',
        'checked_out': 'checkedOut',
        'parent_sample_id': 'parentSampleID',
        'name': 'name',
        'description': 'description',
        'note': 'note',
        'alt_id': 'altID',
        'storage_layer_id': 'storageLayerID',
        'position': 'position',
        'expiration_date': 'expirationDate'
    }

    def __init__(self, sample_type_id=None, checked_out=None, parent_sample_id=None, name=None, description=None, note=None, alt_id=None, storage_layer_id=None, position=None, expiration_date=None, _configuration=None):  # noqa: E501
        """SampleNew - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sample_type_id = None
        self._checked_out = None
        self._parent_sample_id = None
        self._name = None
        self._description = None
        self._note = None
        self._alt_id = None
        self._storage_layer_id = None
        self._position = None
        self._expiration_date = None
        self.discriminator = None

        self.sample_type_id = sample_type_id
        if checked_out is not None:
            self.checked_out = checked_out
        if parent_sample_id is not None:
            self.parent_sample_id = parent_sample_id
        self.name = name
        if description is not None:
            self.description = description
        if note is not None:
            self.note = note
        if alt_id is not None:
            self.alt_id = alt_id
        if storage_layer_id is not None:
            self.storage_layer_id = storage_layer_id
        if position is not None:
            self.position = position
        if expiration_date is not None:
            self.expiration_date = expiration_date

    @property
    def sample_type_id(self):
        """Gets the sample_type_id of this SampleNew.  # noqa: E501


        :return: The sample_type_id of this SampleNew.  # noqa: E501
        :rtype: int
        """
        return self._sample_type_id

    @sample_type_id.setter
    def sample_type_id(self, sample_type_id):
        """Sets the sample_type_id of this SampleNew.


        :param sample_type_id: The sample_type_id of this SampleNew.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and sample_type_id is None:
            raise ValueError("Invalid value for `sample_type_id`, must not be `None`")  # noqa: E501

        self._sample_type_id = sample_type_id

    @property
    def checked_out(self):
        """Gets the checked_out of this SampleNew.  # noqa: E501


        :return: The checked_out of this SampleNew.  # noqa: E501
        :rtype: bool
        """
        return self._checked_out

    @checked_out.setter
    def checked_out(self, checked_out):
        """Sets the checked_out of this SampleNew.


        :param checked_out: The checked_out of this SampleNew.  # noqa: E501
        :type: bool
        """

        self._checked_out = checked_out

    @property
    def parent_sample_id(self):
        """Gets the parent_sample_id of this SampleNew.  # noqa: E501


        :return: The parent_sample_id of this SampleNew.  # noqa: E501
        :rtype: int
        """
        return self._parent_sample_id

    @parent_sample_id.setter
    def parent_sample_id(self, parent_sample_id):
        """Sets the parent_sample_id of this SampleNew.


        :param parent_sample_id: The parent_sample_id of this SampleNew.  # noqa: E501
        :type: int
        """

        self._parent_sample_id = parent_sample_id

    @property
    def name(self):
        """Gets the name of this SampleNew.  # noqa: E501


        :return: The name of this SampleNew.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SampleNew.


        :param name: The name of this SampleNew.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SampleNew.  # noqa: E501


        :return: The description of this SampleNew.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SampleNew.


        :param description: The description of this SampleNew.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def note(self):
        """Gets the note of this SampleNew.  # noqa: E501


        :return: The note of this SampleNew.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SampleNew.


        :param note: The note of this SampleNew.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def alt_id(self):
        """Gets the alt_id of this SampleNew.  # noqa: E501


        :return: The alt_id of this SampleNew.  # noqa: E501
        :rtype: str
        """
        return self._alt_id

    @alt_id.setter
    def alt_id(self, alt_id):
        """Sets the alt_id of this SampleNew.


        :param alt_id: The alt_id of this SampleNew.  # noqa: E501
        :type: str
        """

        self._alt_id = alt_id

    @property
    def storage_layer_id(self):
        """Gets the storage_layer_id of this SampleNew.  # noqa: E501


        :return: The storage_layer_id of this SampleNew.  # noqa: E501
        :rtype: int
        """
        return self._storage_layer_id

    @storage_layer_id.setter
    def storage_layer_id(self, storage_layer_id):
        """Sets the storage_layer_id of this SampleNew.


        :param storage_layer_id: The storage_layer_id of this SampleNew.  # noqa: E501
        :type: int
        """

        self._storage_layer_id = storage_layer_id

    @property
    def position(self):
        """Gets the position of this SampleNew.  # noqa: E501


        :return: The position of this SampleNew.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this SampleNew.


        :param position: The position of this SampleNew.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SampleNew.  # noqa: E501


        :return: The expiration_date of this SampleNew.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SampleNew.


        :param expiration_date: The expiration_date of this SampleNew.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SampleNew, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleNew):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SampleNew):
            return True

        return self.to_dict() != other.to_dict()
