# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class AddonBundle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bundle_id': 'int',
        'sdk_foreign_source_id': 'int',
        'developer_id': 'int',
        'description': 'str',
        'name': 'str',
        'price': 'str',
        'currency': 'str',
        'scope': 'str',
        'category_id': 'int',
        'media': 'SDKMedia',
        'bundle_price': 'Price',
        'addons': 'list[AddonPlugin]',
        'media': 'list[SDKMedia]',
        'apps': 'list[AddonPlugin]'
    }

    attribute_map = {
        'bundle_id': 'bundleID',
        'sdk_foreign_source_id': 'sdkForeignSourceID',
        'developer_id': 'developerID',
        'description': 'description',
        'name': 'name',
        'price': 'price',
        'currency': 'currency',
        'scope': 'scope',
        'category_id': 'categoryID',
        'media': 'media',
        'bundle_price': 'bundlePrice',
        'addons': 'Addons',
        'media': 'Media',
        'apps': 'apps'
    }

    def __init__(self, bundle_id=None, sdk_foreign_source_id=None, developer_id=None, description=None, name=None, price=None, currency=None, scope=None, category_id=None, media=None, bundle_price=None, addons=None, apps=None, _configuration=None):  # noqa: E501
        """AddonBundle - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bundle_id = None
        self._sdk_foreign_source_id = None
        self._developer_id = None
        self._description = None
        self._name = None
        self._price = None
        self._currency = None
        self._scope = None
        self._category_id = None
        self._media = None
        self._bundle_price = None
        self._addons = None
        self._apps = None
        self.discriminator = None

        if bundle_id is not None:
            self.bundle_id = bundle_id
        if sdk_foreign_source_id is not None:
            self.sdk_foreign_source_id = sdk_foreign_source_id
        if developer_id is not None:
            self.developer_id = developer_id
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if currency is not None:
            self.currency = currency
        if scope is not None:
            self.scope = scope
        if category_id is not None:
            self.category_id = category_id
        if media is not None:
            self.media = media
        if bundle_price is not None:
            self.bundle_price = bundle_price
        if addons is not None:
            self.addons = addons
        if apps is not None:
            self.apps = apps

    @property
    def bundle_id(self):
        """Gets the bundle_id of this AddonBundle.  # noqa: E501


        :return: The bundle_id of this AddonBundle.  # noqa: E501
        :rtype: int
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this AddonBundle.


        :param bundle_id: The bundle_id of this AddonBundle.  # noqa: E501
        :type: int
        """

        self._bundle_id = bundle_id

    @property
    def sdk_foreign_source_id(self):
        """Gets the sdk_foreign_source_id of this AddonBundle.  # noqa: E501


        :return: The sdk_foreign_source_id of this AddonBundle.  # noqa: E501
        :rtype: int
        """
        return self._sdk_foreign_source_id

    @sdk_foreign_source_id.setter
    def sdk_foreign_source_id(self, sdk_foreign_source_id):
        """Sets the sdk_foreign_source_id of this AddonBundle.


        :param sdk_foreign_source_id: The sdk_foreign_source_id of this AddonBundle.  # noqa: E501
        :type: int
        """

        self._sdk_foreign_source_id = sdk_foreign_source_id

    @property
    def developer_id(self):
        """Gets the developer_id of this AddonBundle.  # noqa: E501


        :return: The developer_id of this AddonBundle.  # noqa: E501
        :rtype: int
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this AddonBundle.


        :param developer_id: The developer_id of this AddonBundle.  # noqa: E501
        :type: int
        """

        self._developer_id = developer_id

    @property
    def description(self):
        """Gets the description of this AddonBundle.  # noqa: E501


        :return: The description of this AddonBundle.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddonBundle.


        :param description: The description of this AddonBundle.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this AddonBundle.  # noqa: E501


        :return: The name of this AddonBundle.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddonBundle.


        :param name: The name of this AddonBundle.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this AddonBundle.  # noqa: E501


        :return: The price of this AddonBundle.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AddonBundle.


        :param price: The price of this AddonBundle.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def currency(self):
        """Gets the currency of this AddonBundle.  # noqa: E501


        :return: The currency of this AddonBundle.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AddonBundle.


        :param currency: The currency of this AddonBundle.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def scope(self):
        """Gets the scope of this AddonBundle.  # noqa: E501


        :return: The scope of this AddonBundle.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AddonBundle.


        :param scope: The scope of this AddonBundle.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def category_id(self):
        """Gets the category_id of this AddonBundle.  # noqa: E501


        :return: The category_id of this AddonBundle.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this AddonBundle.


        :param category_id: The category_id of this AddonBundle.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def media(self):
        """Gets the media of this AddonBundle.  # noqa: E501


        :return: The media of this AddonBundle.  # noqa: E501
        :rtype: SDKMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this AddonBundle.


        :param media: The media of this AddonBundle.  # noqa: E501
        :type: SDKMedia
        """

        self._media = media

    @property
    def bundle_price(self):
        """Gets the bundle_price of this AddonBundle.  # noqa: E501


        :return: The bundle_price of this AddonBundle.  # noqa: E501
        :rtype: Price
        """
        return self._bundle_price

    @bundle_price.setter
    def bundle_price(self, bundle_price):
        """Sets the bundle_price of this AddonBundle.


        :param bundle_price: The bundle_price of this AddonBundle.  # noqa: E501
        :type: Price
        """

        self._bundle_price = bundle_price

    @property
    def addons(self):
        """Gets the addons of this AddonBundle.  # noqa: E501


        :return: The addons of this AddonBundle.  # noqa: E501
        :rtype: list[AddonPlugin]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this AddonBundle.


        :param addons: The addons of this AddonBundle.  # noqa: E501
        :type: list[AddonPlugin]
        """

        self._addons = addons

    @property
    def media(self):
        """Gets the media of this AddonBundle.  # noqa: E501


        :return: The media of this AddonBundle.  # noqa: E501
        :rtype: list[SDKMedia]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this AddonBundle.


        :param media: The media of this AddonBundle.  # noqa: E501
        :type: list[SDKMedia]
        """

        self._media = media

    @property
    def apps(self):
        """Gets the apps of this AddonBundle.  # noqa: E501


        :return: The apps of this AddonBundle.  # noqa: E501
        :rtype: list[AddonPlugin]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this AddonBundle.


        :param apps: The apps of this AddonBundle.  # noqa: E501
        :type: list[AddonPlugin]
        """

        self._apps = apps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddonBundle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddonBundle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddonBundle):
            return True

        return self.to_dict() != other.to_dict()
