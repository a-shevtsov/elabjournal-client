# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class SDKPluginFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sdk_plugin_file_id': 'int',
        'sdk_plugin_id': 'int',
        'origin': 'str',
        'group_id': 'int',
        'file_name': 'str',
        'stored_name': 'str',
        'stored': 'datetime',
        'last_modified': 'datetime',
        'file_size': 'int',
        'sha256_hash': 'str',
        'certificate_hash': 'str',
        'deleted': 'bool',
        'meta': 'list[SDKPluginFileMeta]'
    }

    attribute_map = {
        'sdk_plugin_file_id': 'sdkPluginFileID',
        'sdk_plugin_id': 'sdkPluginID',
        'origin': 'origin',
        'group_id': 'groupID',
        'file_name': 'fileName',
        'stored_name': 'storedName',
        'stored': 'stored',
        'last_modified': 'lastModified',
        'file_size': 'fileSize',
        'sha256_hash': 'SHA256Hash',
        'certificate_hash': 'certificateHash',
        'deleted': 'deleted',
        'meta': 'meta'
    }

    def __init__(self, sdk_plugin_file_id=None, sdk_plugin_id=None, origin=None, group_id=None, file_name=None, stored_name=None, stored=None, last_modified=None, file_size=None, sha256_hash=None, certificate_hash=None, deleted=None, meta=None, _configuration=None):  # noqa: E501
        """SDKPluginFile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sdk_plugin_file_id = None
        self._sdk_plugin_id = None
        self._origin = None
        self._group_id = None
        self._file_name = None
        self._stored_name = None
        self._stored = None
        self._last_modified = None
        self._file_size = None
        self._sha256_hash = None
        self._certificate_hash = None
        self._deleted = None
        self._meta = None
        self.discriminator = None

        if sdk_plugin_file_id is not None:
            self.sdk_plugin_file_id = sdk_plugin_file_id
        if sdk_plugin_id is not None:
            self.sdk_plugin_id = sdk_plugin_id
        if origin is not None:
            self.origin = origin
        if group_id is not None:
            self.group_id = group_id
        if file_name is not None:
            self.file_name = file_name
        if stored_name is not None:
            self.stored_name = stored_name
        if stored is not None:
            self.stored = stored
        if last_modified is not None:
            self.last_modified = last_modified
        if file_size is not None:
            self.file_size = file_size
        if sha256_hash is not None:
            self.sha256_hash = sha256_hash
        if certificate_hash is not None:
            self.certificate_hash = certificate_hash
        if deleted is not None:
            self.deleted = deleted
        if meta is not None:
            self.meta = meta

    @property
    def sdk_plugin_file_id(self):
        """Gets the sdk_plugin_file_id of this SDKPluginFile.  # noqa: E501


        :return: The sdk_plugin_file_id of this SDKPluginFile.  # noqa: E501
        :rtype: int
        """
        return self._sdk_plugin_file_id

    @sdk_plugin_file_id.setter
    def sdk_plugin_file_id(self, sdk_plugin_file_id):
        """Sets the sdk_plugin_file_id of this SDKPluginFile.


        :param sdk_plugin_file_id: The sdk_plugin_file_id of this SDKPluginFile.  # noqa: E501
        :type: int
        """

        self._sdk_plugin_file_id = sdk_plugin_file_id

    @property
    def sdk_plugin_id(self):
        """Gets the sdk_plugin_id of this SDKPluginFile.  # noqa: E501


        :return: The sdk_plugin_id of this SDKPluginFile.  # noqa: E501
        :rtype: int
        """
        return self._sdk_plugin_id

    @sdk_plugin_id.setter
    def sdk_plugin_id(self, sdk_plugin_id):
        """Sets the sdk_plugin_id of this SDKPluginFile.


        :param sdk_plugin_id: The sdk_plugin_id of this SDKPluginFile.  # noqa: E501
        :type: int
        """

        self._sdk_plugin_id = sdk_plugin_id

    @property
    def origin(self):
        """Gets the origin of this SDKPluginFile.  # noqa: E501


        :return: The origin of this SDKPluginFile.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this SDKPluginFile.


        :param origin: The origin of this SDKPluginFile.  # noqa: E501
        :type: str
        """
        allowed_values = ["ELAB", "TARGET", "ONSITE", "S3"]  # noqa: E501
        if (self._configuration.client_side_validation and
                origin not in allowed_values):
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"  # noqa: E501
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def group_id(self):
        """Gets the group_id of this SDKPluginFile.  # noqa: E501


        :return: The group_id of this SDKPluginFile.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this SDKPluginFile.


        :param group_id: The group_id of this SDKPluginFile.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def file_name(self):
        """Gets the file_name of this SDKPluginFile.  # noqa: E501


        :return: The file_name of this SDKPluginFile.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SDKPluginFile.


        :param file_name: The file_name of this SDKPluginFile.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def stored_name(self):
        """Gets the stored_name of this SDKPluginFile.  # noqa: E501


        :return: The stored_name of this SDKPluginFile.  # noqa: E501
        :rtype: str
        """
        return self._stored_name

    @stored_name.setter
    def stored_name(self, stored_name):
        """Sets the stored_name of this SDKPluginFile.


        :param stored_name: The stored_name of this SDKPluginFile.  # noqa: E501
        :type: str
        """

        self._stored_name = stored_name

    @property
    def stored(self):
        """Gets the stored of this SDKPluginFile.  # noqa: E501


        :return: The stored of this SDKPluginFile.  # noqa: E501
        :rtype: datetime
        """
        return self._stored

    @stored.setter
    def stored(self, stored):
        """Sets the stored of this SDKPluginFile.


        :param stored: The stored of this SDKPluginFile.  # noqa: E501
        :type: datetime
        """

        self._stored = stored

    @property
    def last_modified(self):
        """Gets the last_modified of this SDKPluginFile.  # noqa: E501


        :return: The last_modified of this SDKPluginFile.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this SDKPluginFile.


        :param last_modified: The last_modified of this SDKPluginFile.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def file_size(self):
        """Gets the file_size of this SDKPluginFile.  # noqa: E501


        :return: The file_size of this SDKPluginFile.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this SDKPluginFile.


        :param file_size: The file_size of this SDKPluginFile.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def sha256_hash(self):
        """Gets the sha256_hash of this SDKPluginFile.  # noqa: E501


        :return: The sha256_hash of this SDKPluginFile.  # noqa: E501
        :rtype: str
        """
        return self._sha256_hash

    @sha256_hash.setter
    def sha256_hash(self, sha256_hash):
        """Sets the sha256_hash of this SDKPluginFile.


        :param sha256_hash: The sha256_hash of this SDKPluginFile.  # noqa: E501
        :type: str
        """

        self._sha256_hash = sha256_hash

    @property
    def certificate_hash(self):
        """Gets the certificate_hash of this SDKPluginFile.  # noqa: E501


        :return: The certificate_hash of this SDKPluginFile.  # noqa: E501
        :rtype: str
        """
        return self._certificate_hash

    @certificate_hash.setter
    def certificate_hash(self, certificate_hash):
        """Sets the certificate_hash of this SDKPluginFile.


        :param certificate_hash: The certificate_hash of this SDKPluginFile.  # noqa: E501
        :type: str
        """

        self._certificate_hash = certificate_hash

    @property
    def deleted(self):
        """Gets the deleted of this SDKPluginFile.  # noqa: E501


        :return: The deleted of this SDKPluginFile.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SDKPluginFile.


        :param deleted: The deleted of this SDKPluginFile.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def meta(self):
        """Gets the meta of this SDKPluginFile.  # noqa: E501


        :return: The meta of this SDKPluginFile.  # noqa: E501
        :rtype: list[SDKPluginFileMeta]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this SDKPluginFile.


        :param meta: The meta of this SDKPluginFile.  # noqa: E501
        :type: list[SDKPluginFileMeta]
        """

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SDKPluginFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SDKPluginFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SDKPluginFile):
            return True

        return self.to_dict() != other.to_dict()
