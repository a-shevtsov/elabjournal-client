# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class AddonPlugin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sdk_plugin_id': 'int',
        'sdk_plugin_master_id': 'int',
        'addon_master': 'AddonMaster',
        'script': 'str',
        'default_configuration': 'str',
        'required_elab_version': 'str',
        'approved': 'bool',
        'description': 'str',
        'status': 'str',
        'version': 'str',
        'price': 'str',
        'currency': 'str',
        'consent_message': 'str',
        'release_notes': 'str',
        'icon_class': 'str',
        'background_color': 'str',
        'product': 'str',
        'author_name': 'str',
        'name': 'str',
        'mediamaps': 'list[SDKMediaMap]',
        'media': 'list[SDKMedia]',
        'capabilities': 'list[AddonCapability]',
        'target_group_maps': 'list[SDKTargetGroupMap]',
        'target_user_maps': 'list[SDKTargetUserMap]',
        'target_organisation_maps': 'list[SDKTargetOrganisationMap]',
        'is_configured': 'bool',
        'o_auth_configuration': 'OAuthConfiguration',
        'dependencies': 'list[Dependency]'
    }

    attribute_map = {
        'sdk_plugin_id': 'sdkPluginID',
        'sdk_plugin_master_id': 'sdkPluginMasterID',
        'addon_master': 'AddonMaster',
        'script': 'script',
        'default_configuration': 'defaultConfiguration',
        'required_elab_version': 'requiredElabVersion',
        'approved': 'approved',
        'description': 'description',
        'status': 'status',
        'version': 'version',
        'price': 'price',
        'currency': 'currency',
        'consent_message': 'consentMessage',
        'release_notes': 'releaseNotes',
        'icon_class': 'iconClass',
        'background_color': 'backgroundColor',
        'product': 'product',
        'author_name': 'authorName',
        'name': 'name',
        'mediamaps': 'Mediamaps',
        'media': 'media',
        'capabilities': 'Capabilities',
        'target_group_maps': 'TargetGroupMaps',
        'target_user_maps': 'TargetUserMaps',
        'target_organisation_maps': 'TargetOrganisationMaps',
        'is_configured': 'IsConfigured',
        'o_auth_configuration': 'oAuthConfiguration',
        'dependencies': 'Dependencies'
    }

    def __init__(self, sdk_plugin_id=None, sdk_plugin_master_id=None, addon_master=None, script=None, default_configuration=None, required_elab_version=None, approved=None, description=None, status=None, version=None, price=None, currency=None, consent_message=None, release_notes=None, icon_class=None, background_color=None, product=None, author_name=None, name=None, mediamaps=None, media=None, capabilities=None, target_group_maps=None, target_user_maps=None, target_organisation_maps=None, is_configured=None, o_auth_configuration=None, dependencies=None, _configuration=None):  # noqa: E501
        """AddonPlugin - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sdk_plugin_id = None
        self._sdk_plugin_master_id = None
        self._addon_master = None
        self._script = None
        self._default_configuration = None
        self._required_elab_version = None
        self._approved = None
        self._description = None
        self._status = None
        self._version = None
        self._price = None
        self._currency = None
        self._consent_message = None
        self._release_notes = None
        self._icon_class = None
        self._background_color = None
        self._product = None
        self._author_name = None
        self._name = None
        self._mediamaps = None
        self._media = None
        self._capabilities = None
        self._target_group_maps = None
        self._target_user_maps = None
        self._target_organisation_maps = None
        self._is_configured = None
        self._o_auth_configuration = None
        self._dependencies = None
        self.discriminator = None

        if sdk_plugin_id is not None:
            self.sdk_plugin_id = sdk_plugin_id
        if sdk_plugin_master_id is not None:
            self.sdk_plugin_master_id = sdk_plugin_master_id
        if addon_master is not None:
            self.addon_master = addon_master
        if script is not None:
            self.script = script
        if default_configuration is not None:
            self.default_configuration = default_configuration
        if required_elab_version is not None:
            self.required_elab_version = required_elab_version
        if approved is not None:
            self.approved = approved
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if version is not None:
            self.version = version
        if price is not None:
            self.price = price
        if currency is not None:
            self.currency = currency
        if consent_message is not None:
            self.consent_message = consent_message
        if release_notes is not None:
            self.release_notes = release_notes
        if icon_class is not None:
            self.icon_class = icon_class
        if background_color is not None:
            self.background_color = background_color
        if product is not None:
            self.product = product
        if author_name is not None:
            self.author_name = author_name
        if name is not None:
            self.name = name
        if mediamaps is not None:
            self.mediamaps = mediamaps
        if media is not None:
            self.media = media
        if capabilities is not None:
            self.capabilities = capabilities
        if target_group_maps is not None:
            self.target_group_maps = target_group_maps
        if target_user_maps is not None:
            self.target_user_maps = target_user_maps
        if target_organisation_maps is not None:
            self.target_organisation_maps = target_organisation_maps
        if is_configured is not None:
            self.is_configured = is_configured
        if o_auth_configuration is not None:
            self.o_auth_configuration = o_auth_configuration
        if dependencies is not None:
            self.dependencies = dependencies

    @property
    def sdk_plugin_id(self):
        """Gets the sdk_plugin_id of this AddonPlugin.  # noqa: E501


        :return: The sdk_plugin_id of this AddonPlugin.  # noqa: E501
        :rtype: int
        """
        return self._sdk_plugin_id

    @sdk_plugin_id.setter
    def sdk_plugin_id(self, sdk_plugin_id):
        """Sets the sdk_plugin_id of this AddonPlugin.


        :param sdk_plugin_id: The sdk_plugin_id of this AddonPlugin.  # noqa: E501
        :type: int
        """

        self._sdk_plugin_id = sdk_plugin_id

    @property
    def sdk_plugin_master_id(self):
        """Gets the sdk_plugin_master_id of this AddonPlugin.  # noqa: E501


        :return: The sdk_plugin_master_id of this AddonPlugin.  # noqa: E501
        :rtype: int
        """
        return self._sdk_plugin_master_id

    @sdk_plugin_master_id.setter
    def sdk_plugin_master_id(self, sdk_plugin_master_id):
        """Sets the sdk_plugin_master_id of this AddonPlugin.


        :param sdk_plugin_master_id: The sdk_plugin_master_id of this AddonPlugin.  # noqa: E501
        :type: int
        """

        self._sdk_plugin_master_id = sdk_plugin_master_id

    @property
    def addon_master(self):
        """Gets the addon_master of this AddonPlugin.  # noqa: E501


        :return: The addon_master of this AddonPlugin.  # noqa: E501
        :rtype: AddonMaster
        """
        return self._addon_master

    @addon_master.setter
    def addon_master(self, addon_master):
        """Sets the addon_master of this AddonPlugin.


        :param addon_master: The addon_master of this AddonPlugin.  # noqa: E501
        :type: AddonMaster
        """

        self._addon_master = addon_master

    @property
    def script(self):
        """Gets the script of this AddonPlugin.  # noqa: E501


        :return: The script of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this AddonPlugin.


        :param script: The script of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def default_configuration(self):
        """Gets the default_configuration of this AddonPlugin.  # noqa: E501


        :return: The default_configuration of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._default_configuration

    @default_configuration.setter
    def default_configuration(self, default_configuration):
        """Sets the default_configuration of this AddonPlugin.


        :param default_configuration: The default_configuration of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._default_configuration = default_configuration

    @property
    def required_elab_version(self):
        """Gets the required_elab_version of this AddonPlugin.  # noqa: E501


        :return: The required_elab_version of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._required_elab_version

    @required_elab_version.setter
    def required_elab_version(self, required_elab_version):
        """Sets the required_elab_version of this AddonPlugin.


        :param required_elab_version: The required_elab_version of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._required_elab_version = required_elab_version

    @property
    def approved(self):
        """Gets the approved of this AddonPlugin.  # noqa: E501


        :return: The approved of this AddonPlugin.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this AddonPlugin.


        :param approved: The approved of this AddonPlugin.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def description(self):
        """Gets the description of this AddonPlugin.  # noqa: E501


        :return: The description of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddonPlugin.


        :param description: The description of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this AddonPlugin.  # noqa: E501


        :return: The status of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AddonPlugin.


        :param status: The status of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def version(self):
        """Gets the version of this AddonPlugin.  # noqa: E501


        :return: The version of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AddonPlugin.


        :param version: The version of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def price(self):
        """Gets the price of this AddonPlugin.  # noqa: E501


        :return: The price of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AddonPlugin.


        :param price: The price of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def currency(self):
        """Gets the currency of this AddonPlugin.  # noqa: E501


        :return: The currency of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AddonPlugin.


        :param currency: The currency of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def consent_message(self):
        """Gets the consent_message of this AddonPlugin.  # noqa: E501


        :return: The consent_message of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._consent_message

    @consent_message.setter
    def consent_message(self, consent_message):
        """Sets the consent_message of this AddonPlugin.


        :param consent_message: The consent_message of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._consent_message = consent_message

    @property
    def release_notes(self):
        """Gets the release_notes of this AddonPlugin.  # noqa: E501


        :return: The release_notes of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this AddonPlugin.


        :param release_notes: The release_notes of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._release_notes = release_notes

    @property
    def icon_class(self):
        """Gets the icon_class of this AddonPlugin.  # noqa: E501


        :return: The icon_class of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._icon_class

    @icon_class.setter
    def icon_class(self, icon_class):
        """Sets the icon_class of this AddonPlugin.


        :param icon_class: The icon_class of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._icon_class = icon_class

    @property
    def background_color(self):
        """Gets the background_color of this AddonPlugin.  # noqa: E501


        :return: The background_color of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this AddonPlugin.


        :param background_color: The background_color of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._background_color = background_color

    @property
    def product(self):
        """Gets the product of this AddonPlugin.  # noqa: E501


        :return: The product of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AddonPlugin.


        :param product: The product of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def author_name(self):
        """Gets the author_name of this AddonPlugin.  # noqa: E501


        :return: The author_name of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this AddonPlugin.


        :param author_name: The author_name of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._author_name = author_name

    @property
    def name(self):
        """Gets the name of this AddonPlugin.  # noqa: E501


        :return: The name of this AddonPlugin.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddonPlugin.


        :param name: The name of this AddonPlugin.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mediamaps(self):
        """Gets the mediamaps of this AddonPlugin.  # noqa: E501


        :return: The mediamaps of this AddonPlugin.  # noqa: E501
        :rtype: list[SDKMediaMap]
        """
        return self._mediamaps

    @mediamaps.setter
    def mediamaps(self, mediamaps):
        """Sets the mediamaps of this AddonPlugin.


        :param mediamaps: The mediamaps of this AddonPlugin.  # noqa: E501
        :type: list[SDKMediaMap]
        """

        self._mediamaps = mediamaps

    @property
    def media(self):
        """Gets the media of this AddonPlugin.  # noqa: E501


        :return: The media of this AddonPlugin.  # noqa: E501
        :rtype: list[SDKMedia]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this AddonPlugin.


        :param media: The media of this AddonPlugin.  # noqa: E501
        :type: list[SDKMedia]
        """

        self._media = media

    @property
    def capabilities(self):
        """Gets the capabilities of this AddonPlugin.  # noqa: E501


        :return: The capabilities of this AddonPlugin.  # noqa: E501
        :rtype: list[AddonCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this AddonPlugin.


        :param capabilities: The capabilities of this AddonPlugin.  # noqa: E501
        :type: list[AddonCapability]
        """

        self._capabilities = capabilities

    @property
    def target_group_maps(self):
        """Gets the target_group_maps of this AddonPlugin.  # noqa: E501


        :return: The target_group_maps of this AddonPlugin.  # noqa: E501
        :rtype: list[SDKTargetGroupMap]
        """
        return self._target_group_maps

    @target_group_maps.setter
    def target_group_maps(self, target_group_maps):
        """Sets the target_group_maps of this AddonPlugin.


        :param target_group_maps: The target_group_maps of this AddonPlugin.  # noqa: E501
        :type: list[SDKTargetGroupMap]
        """

        self._target_group_maps = target_group_maps

    @property
    def target_user_maps(self):
        """Gets the target_user_maps of this AddonPlugin.  # noqa: E501


        :return: The target_user_maps of this AddonPlugin.  # noqa: E501
        :rtype: list[SDKTargetUserMap]
        """
        return self._target_user_maps

    @target_user_maps.setter
    def target_user_maps(self, target_user_maps):
        """Sets the target_user_maps of this AddonPlugin.


        :param target_user_maps: The target_user_maps of this AddonPlugin.  # noqa: E501
        :type: list[SDKTargetUserMap]
        """

        self._target_user_maps = target_user_maps

    @property
    def target_organisation_maps(self):
        """Gets the target_organisation_maps of this AddonPlugin.  # noqa: E501


        :return: The target_organisation_maps of this AddonPlugin.  # noqa: E501
        :rtype: list[SDKTargetOrganisationMap]
        """
        return self._target_organisation_maps

    @target_organisation_maps.setter
    def target_organisation_maps(self, target_organisation_maps):
        """Sets the target_organisation_maps of this AddonPlugin.


        :param target_organisation_maps: The target_organisation_maps of this AddonPlugin.  # noqa: E501
        :type: list[SDKTargetOrganisationMap]
        """

        self._target_organisation_maps = target_organisation_maps

    @property
    def is_configured(self):
        """Gets the is_configured of this AddonPlugin.  # noqa: E501


        :return: The is_configured of this AddonPlugin.  # noqa: E501
        :rtype: bool
        """
        return self._is_configured

    @is_configured.setter
    def is_configured(self, is_configured):
        """Sets the is_configured of this AddonPlugin.


        :param is_configured: The is_configured of this AddonPlugin.  # noqa: E501
        :type: bool
        """

        self._is_configured = is_configured

    @property
    def o_auth_configuration(self):
        """Gets the o_auth_configuration of this AddonPlugin.  # noqa: E501


        :return: The o_auth_configuration of this AddonPlugin.  # noqa: E501
        :rtype: OAuthConfiguration
        """
        return self._o_auth_configuration

    @o_auth_configuration.setter
    def o_auth_configuration(self, o_auth_configuration):
        """Sets the o_auth_configuration of this AddonPlugin.


        :param o_auth_configuration: The o_auth_configuration of this AddonPlugin.  # noqa: E501
        :type: OAuthConfiguration
        """

        self._o_auth_configuration = o_auth_configuration

    @property
    def dependencies(self):
        """Gets the dependencies of this AddonPlugin.  # noqa: E501


        :return: The dependencies of this AddonPlugin.  # noqa: E501
        :rtype: list[Dependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this AddonPlugin.


        :param dependencies: The dependencies of this AddonPlugin.  # noqa: E501
        :type: list[Dependency]
        """

        self._dependencies = dependencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddonPlugin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddonPlugin):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddonPlugin):
            return True

        return self.to_dict() != other.to_dict()
