# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'institute_id': 'int',
        'institute': 'Institute',
        'user_name': 'str',
        'password': 'str',
        'email': 'str',
        'mod_remarks': 'str',
        'last_login': 'datetime',
        'active': 'bool',
        'is_academic': 'bool',
        'created': 'datetime',
        'salt': 'str'
    }

    attribute_map = {
        'user_id': 'userID',
        'institute_id': 'instituteID',
        'institute': 'institute',
        'user_name': 'userName',
        'password': 'password',
        'email': 'email',
        'mod_remarks': 'modRemarks',
        'last_login': 'lastLogin',
        'active': 'active',
        'is_academic': 'isAcademic',
        'created': 'created',
        'salt': 'salt'
    }

    def __init__(self, user_id=None, institute_id=None, institute=None, user_name=None, password=None, email=None, mod_remarks=None, last_login=None, active=None, is_academic=None, created=None, salt=None, _configuration=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_id = None
        self._institute_id = None
        self._institute = None
        self._user_name = None
        self._password = None
        self._email = None
        self._mod_remarks = None
        self._last_login = None
        self._active = None
        self._is_academic = None
        self._created = None
        self._salt = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        self.institute_id = institute_id
        if institute is not None:
            self.institute = institute
        self.user_name = user_name
        if password is not None:
            self.password = password
        self.email = email
        if mod_remarks is not None:
            self.mod_remarks = mod_remarks
        if last_login is not None:
            self.last_login = last_login
        if active is not None:
            self.active = active
        if is_academic is not None:
            self.is_academic = is_academic
        self.created = created
        if salt is not None:
            self.salt = salt

    @property
    def user_id(self):
        """Gets the user_id of this User.  # noqa: E501


        :return: The user_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def institute_id(self):
        """Gets the institute_id of this User.  # noqa: E501


        :return: The institute_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._institute_id

    @institute_id.setter
    def institute_id(self, institute_id):
        """Sets the institute_id of this User.


        :param institute_id: The institute_id of this User.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and institute_id is None:
            raise ValueError("Invalid value for `institute_id`, must not be `None`")  # noqa: E501

        self._institute_id = institute_id

    @property
    def institute(self):
        """Gets the institute of this User.  # noqa: E501


        :return: The institute of this User.  # noqa: E501
        :rtype: Institute
        """
        return self._institute

    @institute.setter
    def institute(self, institute):
        """Sets the institute of this User.


        :param institute: The institute of this User.  # noqa: E501
        :type: Institute
        """

        self._institute = institute

    @property
    def user_name(self):
        """Gets the user_name of this User.  # noqa: E501


        :return: The user_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.


        :param user_name: The user_name of this User.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def mod_remarks(self):
        """Gets the mod_remarks of this User.  # noqa: E501


        :return: The mod_remarks of this User.  # noqa: E501
        :rtype: str
        """
        return self._mod_remarks

    @mod_remarks.setter
    def mod_remarks(self, mod_remarks):
        """Sets the mod_remarks of this User.


        :param mod_remarks: The mod_remarks of this User.  # noqa: E501
        :type: str
        """

        self._mod_remarks = mod_remarks

    @property
    def last_login(self):
        """Gets the last_login of this User.  # noqa: E501


        :return: The last_login of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this User.


        :param last_login: The last_login of this User.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def active(self):
        """Gets the active of this User.  # noqa: E501


        :return: The active of this User.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this User.


        :param active: The active of this User.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def is_academic(self):
        """Gets the is_academic of this User.  # noqa: E501


        :return: The is_academic of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_academic

    @is_academic.setter
    def is_academic(self, is_academic):
        """Sets the is_academic of this User.


        :param is_academic: The is_academic of this User.  # noqa: E501
        :type: bool
        """

        self._is_academic = is_academic

    @property
    def created(self):
        """Gets the created of this User.  # noqa: E501


        :return: The created of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.


        :param created: The created of this User.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def salt(self):
        """Gets the salt of this User.  # noqa: E501


        :return: The salt of this User.  # noqa: E501
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this User.


        :param salt: The salt of this User.  # noqa: E501
        :type: str
        """

        self._salt = salt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
