# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from elabjournal_client.configuration import Configuration


class SearchStructureData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_error': 'bool',
        'smiles_error': 'bool',
        'query_execution_error': 'str',
        'all_structure_data': 'list[SampleStructureData]',
        'server_search_results': 'list[SampleStructureData]',
        'first_filtered_data': 'list[SampleStructureData]',
        'search_type': 'str'
    }

    attribute_map = {
        'search_error': 'searchError',
        'smiles_error': 'smilesError',
        'query_execution_error': 'queryExecutionError',
        'all_structure_data': 'allStructureData',
        'server_search_results': 'serverSearchResults',
        'first_filtered_data': 'firstFilteredData',
        'search_type': 'searchType'
    }

    def __init__(self, search_error=None, smiles_error=None, query_execution_error=None, all_structure_data=None, server_search_results=None, first_filtered_data=None, search_type=None, _configuration=None):  # noqa: E501
        """SearchStructureData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._search_error = None
        self._smiles_error = None
        self._query_execution_error = None
        self._all_structure_data = None
        self._server_search_results = None
        self._first_filtered_data = None
        self._search_type = None
        self.discriminator = None

        if search_error is not None:
            self.search_error = search_error
        if smiles_error is not None:
            self.smiles_error = smiles_error
        if query_execution_error is not None:
            self.query_execution_error = query_execution_error
        if all_structure_data is not None:
            self.all_structure_data = all_structure_data
        if server_search_results is not None:
            self.server_search_results = server_search_results
        if first_filtered_data is not None:
            self.first_filtered_data = first_filtered_data
        if search_type is not None:
            self.search_type = search_type

    @property
    def search_error(self):
        """Gets the search_error of this SearchStructureData.  # noqa: E501


        :return: The search_error of this SearchStructureData.  # noqa: E501
        :rtype: bool
        """
        return self._search_error

    @search_error.setter
    def search_error(self, search_error):
        """Sets the search_error of this SearchStructureData.


        :param search_error: The search_error of this SearchStructureData.  # noqa: E501
        :type: bool
        """

        self._search_error = search_error

    @property
    def smiles_error(self):
        """Gets the smiles_error of this SearchStructureData.  # noqa: E501


        :return: The smiles_error of this SearchStructureData.  # noqa: E501
        :rtype: bool
        """
        return self._smiles_error

    @smiles_error.setter
    def smiles_error(self, smiles_error):
        """Sets the smiles_error of this SearchStructureData.


        :param smiles_error: The smiles_error of this SearchStructureData.  # noqa: E501
        :type: bool
        """

        self._smiles_error = smiles_error

    @property
    def query_execution_error(self):
        """Gets the query_execution_error of this SearchStructureData.  # noqa: E501


        :return: The query_execution_error of this SearchStructureData.  # noqa: E501
        :rtype: str
        """
        return self._query_execution_error

    @query_execution_error.setter
    def query_execution_error(self, query_execution_error):
        """Sets the query_execution_error of this SearchStructureData.


        :param query_execution_error: The query_execution_error of this SearchStructureData.  # noqa: E501
        :type: str
        """

        self._query_execution_error = query_execution_error

    @property
    def all_structure_data(self):
        """Gets the all_structure_data of this SearchStructureData.  # noqa: E501


        :return: The all_structure_data of this SearchStructureData.  # noqa: E501
        :rtype: list[SampleStructureData]
        """
        return self._all_structure_data

    @all_structure_data.setter
    def all_structure_data(self, all_structure_data):
        """Sets the all_structure_data of this SearchStructureData.


        :param all_structure_data: The all_structure_data of this SearchStructureData.  # noqa: E501
        :type: list[SampleStructureData]
        """

        self._all_structure_data = all_structure_data

    @property
    def server_search_results(self):
        """Gets the server_search_results of this SearchStructureData.  # noqa: E501


        :return: The server_search_results of this SearchStructureData.  # noqa: E501
        :rtype: list[SampleStructureData]
        """
        return self._server_search_results

    @server_search_results.setter
    def server_search_results(self, server_search_results):
        """Sets the server_search_results of this SearchStructureData.


        :param server_search_results: The server_search_results of this SearchStructureData.  # noqa: E501
        :type: list[SampleStructureData]
        """

        self._server_search_results = server_search_results

    @property
    def first_filtered_data(self):
        """Gets the first_filtered_data of this SearchStructureData.  # noqa: E501


        :return: The first_filtered_data of this SearchStructureData.  # noqa: E501
        :rtype: list[SampleStructureData]
        """
        return self._first_filtered_data

    @first_filtered_data.setter
    def first_filtered_data(self, first_filtered_data):
        """Sets the first_filtered_data of this SearchStructureData.


        :param first_filtered_data: The first_filtered_data of this SearchStructureData.  # noqa: E501
        :type: list[SampleStructureData]
        """

        self._first_filtered_data = first_filtered_data

    @property
    def search_type(self):
        """Gets the search_type of this SearchStructureData.  # noqa: E501


        :return: The search_type of this SearchStructureData.  # noqa: E501
        :rtype: str
        """
        return self._search_type

    @search_type.setter
    def search_type(self, search_type):
        """Sets the search_type of this SearchStructureData.


        :param search_type: The search_type of this SearchStructureData.  # noqa: E501
        :type: str
        """
        allowed_values = ["SIMILARITY", "SUBSTRUCTURE", "EXACT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                search_type not in allowed_values):
            raise ValueError(
                "Invalid value for `search_type` ({0}), must be one of {1}"  # noqa: E501
                .format(search_type, allowed_values)
            )

        self._search_type = search_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchStructureData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchStructureData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchStructureData):
            return True

        return self.to_dict() != other.to_dict()
