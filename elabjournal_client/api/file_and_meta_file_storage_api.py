# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from elabjournal_client.api_client import ApiClient


class FileAndMetaFileStorageApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def file_convert_from_tiff_to_png_data_string(self, file_id, **kwargs):  # noqa: E501
        """Get a tiff file by file id from your current group, and converts it to a png data string  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_convert_from_tiff_to_png_data_string(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str new_width: New width for redimension. default 0 = no redimension
        :param str x_requested_with: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_convert_from_tiff_to_png_data_string_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_convert_from_tiff_to_png_data_string_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def file_convert_from_tiff_to_png_data_string_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """Get a tiff file by file id from your current group, and converts it to a png data string  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_convert_from_tiff_to_png_data_string_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str new_width: New width for redimension. default 0 = no redimension
        :param str x_requested_with: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id', 'expand', 'view_id', 'view_columns', 'new_width', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_convert_from_tiff_to_png_data_string" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `file_convert_from_tiff_to_png_data_string`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'new_width' in params:
            query_params.append(('newWidth', params['new_width']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/hl7-v2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/files/{fileID}/convertFromTiffToPngDataString', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_delete_file_by_id(self, file_id, **kwargs):  # noqa: E501
        """Delete a file by id from your current group  # noqa: E501

        Deletes a file from the file storage. The file will still be available for download if linked to a sample.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_delete_file_by_id(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_delete_file_by_id_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_delete_file_by_id_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def file_delete_file_by_id_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """Delete a file by id from your current group  # noqa: E501

        Deletes a file from the file storage. The file will still be available for download if linked to a sample.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_delete_file_by_id_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_delete_file_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `file_delete_file_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/files/{fileID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_get_all_files(self, **kwargs):  # noqa: E501
        """List files  # noqa: E501

        Gets file IDs and other data associated with stored files from your group.  Results can be filtered on file name, folderID and groupID. The file name must be an exact match.   The groupID parameter can be used to extract all records with a specific valid group number.   If left blank, the current active group will be used        $expand values (separate with comma for multiple expands):      * location    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_all_files(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str file_name: Filter files by name
        :param str group_id: Filter files by a group you are a member of
        :param str folder_id: Filter files by folder ID
        :param str user_id: Filter files by userID
        :param str search: Search by (partial) filename. (Minimum search 3 characters)
        :param str x_requested_with: 
        :return: PagedOfFileInStorageLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_get_all_files_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.file_get_all_files_with_http_info(**kwargs)  # noqa: E501
            return data

    def file_get_all_files_with_http_info(self, **kwargs):  # noqa: E501
        """List files  # noqa: E501

        Gets file IDs and other data associated with stored files from your group.  Results can be filtered on file name, folderID and groupID. The file name must be an exact match.   The groupID parameter can be used to extract all records with a specific valid group number.   If left blank, the current active group will be used        $expand values (separate with comma for multiple expands):      * location    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_all_files_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str file_name: Filter files by name
        :param str group_id: Filter files by a group you are a member of
        :param str folder_id: Filter files by folder ID
        :param str user_id: Filter files by userID
        :param str search: Search by (partial) filename. (Minimum search 3 characters)
        :param str x_requested_with: 
        :return: PagedOfFileInStorageLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'file_name', 'group_id', 'folder_id', 'user_id', 'search', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_all_files" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'group_id' in params:
            query_params.append(('groupID', params['group_id']))  # noqa: E501
        if 'folder_id' in params:
            query_params.append(('folderID', params['folder_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userID', params['user_id']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfFileInStorageLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_get_file_by_id(self, file_id, **kwargs):  # noqa: E501
        """Get a file by file id from your current group  # noqa: E501

        This call returns the version of the file associated with the fileID passed as parameter.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_file_by_id(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_get_file_by_id_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_get_file_by_id_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def file_get_file_by_id_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """Get a file by file id from your current group  # noqa: E501

        This call returns the version of the file associated with the fileID passed as parameter.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_file_by_id_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_file_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `file_get_file_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/files/{fileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_get_file_by_id_for_group(self, group_id, file_id, **kwargs):  # noqa: E501
        """Get a file by group and file id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_file_by_id_for_group(group_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_get_file_by_id_for_group_with_http_info(group_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_get_file_by_id_for_group_with_http_info(group_id, file_id, **kwargs)  # noqa: E501
            return data

    def file_get_file_by_id_for_group_with_http_info(self, group_id, file_id, **kwargs):  # noqa: E501
        """Get a file by group and file id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_file_by_id_for_group_with_http_info(group_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'file_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_file_by_id_for_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `file_get_file_by_id_for_group`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `file_get_file_by_id_for_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/groups/{groupID}/files/{fileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_get_latest_file_by_id(self, file_id, **kwargs):  # noqa: E501
        """Get a file by file id from your current group  # noqa: E501

        This call returns the latest version of the file within its lineage, regardless of the actual fileID passed as parameter.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_latest_file_by_id(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_get_latest_file_by_id_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_get_latest_file_by_id_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def file_get_latest_file_by_id_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """Get a file by file id from your current group  # noqa: E501

        This call returns the latest version of the file within its lineage, regardless of the actual fileID passed as parameter.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_latest_file_by_id_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_latest_file_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `file_get_latest_file_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/files/latest/{fileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_get_meta_file_by_id(self, meta_file_id, **kwargs):  # noqa: E501
        """Get a meta file by file id from your current group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_meta_file_by_id(meta_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meta_file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_get_meta_file_by_id_with_http_info(meta_file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_get_meta_file_by_id_with_http_info(meta_file_id, **kwargs)  # noqa: E501
            return data

    def file_get_meta_file_by_id_with_http_info(self, meta_file_id, **kwargs):  # noqa: E501
        """Get a meta file by file id from your current group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_meta_file_by_id_with_http_info(meta_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int meta_file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['meta_file_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_meta_file_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'meta_file_id' is set
        if self.api_client.client_side_validation and ('meta_file_id' not in params or
                                                       params['meta_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `meta_file_id` when calling `file_get_meta_file_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'meta_file_id' in params:
            path_params['metaFileID'] = params['meta_file_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/metaFiles/{metaFileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_get_meta_file_by_id_for_group(self, group_id, meta_file_id, **kwargs):  # noqa: E501
        """Get a meta file by group and file id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_meta_file_by_id_for_group(group_id, meta_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int meta_file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_get_meta_file_by_id_for_group_with_http_info(group_id, meta_file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.file_get_meta_file_by_id_for_group_with_http_info(group_id, meta_file_id, **kwargs)  # noqa: E501
            return data

    def file_get_meta_file_by_id_for_group_with_http_info(self, group_id, meta_file_id, **kwargs):  # noqa: E501
        """Get a meta file by group and file id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_get_meta_file_by_id_for_group_with_http_info(group_id, meta_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int group_id: (required)
        :param int meta_file_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'meta_file_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_get_meta_file_by_id_for_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `file_get_meta_file_by_id_for_group`")  # noqa: E501
        # verify the required parameter 'meta_file_id' is set
        if self.api_client.client_side_validation and ('meta_file_id' not in params or
                                                       params['meta_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `meta_file_id` when calling `file_get_meta_file_by_id_for_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501
        if 'meta_file_id' in params:
            path_params['metaFileID'] = params['meta_file_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/groups/{groupID}/metaFiles/{metaFileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_upload(self, file_name, **kwargs):  # noqa: E501
        """Upload files to the server  # noqa: E501

        Files can be a maximum size of 250 mb. Currently only supports local storage. A valid URL (e.g. https://www.abc.com/myfile.jpg, not www.abc.com/myfile.jpg) can be given as a optional parameter which will be used to fetch a file from the URL provided instead of uploading a file directly from local machine. On Elabjournal file storage browser your files will appear in the outside of a folder unless the folderID is provided.Swagger cannot be used for testing file uploads, please use another external tool (e.g. Postman).  Example url local file: https://www.elabjournal.com/api/v1/files?fileName=testfile.jpg   Example url remote file: https://www.elabjournal.com/api/v1/files?fileName=testfile.jpg&url=https://picsum.photos/200  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_upload(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: (required)
        :param str url:
        :param int folder_id:
        :param str x_requested_with: 
        :return: FileInStorage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_upload_with_http_info(file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.file_upload_with_http_info(file_name, **kwargs)  # noqa: E501
            return data

    def file_upload_with_http_info(self, file_name, **kwargs):  # noqa: E501
        """Upload files to the server  # noqa: E501

        Files can be a maximum size of 250 mb. Currently only supports local storage. A valid URL (e.g. https://www.abc.com/myfile.jpg, not www.abc.com/myfile.jpg) can be given as a optional parameter which will be used to fetch a file from the URL provided instead of uploading a file directly from local machine. On Elabjournal file storage browser your files will appear in the outside of a folder unless the folderID is provided.Swagger cannot be used for testing file uploads, please use another external tool (e.g. Postman).  Example url local file: https://www.elabjournal.com/api/v1/files?fileName=testfile.jpg   Example url remote file: https://www.elabjournal.com/api/v1/files?fileName=testfile.jpg&url=https://picsum.photos/200  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_upload_with_http_info(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: (required)
        :param str url:
        :param int folder_id:
        :param str x_requested_with: 
        :return: FileInStorage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'url', 'folder_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if self.api_client.client_side_validation and ('file_name' not in params or
                                                       params['file_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_name` when calling `file_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'folder_id' in params:
            query_params.append(('folderID', params['folder_id']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInStorage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_upload_meta_file(self, file_name, **kwargs):  # noqa: E501
        """Upload metafiles to the server  # noqa: E501

        Files can be a maximum size of 250 mb. Currently only supports local storage. A valid URL (e.g. https://www.abc.com/myfile.jpg, not wwww.abc.com/myfile.jpg) can be given as a optional parameter which will be used to fetch a file from the URL provided instead of uploading a file directly from local machine. Note that Swagger cannot be used for testing file uploads, please use another external tool (e.g. Postman).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_upload_meta_file(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: (required)
        :param str description:
        :param str url:
        :param str x_requested_with: 
        :return: MetaFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_upload_meta_file_with_http_info(file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.file_upload_meta_file_with_http_info(file_name, **kwargs)  # noqa: E501
            return data

    def file_upload_meta_file_with_http_info(self, file_name, **kwargs):  # noqa: E501
        """Upload metafiles to the server  # noqa: E501

        Files can be a maximum size of 250 mb. Currently only supports local storage. A valid URL (e.g. https://www.abc.com/myfile.jpg, not wwww.abc.com/myfile.jpg) can be given as a optional parameter which will be used to fetch a file from the URL provided instead of uploading a file directly from local machine. Note that Swagger cannot be used for testing file uploads, please use another external tool (e.g. Postman).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_upload_meta_file_with_http_info(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: (required)
        :param str description:
        :param str url:
        :param str x_requested_with: 
        :return: MetaFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'description', 'url', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_upload_meta_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if self.api_client.client_side_validation and ('file_name' not in params or
                                                       params['file_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_name` when calling `file_upload_meta_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/metaFiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetaFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def file_upload_workstation_file(self, file_name, total_chunks, chunk, chunk_hash, file_identifier, **kwargs):  # noqa: E501
        """Upload files to a staging area  # noqa: E501

        Files uploaded with this API call will be stored in a general experiment storage space accessible throughout the application and can be later transferred to either an experiment or moved into the file storage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_upload_workstation_file(file_name, total_chunks, chunk, chunk_hash, file_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: (required)
        :param int total_chunks: (required)
        :param int chunk: (required)
        :param str chunk_hash: (required)
        :param str file_identifier: (required)
        :param str x_requested_with: 
        :return: CreateWorkstationFileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.file_upload_workstation_file_with_http_info(file_name, total_chunks, chunk, chunk_hash, file_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.file_upload_workstation_file_with_http_info(file_name, total_chunks, chunk, chunk_hash, file_identifier, **kwargs)  # noqa: E501
            return data

    def file_upload_workstation_file_with_http_info(self, file_name, total_chunks, chunk, chunk_hash, file_identifier, **kwargs):  # noqa: E501
        """Upload files to a staging area  # noqa: E501

        Files uploaded with this API call will be stored in a general experiment storage space accessible throughout the application and can be later transferred to either an experiment or moved into the file storage.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.file_upload_workstation_file_with_http_info(file_name, total_chunks, chunk, chunk_hash, file_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: (required)
        :param int total_chunks: (required)
        :param int chunk: (required)
        :param str chunk_hash: (required)
        :param str file_identifier: (required)
        :param str x_requested_with: 
        :return: CreateWorkstationFileDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name', 'total_chunks', 'chunk', 'chunk_hash', 'file_identifier', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method file_upload_workstation_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if self.api_client.client_side_validation and ('file_name' not in params or
                                                       params['file_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_name` when calling `file_upload_workstation_file`")  # noqa: E501
        # verify the required parameter 'total_chunks' is set
        if self.api_client.client_side_validation and ('total_chunks' not in params or
                                                       params['total_chunks'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `total_chunks` when calling `file_upload_workstation_file`")  # noqa: E501
        # verify the required parameter 'chunk' is set
        if self.api_client.client_side_validation and ('chunk' not in params or
                                                       params['chunk'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chunk` when calling `file_upload_workstation_file`")  # noqa: E501
        # verify the required parameter 'chunk_hash' is set
        if self.api_client.client_side_validation and ('chunk_hash' not in params or
                                                       params['chunk_hash'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chunk_hash` when calling `file_upload_workstation_file`")  # noqa: E501
        # verify the required parameter 'file_identifier' is set
        if self.api_client.client_side_validation and ('file_identifier' not in params or
                                                       params['file_identifier'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_identifier` when calling `file_upload_workstation_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'total_chunks' in params:
            query_params.append(('totalChunks', params['total_chunks']))  # noqa: E501
        if 'chunk' in params:
            query_params.append(('chunk', params['chunk']))  # noqa: E501
        if 'chunk_hash' in params:
            query_params.append(('chunkHash', params['chunk_hash']))  # noqa: E501
        if 'file_identifier' in params:
            query_params.append(('fileIdentifier', params['file_identifier']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workstationFiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateWorkstationFileDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
