# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from elabjournal_client.api_client import ApiClient


class ExperimentSectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def experiment_section_add_section_samples(self, exp_journal_id, sample_ids, **kwargs):  # noqa: E501
        """Add samples to a SAMPLESIN or SAMPLESOUT section  # noqa: E501

        This call will also add archived samples.    The request body of this call should contain a JSON array with the sample IDs.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_add_section_samples(exp_journal_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_add_section_samples_with_http_info(exp_journal_id, sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_add_section_samples_with_http_info(exp_journal_id, sample_ids, **kwargs)  # noqa: E501
            return data

    def experiment_section_add_section_samples_with_http_info(self, exp_journal_id, sample_ids, **kwargs):  # noqa: E501
        """Add samples to a SAMPLESIN or SAMPLESOUT section  # noqa: E501

        This call will also add archived samples.    The request body of this call should contain a JSON array with the sample IDs.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_add_section_samples_with_http_info(exp_journal_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[int] sample_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'sample_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_add_section_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_add_section_samples`")  # noqa: E501
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `experiment_section_add_section_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/samples', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_archive_section(self, exp_journal_id, **kwargs):  # noqa: E501
        """Archives an experiment section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_archive_section(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_archive_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_archive_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_archive_section_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Archives an experiment section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_archive_section_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_archive_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_archive_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_change_section_position(self, exp_journal_id, position, **kwargs):  # noqa: E501
        """Changes the position of the section within the experiment  # noqa: E501

        The position is a 0-based integer where 0 is the top position within the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_change_section_position(exp_journal_id, position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int position: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_change_section_position_with_http_info(exp_journal_id, position, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_change_section_position_with_http_info(exp_journal_id, position, **kwargs)  # noqa: E501
            return data

    def experiment_section_change_section_position_with_http_info(self, exp_journal_id, position, **kwargs):  # noqa: E501
        """Changes the position of the section within the experiment  # noqa: E501

        The position is a 0-based integer where 0 is the top position within the experiment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_change_section_position_with_http_info(exp_journal_id, position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int position: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'position', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_change_section_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_change_section_position`")  # noqa: E501
        # verify the required parameter 'position' is set
        if self.api_client.client_side_validation and ('position' not in params or
                                                       params['position'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `position` when calling `experiment_section_change_section_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'position' in params:
            body_params = params['position']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/position', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_copy_experiment_section(self, exp_journal_id, **kwargs):  # noqa: E501
        """Copies experiment section  # noqa: E501

        This call copies a section of an experiment. The default experimentID is the ID of the experiment in which the section resides, to copy a section into another experiment provide the optional experimentID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_copy_experiment_section(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str section_header: The header of the copied section, if left blank the header will be the original with 'Copy of' added in front of it.
        :param str experiment_id: The experiment where this section should be copied to, leave blank for the provided sections experiment ID.
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_copy_experiment_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_copy_experiment_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_copy_experiment_section_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Copies experiment section  # noqa: E501

        This call copies a section of an experiment. The default experimentID is the ID of the experiment in which the section resides, to copy a section into another experiment provide the optional experimentID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_copy_experiment_section_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str section_header: The header of the copied section, if left blank the header will be the original with 'Copy of' added in front of it.
        :param str experiment_id: The experiment where this section should be copied to, leave blank for the provided sections experiment ID.
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'expand', 'view_id', 'view_columns', 'section_header', 'experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_copy_experiment_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_copy_experiment_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'section_header' in params:
            query_params.append(('sectionHeader', params['section_header']))  # noqa: E501
        if 'experiment_id' in params:
            query_params.append(('experimentID', params['experiment_id']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_create_blank_oos_file(self, exp_journal_id, oos_section, **kwargs):  # noqa: E501
        """Create a blank OOS file of a given type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_create_blank_oos_file(exp_journal_id, oos_section, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param OosSection oos_section: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_create_blank_oos_file_with_http_info(exp_journal_id, oos_section, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_create_blank_oos_file_with_http_info(exp_journal_id, oos_section, **kwargs)  # noqa: E501
            return data

    def experiment_section_create_blank_oos_file_with_http_info(self, exp_journal_id, oos_section, **kwargs):  # noqa: E501
        """Create a blank OOS file of a given type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_create_blank_oos_file_with_http_info(exp_journal_id, oos_section, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param OosSection oos_section: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'oos_section', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_create_blank_oos_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_create_blank_oos_file`")  # noqa: E501
        # verify the required parameter 'oos_section' is set
        if self.api_client.client_side_validation and ('oos_section' not in params or
                                                       params['oos_section'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `oos_section` when calling `experiment_section_create_blank_oos_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'oos_section' in params:
            body_params = params['oos_section']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/oos/file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_create_section(self, experiment_id, section, **kwargs):  # noqa: E501
        """Create a new, empty section in an experiment  # noqa: E501

        Use the `order` property to specify the position of the new section within the experiment. This is a a 0-based integer where 0 is the top position within the experiment. If you omit this property the section is appended at the bottom.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_create_section(experiment_id, section, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param ExpJournalNew section: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_create_section_with_http_info(experiment_id, section, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_create_section_with_http_info(experiment_id, section, **kwargs)  # noqa: E501
            return data

    def experiment_section_create_section_with_http_info(self, experiment_id, section, **kwargs):  # noqa: E501
        """Create a new, empty section in an experiment  # noqa: E501

        Use the `order` property to specify the position of the new section within the experiment. This is a a 0-based integer where 0 is the top position within the experiment. If you omit this property the section is appended at the bottom.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_create_section_with_http_info(experiment_id, section, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param ExpJournalNew section: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'section', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_create_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_create_section`")  # noqa: E501
        # verify the required parameter 'section' is set
        if self.api_client.client_side_validation and ('section' not in params or
                                                       params['section'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section` when calling `experiment_section_create_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'section' in params:
            body_params = params['section']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_create_section_meta(self, exp_journal_id, section_meta, **kwargs):  # noqa: E501
        """Create or update meta data in a section  # noqa: E501

        This call will add the meta data if the name of the meta doesn't exist yet. If the name exists the associated meta data will be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_create_section_meta(exp_journal_id, section_meta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param ExpJournalMetaNew section_meta: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_create_section_meta_with_http_info(exp_journal_id, section_meta, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_create_section_meta_with_http_info(exp_journal_id, section_meta, **kwargs)  # noqa: E501
            return data

    def experiment_section_create_section_meta_with_http_info(self, exp_journal_id, section_meta, **kwargs):  # noqa: E501
        """Create or update meta data in a section  # noqa: E501

        This call will add the meta data if the name of the meta doesn't exist yet. If the name exists the associated meta data will be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_create_section_meta_with_http_info(exp_journal_id, section_meta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param ExpJournalMetaNew section_meta: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'section_meta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_create_section_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_create_section_meta`")  # noqa: E501
        # verify the required parameter 'section_meta' is set
        if self.api_client.client_side_validation and ('section_meta' not in params or
                                                       params['section_meta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_meta` when calling `experiment_section_create_section_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'section_meta' in params:
            body_params = params['section_meta']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/meta', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_create_section_meta2(self, exp_journal_id, section_meta, **kwargs):  # noqa: E501
        """Create or update meta data in a section  # noqa: E501

        This call will add the meta data if the name of the meta doesn't exist yet. If the name exists the associated meta data will be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_create_section_meta2(exp_journal_id, section_meta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param ExpJournalMetaNew section_meta: (required)
        :param str x_requested_with: 
        :return: ExpJournalMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_create_section_meta2_with_http_info(exp_journal_id, section_meta, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_create_section_meta2_with_http_info(exp_journal_id, section_meta, **kwargs)  # noqa: E501
            return data

    def experiment_section_create_section_meta2_with_http_info(self, exp_journal_id, section_meta, **kwargs):  # noqa: E501
        """Create or update meta data in a section  # noqa: E501

        This call will add the meta data if the name of the meta doesn't exist yet. If the name exists the associated meta data will be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_create_section_meta2_with_http_info(exp_journal_id, section_meta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param ExpJournalMetaNew section_meta: (required)
        :param str x_requested_with: 
        :return: ExpJournalMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'section_meta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_create_section_meta2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_create_section_meta2`")  # noqa: E501
        # verify the required parameter 'section_meta' is set
        if self.api_client.client_side_validation and ('section_meta' not in params or
                                                       params['section_meta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_meta` when calling `experiment_section_create_section_meta2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'section_meta' in params:
            body_params = params['section_meta']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/meta', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpJournalMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_delete_section_file(self, experiment_file_id, exp_journal_id, **kwargs):  # noqa: E501
        """Remove a file from a FILE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_file(experiment_file_id, exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_delete_section_file_with_http_info(experiment_file_id, exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_delete_section_file_with_http_info(experiment_file_id, exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_delete_section_file_with_http_info(self, experiment_file_id, exp_journal_id, **kwargs):  # noqa: E501
        """Remove a file from a FILE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_file_with_http_info(experiment_file_id, exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_file_id', 'exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_delete_section_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_file_id' is set
        if self.api_client.client_side_validation and ('experiment_file_id' not in params or
                                                       params['experiment_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_id` when calling `experiment_section_delete_section_file`")  # noqa: E501
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_delete_section_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_file_id' in params:
            path_params['experimentFileID'] = params['experiment_file_id']  # noqa: E501
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/files/{experimentFileID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_delete_section_files(self, exp_journal_id, experiment_file_ids, **kwargs):  # noqa: E501
        """Remove multiple files from a FILE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_files(exp_journal_id, experiment_file_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[int] experiment_file_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_delete_section_files_with_http_info(exp_journal_id, experiment_file_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_delete_section_files_with_http_info(exp_journal_id, experiment_file_ids, **kwargs)  # noqa: E501
            return data

    def experiment_section_delete_section_files_with_http_info(self, exp_journal_id, experiment_file_ids, **kwargs):  # noqa: E501
        """Remove multiple files from a FILE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_files_with_http_info(exp_journal_id, experiment_file_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[int] experiment_file_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_file_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_delete_section_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_delete_section_files`")  # noqa: E501
        # verify the required parameter 'experiment_file_ids' is set
        if self.api_client.client_side_validation and ('experiment_file_ids' not in params or
                                                       params['experiment_file_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_ids` when calling `experiment_section_delete_section_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'experiment_file_ids' in params:
            body_params = params['experiment_file_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/files', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_delete_section_image(self, experiment_file_id, exp_journal_id, **kwargs):  # noqa: E501
        """Remove an image from an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_image(experiment_file_id, exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_delete_section_image_with_http_info(experiment_file_id, exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_delete_section_image_with_http_info(experiment_file_id, exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_delete_section_image_with_http_info(self, experiment_file_id, exp_journal_id, **kwargs):  # noqa: E501
        """Remove an image from an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_image_with_http_info(experiment_file_id, exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_file_id', 'exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_delete_section_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_file_id' is set
        if self.api_client.client_side_validation and ('experiment_file_id' not in params or
                                                       params['experiment_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_id` when calling `experiment_section_delete_section_image`")  # noqa: E501
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_delete_section_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_file_id' in params:
            path_params['experimentFileID'] = params['experiment_file_id']  # noqa: E501
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/images/{experimentFileID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_delete_section_images(self, exp_journal_id, experiment_file_ids, **kwargs):  # noqa: E501
        """Remove multiple images from an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_images(exp_journal_id, experiment_file_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[int] experiment_file_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_delete_section_images_with_http_info(exp_journal_id, experiment_file_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_delete_section_images_with_http_info(exp_journal_id, experiment_file_ids, **kwargs)  # noqa: E501
            return data

    def experiment_section_delete_section_images_with_http_info(self, exp_journal_id, experiment_file_ids, **kwargs):  # noqa: E501
        """Remove multiple images from an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_images_with_http_info(exp_journal_id, experiment_file_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[int] experiment_file_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_file_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_delete_section_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_delete_section_images`")  # noqa: E501
        # verify the required parameter 'experiment_file_ids' is set
        if self.api_client.client_side_validation and ('experiment_file_ids' not in params or
                                                       params['experiment_file_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_ids` when calling `experiment_section_delete_section_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'experiment_file_ids' in params:
            body_params = params['experiment_file_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/images', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_delete_section_samples(self, exp_journal_id, sample_ids, **kwargs):  # noqa: E501
        """Remove samples from a SAMPLESIN or SAMPLESOUT section  # noqa: E501

        The request body of this call should contain a JSON array with the sample IDs which should be removed from the section.    You can add the boolean query parameter `archiveSamples` to this call to archive the samples as well.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_samples(exp_journal_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[int] sample_ids: (required)
        :param bool archive_samples:
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_delete_section_samples_with_http_info(exp_journal_id, sample_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_delete_section_samples_with_http_info(exp_journal_id, sample_ids, **kwargs)  # noqa: E501
            return data

    def experiment_section_delete_section_samples_with_http_info(self, exp_journal_id, sample_ids, **kwargs):  # noqa: E501
        """Remove samples from a SAMPLESIN or SAMPLESOUT section  # noqa: E501

        The request body of this call should contain a JSON array with the sample IDs which should be removed from the section.    You can add the boolean query parameter `archiveSamples` to this call to archive the samples as well.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_delete_section_samples_with_http_info(exp_journal_id, sample_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[int] sample_ids: (required)
        :param bool archive_samples:
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'sample_ids', 'archive_samples', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_delete_section_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_delete_section_samples`")  # noqa: E501
        # verify the required parameter 'sample_ids' is set
        if self.api_client.client_side_validation and ('sample_ids' not in params or
                                                       params['sample_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sample_ids` when calling `experiment_section_delete_section_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'archive_samples' in params:
            query_params.append(('archiveSamples', params['archive_samples']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sample_ids' in params:
            body_params = params['sample_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/samples', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_download_marvin_js_image(self, exp_journal_id, **kwargs):  # noqa: E501
        """Download the image of a MARVINJS section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_marvin_js_image(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_download_marvin_js_image_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_download_marvin_js_image_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_download_marvin_js_image_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Download the image of a MARVINJS section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_marvin_js_image_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_download_marvin_js_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_download_marvin_js_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/marvinjs/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_download_section_canvas_image(self, exp_journal_id, **kwargs):  # noqa: E501
        """Download the canvas image from a CANVAS section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_canvas_image(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int max_width:
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_download_section_canvas_image_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_download_section_canvas_image_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_download_section_canvas_image_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Download the canvas image from a CANVAS section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_canvas_image_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int max_width:
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'max_width', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_download_section_canvas_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_download_section_canvas_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'max_width' in params:
            query_params.append(('maxWidth', params['max_width']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/canvas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_download_section_excel_file(self, exp_journal_id, **kwargs):  # noqa: E501
        """Download the excel file from an EXCEL section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_excel_file(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_download_section_excel_file_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_download_section_excel_file_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_download_section_excel_file_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Download the excel file from an EXCEL section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_excel_file_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_download_section_excel_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_download_section_excel_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/excel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_download_section_excel_preview(self, exp_journal_id, **kwargs):  # noqa: E501
        """Download the preview image from an EXCEL section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_excel_preview(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_download_section_excel_preview_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_download_section_excel_preview_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_download_section_excel_preview_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Download the preview image from an EXCEL section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_excel_preview_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_download_section_excel_preview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_download_section_excel_preview`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/excel/preview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_download_section_file(self, experiment_file_id, exp_journal_id, **kwargs):  # noqa: E501
        """Download a file from a FILE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_file(experiment_file_id, exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_download_section_file_with_http_info(experiment_file_id, exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_download_section_file_with_http_info(experiment_file_id, exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_download_section_file_with_http_info(self, experiment_file_id, exp_journal_id, **kwargs):  # noqa: E501
        """Download a file from a FILE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_file_with_http_info(experiment_file_id, exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_file_id', 'exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_download_section_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_file_id' is set
        if self.api_client.client_side_validation and ('experiment_file_id' not in params or
                                                       params['experiment_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_id` when calling `experiment_section_download_section_file`")  # noqa: E501
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_download_section_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_file_id' in params:
            path_params['experimentFileID'] = params['experiment_file_id']  # noqa: E501
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/files/{experimentFileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_download_section_image(self, experiment_file_id, exp_journal_id, **kwargs):  # noqa: E501
        """Download an image from an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_image(experiment_file_id, exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param int max_width:
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_download_section_image_with_http_info(experiment_file_id, exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_download_section_image_with_http_info(experiment_file_id, exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_download_section_image_with_http_info(self, experiment_file_id, exp_journal_id, **kwargs):  # noqa: E501
        """Download an image from an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_image_with_http_info(experiment_file_id, exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param int max_width:
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_file_id', 'exp_journal_id', 'max_width', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_download_section_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_file_id' is set
        if self.api_client.client_side_validation and ('experiment_file_id' not in params or
                                                       params['experiment_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_id` when calling `experiment_section_download_section_image`")  # noqa: E501
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_download_section_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_file_id' in params:
            path_params['experimentFileID'] = params['experiment_file_id']  # noqa: E501
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'max_width' in params:
            query_params.append(('maxWidth', params['max_width']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/images/{experimentFileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_download_section_oos_preview(self, exp_journal_id, oos_extension, **kwargs):  # noqa: E501
        """Download the preview image from an OOS section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_oos_preview(exp_journal_id, oos_extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str oos_extension: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_download_section_oos_preview_with_http_info(exp_journal_id, oos_extension, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_download_section_oos_preview_with_http_info(exp_journal_id, oos_extension, **kwargs)  # noqa: E501
            return data

    def experiment_section_download_section_oos_preview_with_http_info(self, exp_journal_id, oos_extension, **kwargs):  # noqa: E501
        """Download the preview image from an OOS section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_download_section_oos_preview_with_http_info(exp_journal_id, oos_extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str oos_extension: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'oos_extension', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_download_section_oos_preview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_download_section_oos_preview`")  # noqa: E501
        # verify the required parameter 'oos_extension' is set
        if self.api_client.client_side_validation and ('oos_extension' not in params or
                                                       params['oos_extension'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `oos_extension` when calling `experiment_section_download_section_oos_preview`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'oos_extension' in params:
            query_params.append(('oosExtension', params['oos_extension']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/oos/preview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_generate_access_token(self, exp_journal_id, **kwargs):  # noqa: E501
        """Generate an access token for use in oos integration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_generate_access_token(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_generate_access_token_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_generate_access_token_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_generate_access_token_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Generate an access token for use in oos integration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_generate_access_token_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_generate_access_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_generate_access_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/hl7-v2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/oos/access-token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_custom_section_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the custom section information of a CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_custom_section_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_custom_section_info_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_custom_section_info_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_custom_section_info_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the custom section information of a CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_custom_section_info_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_custom_section_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_custom_section_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/customSectionInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_excel_section_oos_link(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the URL to the OOS server for editing an EXCEL section  # noqa: E501

        The link returned in the `url` property enables you to show an Excel editor for the specified section in a web browser.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_excel_section_oos_link(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: OOSLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_excel_section_oos_link_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_excel_section_oos_link_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_excel_section_oos_link_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the URL to the OOS server for editing an EXCEL section  # noqa: E501

        The link returned in the `url` property enables you to show an Excel editor for the specified section in a web browser.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_excel_section_oos_link_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: OOSLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_excel_section_oos_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_excel_section_oos_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/excel/oos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OOSLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_experiment_section(self, exp_journal_id, **kwargs):  # noqa: E501
        """Gets an experiment section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_experiment_section(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: ExpJournalLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_experiment_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_experiment_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_experiment_section_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Gets an experiment section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_experiment_section_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: ExpJournalLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_experiment_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_experiment_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpJournalLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_experiment_sections(self, experiment_id, **kwargs):  # noqa: E501
        """Get experiment sections  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_experiment_sections(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str archived: Filter by archived or non-archived sections.
        :param str x_requested_with: 
        :return: PagedOfExpJournalLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_experiment_sections_with_http_info(experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_experiment_sections_with_http_info(experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_experiment_sections_with_http_info(self, experiment_id, **kwargs):  # noqa: E501
        """Get experiment sections  # noqa: E501

        If the archived parameter isn't set, archived=false is automatically implied.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_experiment_sections_with_http_info(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str archived: Filter by archived or non-archived sections.
        :param str x_requested_with: 
        :return: PagedOfExpJournalLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'archived', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_experiment_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_get_experiment_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'archived' in params:
            query_params.append(('archived', params['archived']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExpJournalLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_latest_oos_file_id(self, exp_journal_id, oos_latest_file_id, **kwargs):  # noqa: E501
        """Get latest oos file id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_latest_oos_file_id(exp_journal_id, oos_latest_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param OosLatestFileID oos_latest_file_id: (required)
        :param str x_requested_with: 
        :return: OosLatestFileIDAndAccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_latest_oos_file_id_with_http_info(exp_journal_id, oos_latest_file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_latest_oos_file_id_with_http_info(exp_journal_id, oos_latest_file_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_latest_oos_file_id_with_http_info(self, exp_journal_id, oos_latest_file_id, **kwargs):  # noqa: E501
        """Get latest oos file id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_latest_oos_file_id_with_http_info(exp_journal_id, oos_latest_file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param OosLatestFileID oos_latest_file_id: (required)
        :param str x_requested_with: 
        :return: OosLatestFileIDAndAccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'oos_latest_file_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_latest_oos_file_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_latest_oos_file_id`")  # noqa: E501
        # verify the required parameter 'oos_latest_file_id' is set
        if self.api_client.client_side_validation and ('oos_latest_file_id' not in params or
                                                       params['oos_latest_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `oos_latest_file_id` when calling `experiment_section_get_latest_oos_file_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'oos_latest_file_id' in params:
            body_params = params['oos_latest_file_id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/oos/getlatestfileid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OosLatestFileIDAndAccessToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_marvin_js_image_as_data_url(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the image of a MARVINJS section as a data URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_marvin_js_image_as_data_url(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_marvin_js_image_as_data_url_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_marvin_js_image_as_data_url_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_marvin_js_image_as_data_url_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the image of a MARVINJS section as a data URL  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_marvin_js_image_as_data_url_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_marvin_js_image_as_data_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_marvin_js_image_as_data_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/marvinjs/image/dataURL', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_marvin_js_reaction_table_content(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the marvin js reaction from an experiment section ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_marvin_js_reaction_table_content(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: list[ExpReactionTableData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_marvin_js_reaction_table_content_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_marvin_js_reaction_table_content_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_marvin_js_reaction_table_content_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the marvin js reaction from an experiment section ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_marvin_js_reaction_table_content_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: list[ExpReactionTableData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_marvin_js_reaction_table_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_marvin_js_reaction_table_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/marvinjs/reaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExpReactionTableData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_marvin_js_structure_data(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the marvin js structure data from an experiment section ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_marvin_js_structure_data(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: SmilesInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_marvin_js_structure_data_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_marvin_js_structure_data_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_marvin_js_structure_data_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the marvin js structure data from an experiment section ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_marvin_js_structure_data_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: SmilesInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_marvin_js_structure_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_marvin_js_structure_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/marvinjs/smiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SmilesInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_oos_link(self, exp_journal_id, oostype, **kwargs):  # noqa: E501
        """Get the URL to the OOS server  # noqa: E501

        This endpoint retrieves the URLs for accessing content on the OOS server from MS word, MS excel and       MS powerpoint experiment sections. The office online addon is required to use this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_oos_link(exp_journal_id, oostype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str oostype: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_oos_link_with_http_info(exp_journal_id, oostype, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_oos_link_with_http_info(exp_journal_id, oostype, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_oos_link_with_http_info(self, exp_journal_id, oostype, **kwargs):  # noqa: E501
        """Get the URL to the OOS server  # noqa: E501

        This endpoint retrieves the URLs for accessing content on the OOS server from MS word, MS excel and       MS powerpoint experiment sections. The office online addon is required to use this endpoint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_oos_link_with_http_info(exp_journal_id, oostype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str oostype: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'oostype', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_oos_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_oos_link`")  # noqa: E501
        # verify the required parameter 'oostype' is set
        if self.api_client.client_side_validation and ('oostype' not in params or
                                                       params['oostype'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `oostype` when calling `experiment_section_get_oos_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'oostype' in params:
            query_params.append(('oostype', params['oostype']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/oos/url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_section_content(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the content from a text section  # noqa: E501

        This call will also return the section's meta data. A PROCEDURE section contains meta data containing the protocol's version ID and its variable values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_content(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: ExpJournalContentAndMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_section_content_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_section_content_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_section_content_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the content from a text section  # noqa: E501

        This call will also return the section's meta data. A PROCEDURE section contains meta data containing the protocol's version ID and its variable values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_content_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: ExpJournalContentAndMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_section_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_section_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpJournalContentAndMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_section_content_as_html(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get a full HTML page from a section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_content_as_html(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_section_content_as_html_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_section_content_as_html_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_section_content_as_html_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get a full HTML page from a section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_content_as_html_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_section_content_as_html" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_section_content_as_html`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_section_data_table(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the content from a DATATABLE section  # noqa: E501

        The contents of the data table is returned in the following format:  ```  [      [\"cell A1 contents\", \"cell B1 contents\"],      [\"cell A2 contents\", \"cell B2 contents\"],      [\"cell A3 contents\", \"cell B3 contents\"]  ]  ```    Note that all values are returned as strings, including numbers.    Empty cells will have a value of \"\", e.g. `[[\"\", \"\", \"123\"]]` will show nothing in cells A1 and B1 and `123` in cell C1.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_data_table(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: list[list[str]]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_section_data_table_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_section_data_table_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_section_data_table_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get the content from a DATATABLE section  # noqa: E501

        The contents of the data table is returned in the following format:  ```  [      [\"cell A1 contents\", \"cell B1 contents\"],      [\"cell A2 contents\", \"cell B2 contents\"],      [\"cell A3 contents\", \"cell B3 contents\"]  ]  ```    Note that all values are returned as strings, including numbers.    Empty cells will have a value of \"\", e.g. `[[\"\", \"\", \"123\"]]` will show nothing in cells A1 and B1 and `123` in cell C1.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_data_table_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: list[list[str]]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_section_data_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_section_data_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/datatable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[list[str]]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_section_file_list(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get file list of a FILE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_file_list(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_section_file_list_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_section_file_list_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_section_file_list_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get file list of a FILE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_file_list_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_section_file_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_section_file_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExperimentFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_section_image_list(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get image list of an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_image_list(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_section_image_list_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_section_image_list_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_section_image_list_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get image list of an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_image_list_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_section_image_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_section_image_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExperimentImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_section_lock_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Check if a text section has been locked  # noqa: E501

        If the section is locked this call will return which user has the lock. If the section isn't locked it will only return the property `hasLock` with a value of `false`.    You can specify the query parameter `ignoreOwnLock` which, when set to true, reports no lock if you own the lock.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_lock_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param bool ignore_own_lock:
        :param str x_requested_with: 
        :return: ExpJournalLockInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_section_lock_info_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_section_lock_info_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_section_lock_info_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Check if a text section has been locked  # noqa: E501

        If the section is locked this call will return which user has the lock. If the section isn't locked it will only return the property `hasLock` with a value of `false`.    You can specify the query parameter `ignoreOwnLock` which, when set to true, reports no lock if you own the lock.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_lock_info_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param bool ignore_own_lock:
        :param str x_requested_with: 
        :return: ExpJournalLockInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'ignore_own_lock', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_section_lock_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_section_lock_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'ignore_own_lock' in params:
            query_params.append(('ignoreOwnLock', params['ignore_own_lock']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/lock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpJournalLockInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_section_meta(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get all meta data in a section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_meta(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExpJournalMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_section_meta_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_section_meta_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_section_meta_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get all meta data in a section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_meta_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExpJournalMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_section_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_section_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExpJournalMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_section_meta_by_name(self, exp_journal_id, name, **kwargs):  # noqa: E501
        """Get meta data from a section by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_meta_by_name(exp_journal_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str name: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ExpJournalMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_section_meta_by_name_with_http_info(exp_journal_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_section_meta_by_name_with_http_info(exp_journal_id, name, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_section_meta_by_name_with_http_info(self, exp_journal_id, name, **kwargs):  # noqa: E501
        """Get meta data from a section by name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_meta_by_name_with_http_info(exp_journal_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str name: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ExpJournalMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'name', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_section_meta_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_section_meta_by_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `experiment_section_get_section_meta_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/meta/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpJournalMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_get_section_samples(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get sample list from a SAMPLESIN or SAMPLESOUT section  # noqa: E501

        This call will also fetch archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_samples(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_get_section_samples_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_get_section_samples_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_get_section_samples_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Get sample list from a SAMPLESIN or SAMPLESOUT section  # noqa: E501

        This call will also fetch archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_get_section_samples_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_get_section_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_get_section_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_is_empty_file_check(self, exp_journal_id, **kwargs):  # noqa: E501
        """Check if the file is empty  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_is_empty_file_check(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str oos_section_type:
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_is_empty_file_check_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_is_empty_file_check_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_is_empty_file_check_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Check if the file is empty  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_is_empty_file_check_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str oos_section_type:
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'oos_section_type', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_is_empty_file_check" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_is_empty_file_check`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'oos_section_type' in params:
            query_params.append(('oosSection.type', params['oos_section_type']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/oos/isemptyfile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_lock_section(self, exp_journal_id, **kwargs):  # noqa: E501
        """Try to lock a text section  # noqa: E501

        Use this call to prevent overwrites of text sections by other users. The lock is valid for 2 minutes but you can extend it by periodically using this call.    This call will only lock sections of types PARAGRAPH, PROCEDURE, COMMENT and NOTES.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_lock_section(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_lock_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_lock_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_lock_section_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Try to lock a text section  # noqa: E501

        Use this call to prevent overwrites of text sections by other users. The lock is valid for 2 minutes but you can extend it by periodically using this call.    This call will only lock sections of types PARAGRAPH, PROCEDURE, COMMENT and NOTES.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_lock_section_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_lock_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_lock_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/lock', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_post_marvin_js_reaction_table_content(self, exp_journal_id, reaction_data_dto, **kwargs):  # noqa: E501
        """Post the marvin js reaction to an experiment section ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_post_marvin_js_reaction_table_content(exp_journal_id, reaction_data_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param MarvinJSReactionDataDTO reaction_data_dto: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_post_marvin_js_reaction_table_content_with_http_info(exp_journal_id, reaction_data_dto, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_post_marvin_js_reaction_table_content_with_http_info(exp_journal_id, reaction_data_dto, **kwargs)  # noqa: E501
            return data

    def experiment_section_post_marvin_js_reaction_table_content_with_http_info(self, exp_journal_id, reaction_data_dto, **kwargs):  # noqa: E501
        """Post the marvin js reaction to an experiment section ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_post_marvin_js_reaction_table_content_with_http_info(exp_journal_id, reaction_data_dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param MarvinJSReactionDataDTO reaction_data_dto: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'reaction_data_dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_post_marvin_js_reaction_table_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_post_marvin_js_reaction_table_content`")  # noqa: E501
        # verify the required parameter 'reaction_data_dto' is set
        if self.api_client.client_side_validation and ('reaction_data_dto' not in params or
                                                       params['reaction_data_dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reaction_data_dto` when calling `experiment_section_post_marvin_js_reaction_table_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reaction_data_dto' in params:
            body_params = params['reaction_data_dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/marvinjs/reaction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_put_section_content(self, exp_journal_id, data, **kwargs):  # noqa: E501
        """Update the content of a text section  # noqa: E501

        You can add meta data to this call. In case of PROCEDURE sections you have to add the protocol's version ID and the values of its variables as meta data. Example:    ```  {      \"contents\": \"[protocol HTML]\"      \"meta\": [          {              \"name\": \"protVersionID\",              \"val\": \"2344\"          },          {              \"name\": \"version\",              \"val\": \"1\"          },          {              \"name\": \"protVar_7869\",              \"val\": \"100\"          },          {              \"name\": \"protVar_7871\",              \"val\": \"0.3\"          }      ]  }  ```    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_put_section_content(exp_journal_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param ExpJournalContentAndMeta data: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_put_section_content_with_http_info(exp_journal_id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_put_section_content_with_http_info(exp_journal_id, data, **kwargs)  # noqa: E501
            return data

    def experiment_section_put_section_content_with_http_info(self, exp_journal_id, data, **kwargs):  # noqa: E501
        """Update the content of a text section  # noqa: E501

        You can add meta data to this call. In case of PROCEDURE sections you have to add the protocol's version ID and the values of its variables as meta data. Example:    ```  {      \"contents\": \"[protocol HTML]\"      \"meta\": [          {              \"name\": \"protVersionID\",              \"val\": \"2344\"          },          {              \"name\": \"version\",              \"val\": \"1\"          },          {              \"name\": \"protVar_7869\",              \"val\": \"100\"          },          {              \"name\": \"protVar_7871\",              \"val\": \"0.3\"          }      ]  }  ```    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_put_section_content_with_http_info(exp_journal_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param ExpJournalContentAndMeta data: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'data', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_put_section_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_put_section_content`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in params or
                                                       params['data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `data` when calling `experiment_section_put_section_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/content', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_put_section_content_html(self, exp_journal_id, html, **kwargs):  # noqa: E501
        """Update a text section's HTML content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_put_section_content_html(exp_journal_id, html, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str html: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_put_section_content_html_with_http_info(exp_journal_id, html, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_put_section_content_html_with_http_info(exp_journal_id, html, **kwargs)  # noqa: E501
            return data

    def experiment_section_put_section_content_html_with_http_info(self, exp_journal_id, html, **kwargs):  # noqa: E501
        """Update a text section's HTML content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_put_section_content_html_with_http_info(exp_journal_id, html, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str html: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'html', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_put_section_content_html" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_put_section_content_html`")  # noqa: E501
        # verify the required parameter 'html' is set
        if self.api_client.client_side_validation and ('html' not in params or
                                                       params['html'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `html` when calling `experiment_section_put_section_content_html`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'html' in params:
            body_params = params['html']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/hl7-v2', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/html', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_put_section_data_table(self, exp_journal_id, table, **kwargs):  # noqa: E501
        """Update the content of a DATATABLE section  # noqa: E501

        Supply the contents of the data table in the body with the following format:  ```  [      [\"cell A1 contents\", \"cell B1 contents\"],      [\"cell A2 contents\", \"cell B2 contents\"],      [\"cell A3 contents\", \"cell B3 contents\"]  ]  ```    Note that all cell values must be strings, even if they're numeric.    The number of columns must always be equal per row. For example, if you have three rows and three columns then you must supply the values for cells A1..C1, A2..C2 and A3..C3, even if some of those cells are empty.    You can make empty cells by supplying a value of \"\", e.g. `[[\"\", \"\", \"123\"]]` will create a table with one row and three columns where cells A1 and B1 are empty and C3 contains `123`.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_put_section_data_table(exp_journal_id, table, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[list[str]] table: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_put_section_data_table_with_http_info(exp_journal_id, table, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_put_section_data_table_with_http_info(exp_journal_id, table, **kwargs)  # noqa: E501
            return data

    def experiment_section_put_section_data_table_with_http_info(self, exp_journal_id, table, **kwargs):  # noqa: E501
        """Update the content of a DATATABLE section  # noqa: E501

        Supply the contents of the data table in the body with the following format:  ```  [      [\"cell A1 contents\", \"cell B1 contents\"],      [\"cell A2 contents\", \"cell B2 contents\"],      [\"cell A3 contents\", \"cell B3 contents\"]  ]  ```    Note that all cell values must be strings, even if they're numeric.    The number of columns must always be equal per row. For example, if you have three rows and three columns then you must supply the values for cells A1..C1, A2..C2 and A3..C3, even if some of those cells are empty.    You can make empty cells by supplying a value of \"\", e.g. `[[\"\", \"\", \"123\"]]` will create a table with one row and three columns where cells A1 and B1 are empty and C3 contains `123`.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_put_section_data_table_with_http_info(exp_journal_id, table, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param list[list[str]] table: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'table', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_put_section_data_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_put_section_data_table`")  # noqa: E501
        # verify the required parameter 'table' is set
        if self.api_client.client_side_validation and ('table' not in params or
                                                       params['table'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `table` when calling `experiment_section_put_section_data_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'table' in params:
            body_params = params['table']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/datatable', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_restore_oos_file(self, exp_journal_id, file_id, **kwargs):  # noqa: E501
        """Restore OOS section to selected file and retake screenshot  # noqa: E501

        Put previous version of oos file back and recreate a screenshot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_restore_oos_file(exp_journal_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_restore_oos_file_with_http_info(exp_journal_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_restore_oos_file_with_http_info(exp_journal_id, file_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_restore_oos_file_with_http_info(self, exp_journal_id, file_id, **kwargs):  # noqa: E501
        """Restore OOS section to selected file and retake screenshot  # noqa: E501

        Put previous version of oos file back and recreate a screenshot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_restore_oos_file_with_http_info(exp_journal_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int file_id: (required)
        :param str x_requested_with: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'file_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_restore_oos_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_restore_oos_file`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `experiment_section_restore_oos_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/hl7-v2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/oos/restore/{fileID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_restore_section(self, exp_journal_id, **kwargs):  # noqa: E501
        """Restores an archived experiment section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_restore_section(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_restore_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_restore_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_restore_section_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Restores an archived experiment section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_restore_section_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_restore_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_restore_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_unlock_section(self, exp_journal_id, **kwargs):  # noqa: E501
        """Try to unlock a text section  # noqa: E501

        Releases a lock on a section that you requested earlier with the PUT call. Note that you can only release your own locks.    If there was no lock on the specified section then this call will also return success.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_unlock_section(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_unlock_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_unlock_section_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_unlock_section_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Try to unlock a text section  # noqa: E501

        Releases a lock on a section that you requested earlier with the PUT call. Note that you can only release your own locks.    If there was no lock on the specified section then this call will also return success.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_unlock_section_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_unlock_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_unlock_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/lock', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_update_experiment_section(self, exp_journal_id, dto, **kwargs):  # noqa: E501
        """Updates an experiment section's general properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_update_experiment_section(exp_journal_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param ExpJournalUpdate dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_update_experiment_section_with_http_info(exp_journal_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_update_experiment_section_with_http_info(exp_journal_id, dto, **kwargs)  # noqa: E501
            return data

    def experiment_section_update_experiment_section_with_http_info(self, exp_journal_id, dto, **kwargs):  # noqa: E501
        """Updates an experiment section's general properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_update_experiment_section_with_http_info(exp_journal_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param ExpJournalUpdate dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_update_experiment_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_update_experiment_section`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `experiment_section_update_experiment_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_update_section_image_description(self, experiment_file_id, exp_journal_id, description, **kwargs):  # noqa: E501
        """Updates the description of an image in an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_update_section_image_description(experiment_file_id, exp_journal_id, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param str description: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_update_section_image_description_with_http_info(experiment_file_id, exp_journal_id, description, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_update_section_image_description_with_http_info(experiment_file_id, exp_journal_id, description, **kwargs)  # noqa: E501
            return data

    def experiment_section_update_section_image_description_with_http_info(self, experiment_file_id, exp_journal_id, description, **kwargs):  # noqa: E501
        """Updates the description of an image in an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_update_section_image_description_with_http_info(experiment_file_id, exp_journal_id, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param str description: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_file_id', 'exp_journal_id', 'description', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_update_section_image_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_file_id' is set
        if self.api_client.client_side_validation and ('experiment_file_id' not in params or
                                                       params['experiment_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_id` when calling `experiment_section_update_section_image_description`")  # noqa: E501
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_update_section_image_description`")  # noqa: E501
        # verify the required parameter 'description' is set
        if self.api_client.client_side_validation and ('description' not in params or
                                                       params['description'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `description` when calling `experiment_section_update_section_image_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_file_id' in params:
            path_params['experimentFileID'] = params['experiment_file_id']  # noqa: E501
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'description' in params:
            body_params = params['description']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/hl7-v2', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/images/{experimentFileID}/description', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_update_section_image_position(self, experiment_file_id, exp_journal_id, position, **kwargs):  # noqa: E501
        """Updates the position of an image in an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_update_section_image_position(experiment_file_id, exp_journal_id, position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param int position: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_update_section_image_position_with_http_info(experiment_file_id, exp_journal_id, position, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_update_section_image_position_with_http_info(experiment_file_id, exp_journal_id, position, **kwargs)  # noqa: E501
            return data

    def experiment_section_update_section_image_position_with_http_info(self, experiment_file_id, exp_journal_id, position, **kwargs):  # noqa: E501
        """Updates the position of an image in an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_update_section_image_position_with_http_info(experiment_file_id, exp_journal_id, position, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param int position: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_file_id', 'exp_journal_id', 'position', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_update_section_image_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_file_id' is set
        if self.api_client.client_side_validation and ('experiment_file_id' not in params or
                                                       params['experiment_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_id` when calling `experiment_section_update_section_image_position`")  # noqa: E501
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_update_section_image_position`")  # noqa: E501
        # verify the required parameter 'position' is set
        if self.api_client.client_side_validation and ('position' not in params or
                                                       params['position'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `position` when calling `experiment_section_update_section_image_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_file_id' in params:
            path_params['experimentFileID'] = params['experiment_file_id']  # noqa: E501
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'position' in params:
            body_params = params['position']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/images/{experimentFileID}/position', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_upload_section_canvas_image(self, exp_journal_id, **kwargs):  # noqa: E501
        """Upload an image to a CANVAS section  # noqa: E501

        This call only accepts PNG files. Use MIME type `image/png`.    Additionally, the uploaded image **must** have a width of 825 pixels.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_upload_section_canvas_image(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_upload_section_canvas_image_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_upload_section_canvas_image_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_upload_section_canvas_image_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Upload an image to a CANVAS section  # noqa: E501

        This call only accepts PNG files. Use MIME type `image/png`.    Additionally, the uploaded image **must** have a width of 825 pixels.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_upload_section_canvas_image_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_upload_section_canvas_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_upload_section_canvas_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/canvas', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_upload_section_excel_file(self, exp_journal_id, **kwargs):  # noqa: E501
        """Upload an Excel file to an EXCEL section  # noqa: E501

        Only `.xlsx` files may be uploaded. The old Excel format `.xls` isn't supported. CUSTOM Office sections are not yet supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_upload_section_excel_file(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_upload_section_excel_file_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_upload_section_excel_file_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_upload_section_excel_file_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Upload an Excel file to an EXCEL section  # noqa: E501

        Only `.xlsx` files may be uploaded. The old Excel format `.xls` isn't supported. CUSTOM Office sections are not yet supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_upload_section_excel_file_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_upload_section_excel_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_upload_section_excel_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/excel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_upload_section_file(self, exp_journal_id, **kwargs):  # noqa: E501
        """Upload a file to a FILE or CUSTOM section  # noqa: E501

        Office (Excel, Word and Powerpoint) / Excel sections are currently not supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_upload_section_file(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str file_name:
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_upload_section_file_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_upload_section_file_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_upload_section_file_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Upload a file to a FILE or CUSTOM section  # noqa: E501

        Office (Excel, Word and Powerpoint) / Excel sections are currently not supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_upload_section_file_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str file_name:
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'file_name', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_upload_section_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_upload_section_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_upload_section_image(self, exp_journal_id, **kwargs):  # noqa: E501
        """Upload an image file to an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_upload_section_image(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str file_name:
        :param str description:
        :param int position:
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_upload_section_image_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_upload_section_image_with_http_info(exp_journal_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_upload_section_image_with_http_info(self, exp_journal_id, **kwargs):  # noqa: E501
        """Upload an image file to an IMAGE or CUSTOM section  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_upload_section_image_with_http_info(exp_journal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param str file_name:
        :param str description:
        :param int position:
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'file_name', 'description', 'position', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_upload_section_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_upload_section_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501

        query_params = []
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/sections/{expJournalID}/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
