# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from elabjournal_client.api_client import ApiClient


class ExperimentSectionsDeprecatedCallsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def experiment_section_deprecated_download_marvin_js_image(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download a marvinJS image  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/marvinjs/image``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_marvin_js_image(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_download_marvin_js_image_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_download_marvin_js_image_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_download_marvin_js_image_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download a marvinJS image  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/marvinjs/image``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_marvin_js_image_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_download_marvin_js_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_download_marvin_js_image`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_download_marvin_js_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/marvinjs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_download_marvin_js_image_base64(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download a marvinJS image in Base64 format  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/marvinjs/image/dataURL``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_marvin_js_image_base64(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_download_marvin_js_image_base64_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_download_marvin_js_image_base64_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_download_marvin_js_image_base64_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download a marvinJS image in Base64 format  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/marvinjs/image/dataURL``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_marvin_js_image_base64_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_download_marvin_js_image_base64" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_download_marvin_js_image_base64`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_download_marvin_js_image_base64`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/marvinjs/base64', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_download_section_canvas_image(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download the canvas image from a CANVAS section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/canvas``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_canvas_image(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_download_section_canvas_image_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_download_section_canvas_image_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_download_section_canvas_image_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download the canvas image from a CANVAS section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/canvas``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_canvas_image_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_download_section_canvas_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_download_section_canvas_image`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_download_section_canvas_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/canvas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_download_section_excel_file(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download the excel file from an EXCEL section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/excel``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_excel_file(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_download_section_excel_file_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_download_section_excel_file_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_download_section_excel_file_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download the excel file from an EXCEL section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/excel``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_excel_file_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_download_section_excel_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_download_section_excel_file`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_download_section_excel_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/excel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_download_section_excel_preview(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download the preview image from an EXCEL section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/excel/preview``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_excel_preview(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_download_section_excel_preview_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_download_section_excel_preview_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_download_section_excel_preview_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download the preview image from an EXCEL section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/excel/preview``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_excel_preview_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_download_section_excel_preview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_download_section_excel_preview`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_download_section_excel_preview`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/excelPreview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_download_section_file(self, experiment_file_id, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download a file from a FILES section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/files/{experimentFileID:int}``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_file(experiment_file_id, exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_download_section_file_with_http_info(experiment_file_id, exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_download_section_file_with_http_info(experiment_file_id, exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_download_section_file_with_http_info(self, experiment_file_id, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download a file from a FILES section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/files/{experimentFileID:int}``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_file_with_http_info(experiment_file_id, exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_file_id', 'exp_journal_id', 'experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_download_section_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_file_id' is set
        if self.api_client.client_side_validation and ('experiment_file_id' not in params or
                                                       params['experiment_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_id` when calling `experiment_section_deprecated_download_section_file`")  # noqa: E501
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_download_section_file`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_download_section_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_file_id' in params:
            path_params['experimentFileID'] = params['experiment_file_id']  # noqa: E501
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/files/{experimentFileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_download_section_image(self, experiment_file_id, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download an image from an IMAGE section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/images/{experimentFileID:int}``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_image(experiment_file_id, exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_download_section_image_with_http_info(experiment_file_id, exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_download_section_image_with_http_info(experiment_file_id, exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_download_section_image_with_http_info(self, experiment_file_id, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Download an image from an IMAGE section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/images/{experimentFileID:int}``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_download_section_image_with_http_info(experiment_file_id, exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_file_id: (required)
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_file_id', 'exp_journal_id', 'experiment_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_download_section_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_file_id' is set
        if self.api_client.client_side_validation and ('experiment_file_id' not in params or
                                                       params['experiment_file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_file_id` when calling `experiment_section_deprecated_download_section_image`")  # noqa: E501
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_download_section_image`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_download_section_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_file_id' in params:
            path_params['experimentFileID'] = params['experiment_file_id']  # noqa: E501
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/images/{experimentFileID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_get_section_content(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get the content from a text section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/content``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_content(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: ExpJournalContentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_get_section_content_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_get_section_content_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_get_section_content_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get the content from a text section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/content``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_content_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: ExpJournalContentBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_get_section_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_get_section_content`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_get_section_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExpJournalContentBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_get_section_content_as_html(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get a full HTML page from a section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/html``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_content_as_html(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_get_section_content_as_html_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_get_section_content_as_html_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_get_section_content_as_html_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get a full HTML page from a section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/html``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_content_as_html_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_get_section_content_as_html" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_get_section_content_as_html`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_get_section_content_as_html`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_get_section_file_list(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get file list of a FILE section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/files``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_file_list(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_get_section_file_list_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_get_section_file_list_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_get_section_file_list_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get file list of a FILE section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/files``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_file_list_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_get_section_file_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_get_section_file_list`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_get_section_file_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExperimentFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_get_section_image_list(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get image list of an IMAGE section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/images``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_image_list(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentImage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_get_section_image_list_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_get_section_image_list_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_get_section_image_list_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get image list of an IMAGE section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/images``    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_image_list_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentImage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_get_section_image_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_get_section_image_list`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_get_section_image_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExperimentImage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_section_deprecated_get_section_samples(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get sample list from a SAMPLESIN or SAMPLESOUT section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/samples``    This call will also fetch archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_samples(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_section_deprecated_get_section_samples_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_section_deprecated_get_section_samples_with_http_info(exp_journal_id, experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_section_deprecated_get_section_samples_with_http_info(self, exp_journal_id, experiment_id, **kwargs):  # noqa: E501
        """Get sample list from a SAMPLESIN or SAMPLESOUT section  # noqa: E501

        **Deprecated.** Please use ``GET /api/v1/experiments/sections/{expJournalID}/samples``    This call will also fetch archived samples.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_section_deprecated_get_section_samples_with_http_info(exp_journal_id, experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_journal_id: (required)
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_journal_id', 'experiment_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_section_deprecated_get_section_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_journal_id' is set
        if self.api_client.client_side_validation and ('exp_journal_id' not in params or
                                                       params['exp_journal_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_journal_id` when calling `experiment_section_deprecated_get_section_samples`")  # noqa: E501
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_section_deprecated_get_section_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_journal_id' in params:
            path_params['expJournalID'] = params['exp_journal_id']  # noqa: E501
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sections/{expJournalID}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
