# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from elabjournal_client.api_client import ApiClient


class StorageAndEquipmentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assignment_create_assignment(self, storage_layer_id, assignment, **kwargs):  # noqa: E501
        """Create compartment assignment.  # noqa: E501

        This call assigns a compartment. The assigned compartments descendants will also be assigned to the user or role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_create_assignment(storage_layer_id, assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param AssignmentNew assignment: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_create_assignment_with_http_info(storage_layer_id, assignment, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_create_assignment_with_http_info(storage_layer_id, assignment, **kwargs)  # noqa: E501
            return data

    def assignment_create_assignment_with_http_info(self, storage_layer_id, assignment, **kwargs):  # noqa: E501
        """Create compartment assignment.  # noqa: E501

        This call assigns a compartment. The assigned compartments descendants will also be assigned to the user or role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_create_assignment_with_http_info(storage_layer_id, assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param AssignmentNew assignment: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'assignment', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_create_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `assignment_create_assignment`")  # noqa: E501
        # verify the required parameter 'assignment' is set
        if self.api_client.client_side_validation and ('assignment' not in params or
                                                       params['assignment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment` when calling `assignment_create_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assignment' in params:
            body_params = params['assignment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/assignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_delete_assignment(self, assignment_id, **kwargs):  # noqa: E501
        """Delete a compartment assignment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_delete_assignment(assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int assignment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_delete_assignment_with_http_info(assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_delete_assignment_with_http_info(assignment_id, **kwargs)  # noqa: E501
            return data

    def assignment_delete_assignment_with_http_info(self, assignment_id, **kwargs):  # noqa: E501
        """Delete a compartment assignment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_delete_assignment_with_http_info(assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int assignment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_delete_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `assignment_delete_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_id' in params:
            path_params['assignmentID'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/assignment/{assignmentID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_get_assignment_by_storage_layer_id(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get active assignment of a compartment.  # noqa: E501

        This call gets the active assignment for a compartment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_get_assignment_by_storage_layer_id(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str x_requested_with: 
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_get_assignment_by_storage_layer_id_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_get_assignment_by_storage_layer_id_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
            return data

    def assignment_get_assignment_by_storage_layer_id_with_http_info(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get active assignment of a compartment.  # noqa: E501

        This call gets the active assignment for a compartment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_get_assignment_by_storage_layer_id_with_http_info(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str x_requested_with: 
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_get_assignment_by_storage_layer_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `assignment_get_assignment_by_storage_layer_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/assignment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assignment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assignment_update_assignment(self, assignment_id, assignment, **kwargs):  # noqa: E501
        """Update a compartment assignment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_update_assignment(assignment_id, assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int assignment_id: (required)
        :param AssignmentNew assignment: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assignment_update_assignment_with_http_info(assignment_id, assignment, **kwargs)  # noqa: E501
        else:
            (data) = self.assignment_update_assignment_with_http_info(assignment_id, assignment, **kwargs)  # noqa: E501
            return data

    def assignment_update_assignment_with_http_info(self, assignment_id, assignment, **kwargs):  # noqa: E501
        """Update a compartment assignment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assignment_update_assignment_with_http_info(assignment_id, assignment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int assignment_id: (required)
        :param AssignmentNew assignment: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_id', 'assignment', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assignment_update_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `assignment_update_assignment`")  # noqa: E501
        # verify the required parameter 'assignment' is set
        if self.api_client.client_side_validation and ('assignment' not in params or
                                                       params['assignment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment` when calling `assignment_update_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_id' in params:
            path_params['assignmentID'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assignment' in params:
            body_params = params['assignment']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/assignment/{assignmentID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def booking_create_booking(self, equipment_id, booking, **kwargs):  # noqa: E501
        """Create an equipment booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.booking_create_booking(equipment_id, booking, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: (required)
        :param BookingNew booking: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.booking_create_booking_with_http_info(equipment_id, booking, **kwargs)  # noqa: E501
        else:
            (data) = self.booking_create_booking_with_http_info(equipment_id, booking, **kwargs)  # noqa: E501
            return data

    def booking_create_booking_with_http_info(self, equipment_id, booking, **kwargs):  # noqa: E501
        """Create an equipment booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.booking_create_booking_with_http_info(equipment_id, booking, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: (required)
        :param BookingNew booking: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id', 'booking', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method booking_create_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id' is set
        if self.api_client.client_side_validation and ('equipment_id' not in params or
                                                       params['equipment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `equipment_id` when calling `booking_create_booking`")  # noqa: E501
        # verify the required parameter 'booking' is set
        if self.api_client.client_side_validation and ('booking' not in params or
                                                       params['booking'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `booking` when calling `booking_create_booking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'equipment_id' in params:
            path_params['equipmentID'] = params['equipment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'booking' in params:
            body_params = params['booking']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/equipment/{equipmentID}/bookings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def booking_delete_booking(self, booking_id, **kwargs):  # noqa: E501
        """Delete an equipment booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.booking_delete_booking(booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int booking_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.booking_delete_booking_with_http_info(booking_id, **kwargs)  # noqa: E501
        else:
            (data) = self.booking_delete_booking_with_http_info(booking_id, **kwargs)  # noqa: E501
            return data

    def booking_delete_booking_with_http_info(self, booking_id, **kwargs):  # noqa: E501
        """Delete an equipment booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.booking_delete_booking_with_http_info(booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int booking_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method booking_delete_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if self.api_client.client_side_validation and ('booking_id' not in params or
                                                       params['booking_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `booking_id` when calling `booking_delete_booking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'booking_id' in params:
            path_params['bookingID'] = params['booking_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/equipment/bookings/{bookingID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def booking_get_bookings(self, equipment_id, **kwargs):  # noqa: E501
        """Get equipment bookings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.booking_get_bookings(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str _from: Bookings where the start date/time is equal or greater than the given filter.
        :param str to: Bookings where the end date/time is equal or less than the given filter.
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.booking_get_bookings_with_http_info(equipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.booking_get_bookings_with_http_info(equipment_id, **kwargs)  # noqa: E501
            return data

    def booking_get_bookings_with_http_info(self, equipment_id, **kwargs):  # noqa: E501
        """Get equipment bookings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.booking_get_bookings_with_http_info(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int equipment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str _from: Bookings where the start date/time is equal or greater than the given filter.
        :param str to: Bookings where the end date/time is equal or less than the given filter.
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', '_from', 'to', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method booking_get_bookings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id' is set
        if self.api_client.client_side_validation and ('equipment_id' not in params or
                                                       params['equipment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `equipment_id` when calling `booking_get_bookings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'equipment_id' in params:
            path_params['equipmentID'] = params['equipment_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/equipment/{equipmentID}/bookings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def booking_update_booking(self, booking_id, booking, **kwargs):  # noqa: E501
        """Update an equipment booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.booking_update_booking(booking_id, booking, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int booking_id: (required)
        :param BookingNew booking: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.booking_update_booking_with_http_info(booking_id, booking, **kwargs)  # noqa: E501
        else:
            (data) = self.booking_update_booking_with_http_info(booking_id, booking, **kwargs)  # noqa: E501
            return data

    def booking_update_booking_with_http_info(self, booking_id, booking, **kwargs):  # noqa: E501
        """Update an equipment booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.booking_update_booking_with_http_info(booking_id, booking, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int booking_id: (required)
        :param BookingNew booking: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['booking_id', 'booking', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method booking_update_booking" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'booking_id' is set
        if self.api_client.client_side_validation and ('booking_id' not in params or
                                                       params['booking_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `booking_id` when calling `booking_update_booking`")  # noqa: E501
        # verify the required parameter 'booking' is set
        if self.api_client.client_side_validation and ('booking' not in params or
                                                       params['booking'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `booking` when calling `booking_update_booking`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'booking_id' in params:
            path_params['bookingID'] = params['booking_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'booking' in params:
            body_params = params['booking']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/equipment/bookings/{bookingID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_bulk_delete_storage_meta(self, storage_meta_ids, **kwargs):  # noqa: E501
        """Delete multiple equipment or storage units meta fields  # noqa: E501

        This call will delete multiple equipment meta fields. To pass multiple storageMetaIDs the input has to be provided as an array e.g. '[1, 2, 3]'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_bulk_delete_storage_meta(storage_meta_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] storage_meta_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_bulk_delete_storage_meta_with_http_info(storage_meta_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_bulk_delete_storage_meta_with_http_info(storage_meta_ids, **kwargs)  # noqa: E501
            return data

    def storage_bulk_delete_storage_meta_with_http_info(self, storage_meta_ids, **kwargs):  # noqa: E501
        """Delete multiple equipment or storage units meta fields  # noqa: E501

        This call will delete multiple equipment meta fields. To pass multiple storageMetaIDs the input has to be provided as an array e.g. '[1, 2, 3]'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_bulk_delete_storage_meta_with_http_info(storage_meta_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] storage_meta_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_meta_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_bulk_delete_storage_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_meta_ids' is set
        if self.api_client.client_side_validation and ('storage_meta_ids' not in params or
                                                       params['storage_meta_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_meta_ids` when calling `storage_bulk_delete_storage_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storage_meta_ids' in params:
            body_params = params['storage_meta_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/meta/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_bulk_patch_storage_meta(self, delta, **kwargs):  # noqa: E501
        """Update multiple equipment or storage units meta fields  # noqa: E501

        If you update a meta with type FILE you must supply a valid metaFileID of the file. See the Meta File calls. For other types the metaFileID is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_bulk_patch_storage_meta(delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StorageMeta] delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_bulk_patch_storage_meta_with_http_info(delta, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_bulk_patch_storage_meta_with_http_info(delta, **kwargs)  # noqa: E501
            return data

    def storage_bulk_patch_storage_meta_with_http_info(self, delta, **kwargs):  # noqa: E501
        """Update multiple equipment or storage units meta fields  # noqa: E501

        If you update a meta with type FILE you must supply a valid metaFileID of the file. See the Meta File calls. For other types the metaFileID is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_bulk_patch_storage_meta_with_http_info(delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StorageMeta] delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_bulk_patch_storage_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `storage_bulk_patch_storage_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/meta/bulk', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_bulk_storage_meta(self, dto, **kwargs):  # noqa: E501
        """Create multiple new equipment or storage unit meta fields  # noqa: E501

        If you create a meta with type FILE you must supply a valid metaFileID of the file. See the Meta File calls. For other types the metaFileID is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_bulk_storage_meta(dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StorageMetaNewBulk] dto: (required)
        :param str x_requested_with: 
        :return: list[StorageMeta]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_bulk_storage_meta_with_http_info(dto, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_bulk_storage_meta_with_http_info(dto, **kwargs)  # noqa: E501
            return data

    def storage_create_bulk_storage_meta_with_http_info(self, dto, **kwargs):  # noqa: E501
        """Create multiple new equipment or storage unit meta fields  # noqa: E501

        If you create a meta with type FILE you must supply a valid metaFileID of the file. See the Meta File calls. For other types the metaFileID is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_bulk_storage_meta_with_http_info(dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[StorageMetaNewBulk] dto: (required)
        :param str x_requested_with: 
        :return: list[StorageMeta]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_bulk_storage_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `storage_create_bulk_storage_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/meta/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StorageMeta]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_child_storage_layer(self, storage_layer_id, storage_layer_new, **kwargs):  # noqa: E501
        """Create a new compartment within an existing compartment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_child_storage_layer(storage_layer_id, storage_layer_new, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param StorageLayerNew storage_layer_new: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_child_storage_layer_with_http_info(storage_layer_id, storage_layer_new, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_child_storage_layer_with_http_info(storage_layer_id, storage_layer_new, **kwargs)  # noqa: E501
            return data

    def storage_create_child_storage_layer_with_http_info(self, storage_layer_id, storage_layer_new, **kwargs):  # noqa: E501
        """Create a new compartment within an existing compartment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_child_storage_layer_with_http_info(storage_layer_id, storage_layer_new, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param StorageLayerNew storage_layer_new: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'storage_layer_new', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_child_storage_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_create_child_storage_layer`")  # noqa: E501
        # verify the required parameter 'storage_layer_new' is set
        if self.api_client.client_side_validation and ('storage_layer_new' not in params or
                                                       params['storage_layer_new'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_new` when calling `storage_create_child_storage_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storage_layer_new' in params:
            body_params = params['storage_layer_new']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/childLayers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_child_storage_layers(self, storage_layer_id, layers, **kwargs):  # noqa: E501
        """Create multiple new compartments within an existing compartment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_child_storage_layers(storage_layer_id, layers, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param MultipleStorageLayerNew layers: (required)
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_child_storage_layers_with_http_info(storage_layer_id, layers, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_child_storage_layers_with_http_info(storage_layer_id, layers, **kwargs)  # noqa: E501
            return data

    def storage_create_child_storage_layers_with_http_info(self, storage_layer_id, layers, **kwargs):  # noqa: E501
        """Create multiple new compartments within an existing compartment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_child_storage_layers_with_http_info(storage_layer_id, layers, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param MultipleStorageLayerNew layers: (required)
        :param str x_requested_with: 
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'layers', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_child_storage_layers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_create_child_storage_layers`")  # noqa: E501
        # verify the required parameter 'layers' is set
        if self.api_client.client_side_validation and ('layers' not in params or
                                                       params['layers'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `layers` when calling `storage_create_child_storage_layers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'layers' in params:
            body_params = params['layers']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/childLayers/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_storage(self, storage_new, **kwargs):  # noqa: E501
        """Create a new storage unit/equipment based on the specified type  # noqa: E501

          Note: this call can create either a storage unit or an equipment. This depends on the storageTypeID that you supply with this call. See the storageType calls.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage(storage_new, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StorageNew storage_new: (required)
        :param str x_requested_with: 
        :return: StorageNewResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_storage_with_http_info(storage_new, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_storage_with_http_info(storage_new, **kwargs)  # noqa: E501
            return data

    def storage_create_storage_with_http_info(self, storage_new, **kwargs):  # noqa: E501
        """Create a new storage unit/equipment based on the specified type  # noqa: E501

          Note: this call can create either a storage unit or an equipment. This depends on the storageTypeID that you supply with this call. See the storageType calls.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_with_http_info(storage_new, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StorageNew storage_new: (required)
        :param str x_requested_with: 
        :return: StorageNewResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_new', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_new' is set
        if self.api_client.client_side_validation and ('storage_new' not in params or
                                                       params['storage_new'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_new` when calling `storage_create_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storage_new' in params:
            body_params = params['storage_new']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageNewResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_storage_layer_definition(self, storage_id, storage_layer_definition_new, **kwargs):  # noqa: E501
        """Create a new compartment definition for a storage unit. This is a template for creating one or more compartments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_layer_definition(storage_id, storage_layer_definition_new, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageLayerDefinitionNew storage_layer_definition_new: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_storage_layer_definition_with_http_info(storage_id, storage_layer_definition_new, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_storage_layer_definition_with_http_info(storage_id, storage_layer_definition_new, **kwargs)  # noqa: E501
            return data

    def storage_create_storage_layer_definition_with_http_info(self, storage_id, storage_layer_definition_new, **kwargs):  # noqa: E501
        """Create a new compartment definition for a storage unit. This is a template for creating one or more compartments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_layer_definition_with_http_info(storage_id, storage_layer_definition_new, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageLayerDefinitionNew storage_layer_definition_new: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'storage_layer_definition_new', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_storage_layer_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_create_storage_layer_definition`")  # noqa: E501
        # verify the required parameter 'storage_layer_definition_new' is set
        if self.api_client.client_side_validation and ('storage_layer_definition_new' not in params or
                                                       params['storage_layer_definition_new'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_definition_new` when calling `storage_create_storage_layer_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'storage_layer_definition_new' in params:
            body_params = params['storage_layer_definition_new']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/storageLayerDefinitions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_storage_layer_reservation(self, storage_layer_id, dto, **kwargs):  # noqa: E501
        """Create a new storage/equipment compartment reservation  # noqa: E501

        Reservations must be created per compartment. For equipment simply use its main storageLayerID to reserve it. For storage units you can reserve a specific compartment by supplying its storageLayerID.    To create a permanent reservation omit the end date/time or set it to \"9999-12-31T00:00:00Z\".    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_layer_reservation(storage_layer_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param StorageLayerReservationNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_storage_layer_reservation_with_http_info(storage_layer_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_storage_layer_reservation_with_http_info(storage_layer_id, dto, **kwargs)  # noqa: E501
            return data

    def storage_create_storage_layer_reservation_with_http_info(self, storage_layer_id, dto, **kwargs):  # noqa: E501
        """Create a new storage/equipment compartment reservation  # noqa: E501

        Reservations must be created per compartment. For equipment simply use its main storageLayerID to reserve it. For storage units you can reserve a specific compartment by supplying its storageLayerID.    To create a permanent reservation omit the end date/time or set it to \"9999-12-31T00:00:00Z\".    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_layer_reservation_with_http_info(storage_layer_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param StorageLayerReservationNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_storage_layer_reservation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_create_storage_layer_reservation`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `storage_create_storage_layer_reservation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/reservations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_storage_manager(self, storage_id, dto, **kwargs):  # noqa: E501
        """Add a userID as manager to a storage unit/equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_manager(storage_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageManagerNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_storage_manager_with_http_info(storage_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_storage_manager_with_http_info(storage_id, dto, **kwargs)  # noqa: E501
            return data

    def storage_create_storage_manager_with_http_info(self, storage_id, dto, **kwargs):  # noqa: E501
        """Add a userID as manager to a storage unit/equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_manager_with_http_info(storage_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageManagerNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_storage_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_create_storage_manager`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `storage_create_storage_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/managers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_storage_managers(self, storage_id, user_ids, **kwargs):  # noqa: E501
        """Add multiple managers by userID to a storage unit/equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_managers(storage_id, user_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param list[int] user_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_storage_managers_with_http_info(storage_id, user_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_storage_managers_with_http_info(storage_id, user_ids, **kwargs)  # noqa: E501
            return data

    def storage_create_storage_managers_with_http_info(self, storage_id, user_ids, **kwargs):  # noqa: E501
        """Add multiple managers by userID to a storage unit/equipment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_managers_with_http_info(storage_id, user_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param list[int] user_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'user_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_storage_managers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_create_storage_managers`")  # noqa: E501
        # verify the required parameter 'user_ids' is set
        if self.api_client.client_side_validation and ('user_ids' not in params or
                                                       params['user_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_ids` when calling `storage_create_storage_managers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_ids' in params:
            body_params = params['user_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/managers/bulk', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_storage_meta(self, storage_id, dto, **kwargs):  # noqa: E501
        """Create a new equipment or storage unit meta field  # noqa: E501

          Note: only equipment currently supports meta fields. Creating these for storage units will have no effect.     If you create a meta with type FILE you must supply a valid metaFileID of the file. See the Meta File calls. For other types the metaFileID is ignored.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_meta(storage_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_storage_meta_with_http_info(storage_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_storage_meta_with_http_info(storage_id, dto, **kwargs)  # noqa: E501
            return data

    def storage_create_storage_meta_with_http_info(self, storage_id, dto, **kwargs):  # noqa: E501
        """Create a new equipment or storage unit meta field  # noqa: E501

          Note: only equipment currently supports meta fields. Creating these for storage units will have no effect.     If you create a meta with type FILE you must supply a valid metaFileID of the file. See the Meta File calls. For other types the metaFileID is ignored.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_meta_with_http_info(storage_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageMetaNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_storage_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_create_storage_meta`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `storage_create_storage_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/meta', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_storage_type(self, dto, **kwargs):  # noqa: E501
        """Create a new equipment type  # noqa: E501

          Note: the system only allows the creation of deviceType EQUIPMENT.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_type(dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StorageTypeNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_storage_type_with_http_info(dto, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_storage_type_with_http_info(dto, **kwargs)  # noqa: E501
            return data

    def storage_create_storage_type_with_http_info(self, dto, **kwargs):  # noqa: E501
        """Create a new equipment type  # noqa: E501

          Note: the system only allows the creation of deviceType EQUIPMENT.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_type_with_http_info(dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param StorageTypeNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_storage_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `storage_create_storage_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageTypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_create_storage_validation(self, storage_id, dto, **kwargs):  # noqa: E501
        """Create a new storage unit or equipment validation  # noqa: E501

          Note: the hasValidation property of the equipment must be set to true before validation checking is enabled.   Both metaFileID and metaFileIDs are optional. If multiple validation files need to be added metaFileIDs has to be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_validation(storage_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageValidationNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_create_storage_validation_with_http_info(storage_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_create_storage_validation_with_http_info(storage_id, dto, **kwargs)  # noqa: E501
            return data

    def storage_create_storage_validation_with_http_info(self, storage_id, dto, **kwargs):  # noqa: E501
        """Create a new storage unit or equipment validation  # noqa: E501

          Note: the hasValidation property of the equipment must be set to true before validation checking is enabled.   Both metaFileID and metaFileIDs are optional. If multiple validation files need to be added metaFileIDs has to be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_create_storage_validation_with_http_info(storage_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageValidationNew dto: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_create_storage_validation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_create_storage_validation`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `storage_create_storage_validation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/validations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_delete_storage_layer(self, storage_layer_id, **kwargs):  # noqa: E501
        """Delete a storageLayer by storageLayerID  # noqa: E501

        If the storage layer contains samples, use the deleteStorageLayerSamplesBehaviour parameter to specify whether the samples should be archived or moved to the parent storage layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_layer(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param bool archive_samples: deprecated
        :param str delete_storage_layer_samples_behaviour:
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_delete_storage_layer_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_delete_storage_layer_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
            return data

    def storage_delete_storage_layer_with_http_info(self, storage_layer_id, **kwargs):  # noqa: E501
        """Delete a storageLayer by storageLayerID  # noqa: E501

        If the storage layer contains samples, use the deleteStorageLayerSamplesBehaviour parameter to specify whether the samples should be archived or moved to the parent storage layer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_layer_with_http_info(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param bool archive_samples: deprecated
        :param str delete_storage_layer_samples_behaviour:
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'archive_samples', 'delete_storage_layer_samples_behaviour', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_delete_storage_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_delete_storage_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'archive_samples' in params:
            query_params.append(('archiveSamples', params['archive_samples']))  # noqa: E501
        if 'delete_storage_layer_samples_behaviour' in params:
            query_params.append(('deleteStorageLayerSamplesBehaviour', params['delete_storage_layer_samples_behaviour']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_delete_storage_layer_reservation(self, storage_layer_id, storage_layer_reservation_id, **kwargs):  # noqa: E501
        """Delete a storage/equipment compartment reservation  # noqa: E501

        Only a storage manager or the user who originally created the reservation may delete a reservation.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_layer_reservation(storage_layer_id, storage_layer_reservation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int storage_layer_reservation_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_delete_storage_layer_reservation_with_http_info(storage_layer_id, storage_layer_reservation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_delete_storage_layer_reservation_with_http_info(storage_layer_id, storage_layer_reservation_id, **kwargs)  # noqa: E501
            return data

    def storage_delete_storage_layer_reservation_with_http_info(self, storage_layer_id, storage_layer_reservation_id, **kwargs):  # noqa: E501
        """Delete a storage/equipment compartment reservation  # noqa: E501

        Only a storage manager or the user who originally created the reservation may delete a reservation.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_layer_reservation_with_http_info(storage_layer_id, storage_layer_reservation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int storage_layer_reservation_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'storage_layer_reservation_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_delete_storage_layer_reservation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_delete_storage_layer_reservation`")  # noqa: E501
        # verify the required parameter 'storage_layer_reservation_id' is set
        if self.api_client.client_side_validation and ('storage_layer_reservation_id' not in params or
                                                       params['storage_layer_reservation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_reservation_id` when calling `storage_delete_storage_layer_reservation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501
        if 'storage_layer_reservation_id' in params:
            path_params['storageLayerReservationID'] = params['storage_layer_reservation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/reservations/{storageLayerReservationID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_delete_storage_manager(self, storage_id, user_id, **kwargs):  # noqa: E501
        """Remove a manager from a storage unit/equipment by userID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_manager(storage_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_delete_storage_manager_with_http_info(storage_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_delete_storage_manager_with_http_info(storage_id, user_id, **kwargs)  # noqa: E501
            return data

    def storage_delete_storage_manager_with_http_info(self, storage_id, user_id, **kwargs):  # noqa: E501
        """Remove a manager from a storage unit/equipment by userID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_manager_with_http_info(storage_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'user_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_delete_storage_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_delete_storage_manager`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `storage_delete_storage_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/managers/{userID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_delete_storage_managers(self, storage_id, user_ids, **kwargs):  # noqa: E501
        """Remove multiple managers from a storage unit/equipment by userID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_managers(storage_id, user_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param list[int] user_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_delete_storage_managers_with_http_info(storage_id, user_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_delete_storage_managers_with_http_info(storage_id, user_ids, **kwargs)  # noqa: E501
            return data

    def storage_delete_storage_managers_with_http_info(self, storage_id, user_ids, **kwargs):  # noqa: E501
        """Remove multiple managers from a storage unit/equipment by userID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_managers_with_http_info(storage_id, user_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param list[int] user_ids: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'user_ids', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_delete_storage_managers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_delete_storage_managers`")  # noqa: E501
        # verify the required parameter 'user_ids' is set
        if self.api_client.client_side_validation and ('user_ids' not in params or
                                                       params['user_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_ids` when calling `storage_delete_storage_managers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_ids' in params:
            body_params = params['user_ids']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/managers/bulk', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_delete_storage_meta(self, storage_id, storage_meta_id, **kwargs):  # noqa: E501
        """Delete an equipment meta field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_meta(storage_id, storage_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_meta_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_delete_storage_meta_with_http_info(storage_id, storage_meta_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_delete_storage_meta_with_http_info(storage_id, storage_meta_id, **kwargs)  # noqa: E501
            return data

    def storage_delete_storage_meta_with_http_info(self, storage_id, storage_meta_id, **kwargs):  # noqa: E501
        """Delete an equipment meta field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_meta_with_http_info(storage_id, storage_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_meta_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'storage_meta_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_delete_storage_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_delete_storage_meta`")  # noqa: E501
        # verify the required parameter 'storage_meta_id' is set
        if self.api_client.client_side_validation and ('storage_meta_id' not in params or
                                                       params['storage_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_meta_id` when calling `storage_delete_storage_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501
        if 'storage_meta_id' in params:
            path_params['storageMetaID'] = params['storage_meta_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/meta/{storageMetaID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_delete_storage_validation(self, storage_id, storage_validation_id, **kwargs):  # noqa: E501
        """Delete an equipment validation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_validation(storage_id, storage_validation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_validation_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_delete_storage_validation_with_http_info(storage_id, storage_validation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_delete_storage_validation_with_http_info(storage_id, storage_validation_id, **kwargs)  # noqa: E501
            return data

    def storage_delete_storage_validation_with_http_info(self, storage_id, storage_validation_id, **kwargs):  # noqa: E501
        """Delete an equipment validation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_delete_storage_validation_with_http_info(storage_id, storage_validation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_validation_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'storage_validation_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_delete_storage_validation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_delete_storage_validation`")  # noqa: E501
        # verify the required parameter 'storage_validation_id' is set
        if self.api_client.client_side_validation and ('storage_validation_id' not in params or
                                                       params['storage_validation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_validation_id` when calling `storage_delete_storage_validation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501
        if 'storage_validation_id' in params:
            path_params['storageValidationID'] = params['storage_validation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/validations/{storageValidationID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_find_storage_free_location(self, storage_id, **kwargs):  # noqa: E501
        """Find a free sample location within a storage unit  # noqa: E501

        This call finds the first free location within the storage unit's sample boxes.    You can specify the amount of consecutive places that you require with the consecutiveSpace parameter. By default this is set to 1.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_find_storage_free_location(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int consecutive_space:
        :param str x_requested_with: 
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_find_storage_free_location_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_find_storage_free_location_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_find_storage_free_location_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Find a free sample location within a storage unit  # noqa: E501

        This call finds the first free location within the storage unit's sample boxes.    You can specify the amount of consecutive places that you require with the consecutiveSpace parameter. By default this is set to 1.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_find_storage_free_location_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int consecutive_space:
        :param str x_requested_with: 
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'consecutive_space', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_find_storage_free_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_find_storage_free_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'consecutive_space' in params:
            query_params.append(('consecutiveSpace', params['consecutive_space']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/freeLocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_find_storage_layer_free_location(self, storage_layer_id, **kwargs):  # noqa: E501
        """Find a free sample location in or below a storage layer  # noqa: E501

        This call finds the first free location in the specified storage layer (if it's a sample box) or below it (if it's contains sample boxes).    You can specify the amount of consecutive places that you require with the consecutiveSpace parameter. By default this is set to 1.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_find_storage_layer_free_location(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int consecutive_space:
        :param str x_requested_with: 
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_find_storage_layer_free_location_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_find_storage_layer_free_location_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
            return data

    def storage_find_storage_layer_free_location_with_http_info(self, storage_layer_id, **kwargs):  # noqa: E501
        """Find a free sample location in or below a storage layer  # noqa: E501

        This call finds the first free location in the specified storage layer (if it's a sample box) or below it (if it's contains sample boxes).    You can specify the amount of consecutive places that you require with the consecutiveSpace parameter. By default this is set to 1.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_find_storage_layer_free_location_with_http_info(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int consecutive_space:
        :param str x_requested_with: 
        :return: Location
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'consecutive_space', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_find_storage_layer_free_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_find_storage_layer_free_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'consecutive_space' in params:
            query_params.append(('consecutiveSpace', params['consecutive_space']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/freeLocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Location',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_child_layers_by_id(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get the storage compartments of a compartment  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations  * statistics    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_child_layers_by_id(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str storage_id: Filter by storageID
        :param str name: Filter by name
        :param str x_requested_with: 
        :return: PagedOfStorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_child_layers_by_id_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_child_layers_by_id_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
            return data

    def storage_get_child_layers_by_id_with_http_info(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get the storage compartments of a compartment  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations  * statistics    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_child_layers_by_id_with_http_info(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str storage_id: Filter by storageID
        :param str name: Filter by name
        :param str x_requested_with: 
        :return: PagedOfStorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'barcodes', 'storage_id', 'name', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_child_layers_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_get_child_layers_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'barcodes' in params:
            query_params.append(('barcodes', params['barcodes']))  # noqa: E501
        if 'storage_id' in params:
            query_params.append(('storageID', params['storage_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/childLayers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageLayerLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_child_layers_for_ids(self, parent_storage_layer_ids, **kwargs):  # noqa: E501
        """Get the storage compartments of several parent compartments  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations  * statistics    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_child_layers_for_ids(parent_storage_layer_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] parent_storage_layer_ids: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_child_layers_for_ids_with_http_info(parent_storage_layer_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_child_layers_for_ids_with_http_info(parent_storage_layer_ids, **kwargs)  # noqa: E501
            return data

    def storage_get_child_layers_for_ids_with_http_info(self, parent_storage_layer_ids, **kwargs):  # noqa: E501
        """Get the storage compartments of several parent compartments  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations  * statistics    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_child_layers_for_ids_with_http_info(parent_storage_layer_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] parent_storage_layer_ids: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent_storage_layer_ids', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_child_layers_for_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parent_storage_layer_ids' is set
        if self.api_client.client_side_validation and ('parent_storage_layer_ids' not in params or
                                                       params['parent_storage_layer_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parent_storage_layer_ids` when calling `storage_get_child_layers_for_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parent_storage_layer_ids' in params:
            query_params.append(('parentStorageLayerIDs', params['parent_storage_layer_ids']))  # noqa: E501
            collection_formats['parentStorageLayerIDs'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/childLayers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageLayerLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_empty_compartment_in_layer(self, storage_layer_id, storage_layer_definition_id, **kwargs):  # noqa: E501
        """Find an empty compartment in a storage layer  # noqa: E501

        This endpoint can be used to find a empty storage compartment in a storage tree that has a maximum of       six layers. Both the storageLayerID and the storageLayerDefinitionID is necessary to perform the search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_empty_compartment_in_layer(storage_layer_id, storage_layer_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int storage_layer_definition_id: (required)
        :param str x_requested_with: 
        :return: StorageLayer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_empty_compartment_in_layer_with_http_info(storage_layer_id, storage_layer_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_empty_compartment_in_layer_with_http_info(storage_layer_id, storage_layer_definition_id, **kwargs)  # noqa: E501
            return data

    def storage_get_empty_compartment_in_layer_with_http_info(self, storage_layer_id, storage_layer_definition_id, **kwargs):  # noqa: E501
        """Find an empty compartment in a storage layer  # noqa: E501

        This endpoint can be used to find a empty storage compartment in a storage tree that has a maximum of       six layers. Both the storageLayerID and the storageLayerDefinitionID is necessary to perform the search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_empty_compartment_in_layer_with_http_info(storage_layer_id, storage_layer_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int storage_layer_definition_id: (required)
        :param str x_requested_with: 
        :return: StorageLayer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'storage_layer_definition_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_empty_compartment_in_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_get_empty_compartment_in_layer`")  # noqa: E501
        # verify the required parameter 'storage_layer_definition_id' is set
        if self.api_client.client_side_validation and ('storage_layer_definition_id' not in params or
                                                       params['storage_layer_definition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_definition_id` when calling `storage_get_empty_compartment_in_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'storage_layer_definition_id' in params:
            query_params.append(('storageLayerDefinitionID', params['storage_layer_definition_id']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/emptyStorageLayer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageLayer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_equipment_logs(self, storage_id, **kwargs):  # noqa: E501
        """Get full log of an equipment  # noqa: E501

        Note: this call only shows logs for equipment, not storage units.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_equipment_logs(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfEquipmentLogLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_equipment_logs_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_equipment_logs_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_equipment_logs_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get full log of an equipment  # noqa: E501

        Note: this call only shows logs for equipment, not storage units.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_equipment_logs_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfEquipmentLogLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_equipment_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_equipment_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/equipment/{storageID}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfEquipmentLogLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_sample_logs(self, storage_id, **kwargs):  # noqa: E501
        """Get a storage unit's sample logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_sample_logs(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str action: Filter by action (CREATE/UPDATE/DELETE)
        :param str sample_meta_key: Filter by a sample field (including \"Location\")
        :param str storage_layer_id: Filter for samples in a storage layer
        :param str user_id: Filter by the user who made the change
        :param str storage_id2: Filter for samples in a storage unit
        :param str x_requested_with: 
        :return: PagedOfSampleLogLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_sample_logs_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_sample_logs_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_sample_logs_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get a storage unit's sample logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_sample_logs_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str action: Filter by action (CREATE/UPDATE/DELETE)
        :param str sample_meta_key: Filter by a sample field (including \"Location\")
        :param str storage_layer_id: Filter for samples in a storage layer
        :param str user_id: Filter by the user who made the change
        :param str storage_id2: Filter for samples in a storage unit
        :param str x_requested_with: 
        :return: PagedOfSampleLogLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'action', 'sample_meta_key', 'storage_layer_id', 'user_id', 'storage_id2', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_sample_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_sample_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'sample_meta_key' in params:
            query_params.append(('sampleMetaKey', params['sample_meta_key']))  # noqa: E501
        if 'storage_layer_id' in params:
            query_params.append(('storageLayerID', params['storage_layer_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userID', params['user_id']))  # noqa: E501
        if 'storage_id2' in params:
            query_params.append(('storageID', params['storage_id2']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/samples/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLogLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage(self, **kwargs):  # noqa: E501
        """Get storage units/equipment  # noqa: E501

          Note: the storage calls can return both storage units and equipment. You can differentiate between the two with the storage type's deviceType field which is either STORAGE or EQUIPMENT.     The hasPlanner and hasValidation properties are required for an EQUIPMENT storageType.    Setting hasPlanner to true will show the equipment calendar in eLab.    Setting hasValidation to true will show the equipment validation options in eLab and enable checking the validation. See the storageValidation calls. This is only supported for equipment, not storage units.    $expand values (separate with a comma for multiple expands):  * storageLayer  * managers  * institute  * meta    Note: the expand `statistics` is not available for this call because it's a resource intensive operation. You can only get a storage unit's statistics with the `GET /storage/{storageID}` call.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str storage_type_id: Filter by storageTypeID
        :param str name: Filter by name
        :param str storage_type_name: Filter by the storageType name
        :param str device_type: Filter by the storage type's device type (STORAGE or EQUIPMENT)
        :param str storage_meta_name: Filter by storageMeta name
        :param str x_requested_with: 
        :return: PagedOfStorageLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_with_http_info(**kwargs)  # noqa: E501
            return data

    def storage_get_storage_with_http_info(self, **kwargs):  # noqa: E501
        """Get storage units/equipment  # noqa: E501

          Note: the storage calls can return both storage units and equipment. You can differentiate between the two with the storage type's deviceType field which is either STORAGE or EQUIPMENT.     The hasPlanner and hasValidation properties are required for an EQUIPMENT storageType.    Setting hasPlanner to true will show the equipment calendar in eLab.    Setting hasValidation to true will show the equipment validation options in eLab and enable checking the validation. See the storageValidation calls. This is only supported for equipment, not storage units.    $expand values (separate with a comma for multiple expands):  * storageLayer  * managers  * institute  * meta    Note: the expand `statistics` is not available for this call because it's a resource intensive operation. You can only get a storage unit's statistics with the `GET /storage/{storageID}` call.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str storage_type_id: Filter by storageTypeID
        :param str name: Filter by name
        :param str storage_type_name: Filter by the storageType name
        :param str device_type: Filter by the storage type's device type (STORAGE or EQUIPMENT)
        :param str storage_meta_name: Filter by storageMeta name
        :param str x_requested_with: 
        :return: PagedOfStorageLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'storage_type_id', 'name', 'storage_type_name', 'device_type', 'storage_meta_name', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'storage_type_id' in params:
            query_params.append(('storageTypeID', params['storage_type_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'storage_type_name' in params:
            query_params.append(('storageTypeName', params['storage_type_name']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501
        if 'storage_meta_name' in params:
            query_params.append(('storageMetaName', params['storage_meta_name']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_by_id(self, storage_id, **kwargs):  # noqa: E501
        """Get a storage unit/equipment by id  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storageLayer  * managers  * statistics    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_by_id(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_by_id_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_by_id_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_by_id_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get a storage unit/equipment by id  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storageLayer  * managers  * statistics    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_by_id_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layer_ancestry(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get the storage compartment ancestry of a compartment  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * activeReservation    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_ancestry(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLayerHierarchy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layer_ancestry_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layer_ancestry_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layer_ancestry_with_http_info(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get the storage compartment ancestry of a compartment  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * activeReservation    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_ancestry_with_http_info(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLayerHierarchy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layer_ancestry" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_get_storage_layer_ancestry`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/ancestry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageLayerHierarchy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layer_by_id(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get a storage unit/equipment compartment by id  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations  * statistics    Note: if you use the expand `storageLayers` and `statistics` simultaneously then statistics will also be added for the child storage layers.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_by_id(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layer_by_id_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layer_by_id_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layer_by_id_with_http_info(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get a storage unit/equipment compartment by id  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations  * statistics    Note: if you use the expand `storageLayers` and `statistics` simultaneously then statistics will also be added for the child storage layers.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_by_id_with_http_info(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layer_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_get_storage_layer_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageLayerLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layer_definition_by_id(self, storage_layer_definition_id, **kwargs):  # noqa: E501
        """Get a compartment definition by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_definition_by_id(storage_layer_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_definition_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLayerDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layer_definition_by_id_with_http_info(storage_layer_definition_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layer_definition_by_id_with_http_info(storage_layer_definition_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layer_definition_by_id_with_http_info(self, storage_layer_definition_id, **kwargs):  # noqa: E501
        """Get a compartment definition by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_definition_by_id_with_http_info(storage_layer_definition_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_definition_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLayerDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_definition_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layer_definition_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_definition_id' is set
        if self.api_client.client_side_validation and ('storage_layer_definition_id' not in params or
                                                       params['storage_layer_definition_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_definition_id` when calling `storage_get_storage_layer_definition_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_definition_id' in params:
            path_params['storageLayerDefinitionID'] = params['storage_layer_definition_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayerDefinitions/{storageLayerDefinitionID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageLayerDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layer_definitions(self, storage_id, **kwargs):  # noqa: E501
        """Get all compartment definitions for a storage unit.  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storageLayer    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_definitions(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str deleted: Filter by deleted
        :param str x_requested_with: 
        :return: PagedOfStorageLayerDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layer_definitions_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layer_definitions_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layer_definitions_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get all compartment definitions for a storage unit.  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storageLayer    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_definitions_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str deleted: Filter by deleted
        :param str x_requested_with: 
        :return: PagedOfStorageLayerDefinition
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'deleted', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layer_definitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_layer_definitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/storageLayerDefinitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageLayerDefinition',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layer_logs(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get a storage compartment's logs  # noqa: E501

        Note: these are a subset of a storage unit's logs dealing with this specific compartment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_logs(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layer_logs_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layer_logs_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layer_logs_with_http_info(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get a storage compartment's logs  # noqa: E501

        Note: these are a subset of a storage unit's logs dealing with this specific compartment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_logs_with_http_info(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layer_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_get_storage_layer_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layer_reservation(self, storage_layer_id, storage_layer_reservation_id, **kwargs):  # noqa: E501
        """Get a storage/equipment compartment reservation by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_reservation(storage_layer_id, storage_layer_reservation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int storage_layer_reservation_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLayerReservation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layer_reservation_with_http_info(storage_layer_id, storage_layer_reservation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layer_reservation_with_http_info(storage_layer_id, storage_layer_reservation_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layer_reservation_with_http_info(self, storage_layer_id, storage_layer_reservation_id, **kwargs):  # noqa: E501
        """Get a storage/equipment compartment reservation by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_reservation_with_http_info(storage_layer_id, storage_layer_reservation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int storage_layer_reservation_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageLayerReservation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'storage_layer_reservation_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layer_reservation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_get_storage_layer_reservation`")  # noqa: E501
        # verify the required parameter 'storage_layer_reservation_id' is set
        if self.api_client.client_side_validation and ('storage_layer_reservation_id' not in params or
                                                       params['storage_layer_reservation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_reservation_id` when calling `storage_get_storage_layer_reservation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501
        if 'storage_layer_reservation_id' in params:
            path_params['storageLayerReservationID'] = params['storage_layer_reservation_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/reservations/{storageLayerReservationID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageLayerReservation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layer_reservations(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get all reservations of a storage/equipment compartment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_reservations(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str not_expired: Filter by non-expired reservations (true/false)
        :param str is_permanent: Filter by (non-)permanent reservations (true/false)
        :param str end: Filter by the exact end date/time
        :param str _from: Search for reservations starting from this date/time
        :param str reservation_type: Filter by UserReservation or RoleReservation
        :param str reserved_for_id: Filter by the ID (a userID or a roleID) for which reservations were made
        :param str created_by_user_id: Filter by the userID who created the reservation
        :param str start: Filter by the exact start date/time
        :param str to: Search for reservations ending at this date/time
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layer_reservations_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layer_reservations_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layer_reservations_with_http_info(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get all reservations of a storage/equipment compartment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_reservations_with_http_info(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str not_expired: Filter by non-expired reservations (true/false)
        :param str is_permanent: Filter by (non-)permanent reservations (true/false)
        :param str end: Filter by the exact end date/time
        :param str _from: Search for reservations starting from this date/time
        :param str reservation_type: Filter by UserReservation or RoleReservation
        :param str reserved_for_id: Filter by the ID (a userID or a roleID) for which reservations were made
        :param str created_by_user_id: Filter by the userID who created the reservation
        :param str start: Filter by the exact start date/time
        :param str to: Search for reservations ending at this date/time
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'not_expired', 'is_permanent', 'end', '_from', 'reservation_type', 'reserved_for_id', 'created_by_user_id', 'start', 'to', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layer_reservations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_get_storage_layer_reservations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'not_expired' in params:
            query_params.append(('notExpired', params['not_expired']))  # noqa: E501
        if 'is_permanent' in params:
            query_params.append(('isPermanent', params['is_permanent']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'reservation_type' in params:
            query_params.append(('reservationType', params['reservation_type']))  # noqa: E501
        if 'reserved_for_id' in params:
            query_params.append(('reservedForID', params['reserved_for_id']))  # noqa: E501
        if 'created_by_user_id' in params:
            query_params.append(('createdByUserID', params['created_by_user_id']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/reservations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layer_samples(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get a storage layer's samples  # noqa: E501

        $expand values (separate with a comma for multiple expands):  * location  * quantity  * meta  * experiments    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_samples(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str sample_type_id: Filter by sampleTypeID
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str name: Filter by sample name
        :param str search: Search term to use for filtering samples.
        :param str quantity_id: Filter by quantityID
        :param str minimum_quantity_amount: Filter for samples that have a minimum quantity amount set
        :param str checked_out: Filter for checked out samples
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layer_samples_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layer_samples_with_http_info(storage_layer_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layer_samples_with_http_info(self, storage_layer_id, **kwargs):  # noqa: E501
        """Get a storage layer's samples  # noqa: E501

        $expand values (separate with a comma for multiple expands):  * location  * quantity  * meta  * experiments    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_samples_with_http_info(storage_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str sample_type_id: Filter by sampleTypeID
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str name: Filter by sample name
        :param str search: Search term to use for filtering samples.
        :param str quantity_id: Filter by quantityID
        :param str minimum_quantity_amount: Filter for samples that have a minimum quantity amount set
        :param str checked_out: Filter for checked out samples
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'sample_type_id', 'barcodes', 'name', 'search', 'quantity_id', 'minimum_quantity_amount', 'checked_out', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layer_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_get_storage_layer_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'sample_type_id' in params:
            query_params.append(('sampleTypeID', params['sample_type_id']))  # noqa: E501
        if 'barcodes' in params:
            query_params.append(('barcodes', params['barcodes']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'quantity_id' in params:
            query_params.append(('quantityID', params['quantity_id']))  # noqa: E501
        if 'minimum_quantity_amount' in params:
            query_params.append(('minimumQuantityAmount', params['minimum_quantity_amount']))  # noqa: E501
        if 'checked_out' in params:
            query_params.append(('checkedOut', params['checked_out']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layer_usage(self, storagelayer_id, **kwargs):  # noqa: E501
        """Get usage information on a specific storagelayer...  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_usage(storagelayer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storagelayer_id: (required)
        :param str x_requested_with: 
        :return: list[StorageUnitUsage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layer_usage_with_http_info(storagelayer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layer_usage_with_http_info(storagelayer_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layer_usage_with_http_info(self, storagelayer_id, **kwargs):  # noqa: E501
        """Get usage information on a specific storagelayer...  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layer_usage_with_http_info(storagelayer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storagelayer_id: (required)
        :param str x_requested_with: 
        :return: list[StorageUnitUsage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storagelayer_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layer_usage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storagelayer_id' is set
        if self.api_client.client_side_validation and ('storagelayer_id' not in params or
                                                       params['storagelayer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storagelayer_id` when calling `storage_get_storage_layer_usage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storagelayer_id' in params:
            path_params['storagelayerID'] = params['storagelayer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storagelayer/{storagelayerID}/usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StorageUnitUsage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layers(self, **kwargs):  # noqa: E501
        """Get storage unit/equipment compartments  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations    Note: the expand `statistics` is not available for this call because it's a resource intensive operation. You can only get a layer's statistics with the `GET /storageLayer/{storageLayerID}` call.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str parent_storage_layer_id: Filter by parentStorageLayerID
        :param str parent_storage_layer_ids: Filter by parentStorageLayerIDs (comma-separated)
        :param str storage_id: Filter by storageID
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str name: Filter by name
        :param str x_requested_with: 
        :return: PagedOfStorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layers_with_http_info(**kwargs)  # noqa: E501
            return data

    def storage_get_storage_layers_with_http_info(self, **kwargs):  # noqa: E501
        """Get storage unit/equipment compartments  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations    Note: the expand `statistics` is not available for this call because it's a resource intensive operation. You can only get a layer's statistics with the `GET /storageLayer/{storageLayerID}` call.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str parent_storage_layer_id: Filter by parentStorageLayerID
        :param str parent_storage_layer_ids: Filter by parentStorageLayerIDs (comma-separated)
        :param str storage_id: Filter by storageID
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str name: Filter by name
        :param str x_requested_with: 
        :return: PagedOfStorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'parent_storage_layer_id', 'parent_storage_layer_ids', 'storage_id', 'barcodes', 'name', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'parent_storage_layer_id' in params:
            query_params.append(('parentStorageLayerID', params['parent_storage_layer_id']))  # noqa: E501
        if 'parent_storage_layer_ids' in params:
            query_params.append(('parentStorageLayerIDs', params['parent_storage_layer_ids']))  # noqa: E501
        if 'storage_id' in params:
            query_params.append(('storageID', params['storage_id']))  # noqa: E501
        if 'barcodes' in params:
            query_params.append(('barcodes', params['barcodes']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageLayerLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_layers_for_barcodes(self, barcodes, **kwargs):  # noqa: E501
        """Get a storage unit/equipment compartment by its barcode  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layers_for_barcodes(barcodes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] barcodes: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_layers_for_barcodes_with_http_info(barcodes, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_layers_for_barcodes_with_http_info(barcodes, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_layers_for_barcodes_with_http_info(self, barcodes, **kwargs):  # noqa: E501
        """Get a storage unit/equipment compartment by its barcode  # noqa: E501

          $expand values (separate with a comma for multiple expands):  * storage  * location  * storageLayers  * samples  * managers  * reservations / allReservations    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_layers_for_barcodes_with_http_info(barcodes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] barcodes: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageLayerLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['barcodes', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_layers_for_barcodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'barcodes' is set
        if self.api_client.client_side_validation and ('barcodes' not in params or
                                                       params['barcodes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `barcodes` when calling `storage_get_storage_layers_for_barcodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'barcodes' in params:
            query_params.append(('barcodes', params['barcodes']))  # noqa: E501
            collection_formats['barcodes'] = 'multi'  # noqa: E501
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/forBarcodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageLayerLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_logs(self, storage_id, **kwargs):  # noqa: E501
        """Get a storage unit's full logs  # noqa: E501

        Note: this call only shows logs for storage units, not equipment.    The logs include all changes to a storage unit's compartments as well.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_logs(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageLogLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_logs_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_logs_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_logs_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get a storage unit's full logs  # noqa: E501

        Note: this call only shows logs for storage units, not equipment.    The logs include all changes to a storage unit's compartments as well.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_logs_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageLogLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageLogLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_managers(self, storage_id, **kwargs):  # noqa: E501
        """Get all of a storage unit or equipment managers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_managers(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageManager
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_managers_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_managers_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_managers_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get all of a storage unit or equipment managers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_managers_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageManager
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_managers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_managers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/managers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageManager',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_meta(self, storage_id, storage_meta_id, **kwargs):  # noqa: E501
        """Get an equipment or storage unit meta field by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_meta(storage_id, storage_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_meta_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_meta_with_http_info(storage_id, storage_meta_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_meta_with_http_info(storage_id, storage_meta_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_meta_with_http_info(self, storage_id, storage_meta_id, **kwargs):  # noqa: E501
        """Get an equipment or storage unit meta field by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_meta_with_http_info(storage_id, storage_meta_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_meta_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'storage_meta_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_meta`")  # noqa: E501
        # verify the required parameter 'storage_meta_id' is set
        if self.api_client.client_side_validation and ('storage_meta_id' not in params or
                                                       params['storage_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_meta_id` when calling `storage_get_storage_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501
        if 'storage_meta_id' in params:
            path_params['storageMetaID'] = params['storage_meta_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/meta/{storageMetaID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_metas(self, storage_id, **kwargs):  # noqa: E501
        """Get all of a equipment or storage unit meta fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_metas(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_metas_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_metas_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_metas_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get all of a equipment or storage unit meta fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_metas_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_metas" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_metas`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/meta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_report(self, storage_id, start, end, **kwargs):  # noqa: E501
        """Get an equipment reservations report  # noqa: E501

        This call downloads an equipment report .csv file. Reports will only work with equipment type devices. N.B. It is currently not possible to run this from Swagger. 'Start' and 'end' are the start date and end date of the report. The correct date format is: 'yyyy-MM-dd HH:mm:ss'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_report(storage_id, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param datetime start: (required)
        :param datetime end: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_report_with_http_info(storage_id, start, end, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_report_with_http_info(storage_id, start, end, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_report_with_http_info(self, storage_id, start, end, **kwargs):  # noqa: E501
        """Get an equipment reservations report  # noqa: E501

        This call downloads an equipment report .csv file. Reports will only work with equipment type devices. N.B. It is currently not possible to run this from Swagger. 'Start' and 'end' are the start date and end date of the report. The correct date format is: 'yyyy-MM-dd HH:mm:ss'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_report_with_http_info(storage_id, start, end, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param datetime start: (required)
        :param datetime end: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'start', 'end', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_report`")  # noqa: E501
        # verify the required parameter 'start' is set
        if self.api_client.client_side_validation and ('start' not in params or
                                                       params['start'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start` when calling `storage_get_storage_report`")  # noqa: E501
        # verify the required parameter 'end' is set
        if self.api_client.client_side_validation and ('end' not in params or
                                                       params['end'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `end` when calling `storage_get_storage_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_samples(self, storage_id, **kwargs):  # noqa: E501
        """Get a storage unit's samples  # noqa: E501

        $expand values (separate with a comma for multiple expands):  * location  * quantity  * meta  * experiments    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_samples(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str quantity_id: Filter by quantityID
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str sample_type_id: Filter by sampleTypeID
        :param str name: Filter by sample name
        :param str minimum_quantity_amount: Filter for samples that have a minimum quantity amount set
        :param str checked_out: Filter for checked out samples
        :param str search: Search term to use for filtering samples.
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_samples_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_samples_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_samples_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get a storage unit's samples  # noqa: E501

        $expand values (separate with a comma for multiple expands):  * location  * quantity  * meta  * experiments    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_samples_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str quantity_id: Filter by quantityID
        :param str barcodes: Filter by barcodes (comma-separated)
        :param str sample_type_id: Filter by sampleTypeID
        :param str name: Filter by sample name
        :param str minimum_quantity_amount: Filter for samples that have a minimum quantity amount set
        :param str checked_out: Filter for checked out samples
        :param str search: Search term to use for filtering samples.
        :param str x_requested_with: 
        :return: PagedOfSampleLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'quantity_id', 'barcodes', 'sample_type_id', 'name', 'minimum_quantity_amount', 'checked_out', 'search', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'quantity_id' in params:
            query_params.append(('quantityID', params['quantity_id']))  # noqa: E501
        if 'barcodes' in params:
            query_params.append(('barcodes', params['barcodes']))  # noqa: E501
        if 'sample_type_id' in params:
            query_params.append(('sampleTypeID', params['sample_type_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'minimum_quantity_amount' in params:
            query_params.append(('minimumQuantityAmount', params['minimum_quantity_amount']))  # noqa: E501
        if 'checked_out' in params:
            query_params.append(('checkedOut', params['checked_out']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfSampleLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_statistics(self, storage_id, **kwargs):  # noqa: E501
        """Get statistics for a storage unit  # noqa: E501

          The following statistics are returned:  * totalSamples - the amount of samples in all storage layers  * totalGridLayers - the amount of grid (i.e. multi-dimensional) storage layers  * totalFilledBoxes - the amount of grid layers that are fully filled with samples  * totalBoxPositions - the total amount of positions in all grid layers  * totalFilledPositions - the total amount of grid positions that have samples in them    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_statistics(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str x_requested_with: 
        :return: StorageStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_statistics_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_statistics_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_statistics_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get statistics for a storage unit  # noqa: E501

          The following statistics are returned:  * totalSamples - the amount of samples in all storage layers  * totalGridLayers - the amount of grid (i.e. multi-dimensional) storage layers  * totalFilledBoxes - the amount of grid layers that are fully filled with samples  * totalBoxPositions - the total amount of positions in all grid layers  * totalFilledPositions - the total amount of grid positions that have samples in them    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_statistics_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str x_requested_with: 
        :return: StorageStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_type_by_id(self, storage_type_id, **kwargs):  # noqa: E501
        """Get a storage unit/equipment type by id  # noqa: E501

          Note: the storage calls can return both storage units and equipment. You can differentiate between the two with the storage type's deviceType field which is either STORAGE or EQUIPMENT.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_type_by_id(storage_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_type_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_type_by_id_with_http_info(storage_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_type_by_id_with_http_info(storage_type_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_type_by_id_with_http_info(self, storage_type_id, **kwargs):  # noqa: E501
        """Get a storage unit/equipment type by id  # noqa: E501

          Note: the storage calls can return both storage units and equipment. You can differentiate between the two with the storage type's deviceType field which is either STORAGE or EQUIPMENT.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_type_by_id_with_http_info(storage_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_type_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_type_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_type_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_type_id' is set
        if self.api_client.client_side_validation and ('storage_type_id' not in params or
                                                       params['storage_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_type_id` when calling `storage_get_storage_type_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_type_id' in params:
            path_params['storageTypeID'] = params['storage_type_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageTypes/{storageTypeID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_types(self, **kwargs):  # noqa: E501
        """Get all storage unit/equipment types  # noqa: E501

          Note: the storage calls can return both storage units and equipment. You can differentiate between the two with the storage type's deviceType field which is either STORAGE or EQUIPMENT.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def storage_get_storage_types_with_http_info(self, **kwargs):  # noqa: E501
        """Get all storage unit/equipment types  # noqa: E501

          Note: the storage calls can return both storage units and equipment. You can differentiate between the two with the storage type's deviceType field which is either STORAGE or EQUIPMENT.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageTypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_validation(self, storage_id, storage_validation_id, **kwargs):  # noqa: E501
        """Get an equipment validation by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_validation(storage_id, storage_validation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_validation_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageValidation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_validation_with_http_info(storage_id, storage_validation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_validation_with_http_info(storage_id, storage_validation_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_validation_with_http_info(self, storage_id, storage_validation_id, **kwargs):  # noqa: E501
        """Get an equipment validation by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_validation_with_http_info(storage_id, storage_validation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_validation_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: StorageValidation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'storage_validation_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_validation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_validation`")  # noqa: E501
        # verify the required parameter 'storage_validation_id' is set
        if self.api_client.client_side_validation and ('storage_validation_id' not in params or
                                                       params['storage_validation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_validation_id` when calling `storage_get_storage_validation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501
        if 'storage_validation_id' in params:
            path_params['storageValidationID'] = params['storage_validation_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/validations/{storageValidationID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageValidation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_get_storage_validations(self, storage_id, **kwargs):  # noqa: E501
        """Get all of an equipment's validations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_validations(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageValidation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_get_storage_validations_with_http_info(storage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_get_storage_validations_with_http_info(storage_id, **kwargs)  # noqa: E501
            return data

    def storage_get_storage_validations_with_http_info(self, storage_id, **kwargs):  # noqa: E501
        """Get all of an equipment's validations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_get_storage_validations_with_http_info(storage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfStorageValidation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_get_storage_validations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_get_storage_validations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/validations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfStorageValidation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_move_storage_layer_to_layer(self, storage_layer_id, new_parent_layer_id, **kwargs):  # noqa: E501
        """Move a storage compartment into another compartment  # noqa: E501

        Note: you can not move a compartment into a box, only into other compartment types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_move_storage_layer_to_layer(storage_layer_id, new_parent_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int new_parent_layer_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_move_storage_layer_to_layer_with_http_info(storage_layer_id, new_parent_layer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_move_storage_layer_to_layer_with_http_info(storage_layer_id, new_parent_layer_id, **kwargs)  # noqa: E501
            return data

    def storage_move_storage_layer_to_layer_with_http_info(self, storage_layer_id, new_parent_layer_id, **kwargs):  # noqa: E501
        """Move a storage compartment into another compartment  # noqa: E501

        Note: you can not move a compartment into a box, only into other compartment types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_move_storage_layer_to_layer_with_http_info(storage_layer_id, new_parent_layer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int new_parent_layer_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'new_parent_layer_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_move_storage_layer_to_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_move_storage_layer_to_layer`")  # noqa: E501
        # verify the required parameter 'new_parent_layer_id' is set
        if self.api_client.client_side_validation and ('new_parent_layer_id' not in params or
                                                       params['new_parent_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_parent_layer_id` when calling `storage_move_storage_layer_to_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501
        if 'new_parent_layer_id' in params:
            path_params['newParentLayerID'] = params['new_parent_layer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/moveToLayer/{newParentLayerID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_patch_storage(self, storage_id, delta, **kwargs):  # noqa: E501
        """Update properties of a storage unit or equipment   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage(storage_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageNew delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_patch_storage_with_http_info(storage_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_patch_storage_with_http_info(storage_id, delta, **kwargs)  # noqa: E501
            return data

    def storage_patch_storage_with_http_info(self, storage_id, delta, **kwargs):  # noqa: E501
        """Update properties of a storage unit or equipment   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage_with_http_info(storage_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param StorageNew delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_patch_storage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_patch_storage`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `storage_patch_storage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_patch_storage_layer(self, storage_layer_id, delta, **kwargs):  # noqa: E501
        """Update a storage compartment's properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage_layer(storage_layer_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param StorageLayerUpdate delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_patch_storage_layer_with_http_info(storage_layer_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_patch_storage_layer_with_http_info(storage_layer_id, delta, **kwargs)  # noqa: E501
            return data

    def storage_patch_storage_layer_with_http_info(self, storage_layer_id, delta, **kwargs):  # noqa: E501
        """Update a storage compartment's properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage_layer_with_http_info(storage_layer_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param StorageLayerUpdate delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_patch_storage_layer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_patch_storage_layer`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `storage_patch_storage_layer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_patch_storage_layer_reservation(self, storage_layer_id, storage_layer_reservation_id, delta, **kwargs):  # noqa: E501
        """Update a storage/equipment compartment reservation  # noqa: E501

        To change to a permanent reservation set the end date/time to \"9999-12-31T00:00:00Z\".    Only a storage manager or the user who originally created the reservation may update a reservation.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage_layer_reservation(storage_layer_id, storage_layer_reservation_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int storage_layer_reservation_id: (required)
        :param StorageLayerReservationNew delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_patch_storage_layer_reservation_with_http_info(storage_layer_id, storage_layer_reservation_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_patch_storage_layer_reservation_with_http_info(storage_layer_id, storage_layer_reservation_id, delta, **kwargs)  # noqa: E501
            return data

    def storage_patch_storage_layer_reservation_with_http_info(self, storage_layer_id, storage_layer_reservation_id, delta, **kwargs):  # noqa: E501
        """Update a storage/equipment compartment reservation  # noqa: E501

        To change to a permanent reservation set the end date/time to \"9999-12-31T00:00:00Z\".    Only a storage manager or the user who originally created the reservation may update a reservation.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage_layer_reservation_with_http_info(storage_layer_id, storage_layer_reservation_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_layer_id: (required)
        :param int storage_layer_reservation_id: (required)
        :param StorageLayerReservationNew delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_layer_id', 'storage_layer_reservation_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_patch_storage_layer_reservation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_layer_id' is set
        if self.api_client.client_side_validation and ('storage_layer_id' not in params or
                                                       params['storage_layer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_id` when calling `storage_patch_storage_layer_reservation`")  # noqa: E501
        # verify the required parameter 'storage_layer_reservation_id' is set
        if self.api_client.client_side_validation and ('storage_layer_reservation_id' not in params or
                                                       params['storage_layer_reservation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_layer_reservation_id` when calling `storage_patch_storage_layer_reservation`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `storage_patch_storage_layer_reservation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_layer_id' in params:
            path_params['storageLayerID'] = params['storage_layer_id']  # noqa: E501
        if 'storage_layer_reservation_id' in params:
            path_params['storageLayerReservationID'] = params['storage_layer_reservation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storageLayers/{storageLayerID}/reservations/{storageLayerReservationID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_patch_storage_meta(self, storage_id, storage_meta_id, delta, **kwargs):  # noqa: E501
        """Update an equipment or storage unit meta field properties  # noqa: E501

        If you update a meta with type FILE you must supply a valid metaFileID of the file. See the Meta File calls. For other types the metaFileID is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage_meta(storage_id, storage_meta_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_meta_id: (required)
        :param StorageMeta delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_patch_storage_meta_with_http_info(storage_id, storage_meta_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_patch_storage_meta_with_http_info(storage_id, storage_meta_id, delta, **kwargs)  # noqa: E501
            return data

    def storage_patch_storage_meta_with_http_info(self, storage_id, storage_meta_id, delta, **kwargs):  # noqa: E501
        """Update an equipment or storage unit meta field properties  # noqa: E501

        If you update a meta with type FILE you must supply a valid metaFileID of the file. See the Meta File calls. For other types the metaFileID is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage_meta_with_http_info(storage_id, storage_meta_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_meta_id: (required)
        :param StorageMeta delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'storage_meta_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_patch_storage_meta" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_patch_storage_meta`")  # noqa: E501
        # verify the required parameter 'storage_meta_id' is set
        if self.api_client.client_side_validation and ('storage_meta_id' not in params or
                                                       params['storage_meta_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_meta_id` when calling `storage_patch_storage_meta`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `storage_patch_storage_meta`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501
        if 'storage_meta_id' in params:
            path_params['storageMetaID'] = params['storage_meta_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/meta/{storageMetaID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_patch_storage_validation(self, storage_id, storage_validation_id, delta, **kwargs):  # noqa: E501
        """Update an equipment validation properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage_validation(storage_id, storage_validation_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_validation_id: (required)
        :param StorageValidationNew delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_patch_storage_validation_with_http_info(storage_id, storage_validation_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_patch_storage_validation_with_http_info(storage_id, storage_validation_id, delta, **kwargs)  # noqa: E501
            return data

    def storage_patch_storage_validation_with_http_info(self, storage_id, storage_validation_id, delta, **kwargs):  # noqa: E501
        """Update an equipment validation properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_patch_storage_validation_with_http_info(storage_id, storage_validation_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int storage_id: (required)
        :param int storage_validation_id: (required)
        :param StorageValidationNew delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_id', 'storage_validation_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_patch_storage_validation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_id' is set
        if self.api_client.client_side_validation and ('storage_id' not in params or
                                                       params['storage_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_id` when calling `storage_patch_storage_validation`")  # noqa: E501
        # verify the required parameter 'storage_validation_id' is set
        if self.api_client.client_side_validation and ('storage_validation_id' not in params or
                                                       params['storage_validation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `storage_validation_id` when calling `storage_patch_storage_validation`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `storage_patch_storage_validation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_id' in params:
            path_params['storageID'] = params['storage_id']  # noqa: E501
        if 'storage_validation_id' in params:
            path_params['storageValidationID'] = params['storage_validation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/storage/{storageID}/validations/{storageValidationID}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
