# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from elabjournal_client.api_client import ApiClient


class AddOnsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def addon_approve_addon(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Approve an addon for installation by end users.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_approve_addon(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str approve_previous_versions: Optional: Also approve the previous versions of the add-on
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_approve_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_approve_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_approve_addon_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Approve an addon for installation by end users.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_approve_addon_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str approve_previous_versions: Optional: Also approve the previous versions of the add-on
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'expand', 'view_id', 'view_columns', 'approve_previous_versions', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_approve_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_approve_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'approve_previous_versions' in params:
            query_params.append(('approvePreviousVersions', params['approve_previous_versions']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/approve', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_delete_addon(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Delete the specified installed add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_delete_addon(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_delete_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_delete_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_delete_addon_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Delete the specified installed add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_delete_addon_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_delete_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_delete_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_delete_media_from_addon(self, sdk_plugin_id, media_id, **kwargs):  # noqa: E501
        """Delete given media for the specified add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_delete_media_from_addon(sdk_plugin_id, media_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param int media_id: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_delete_media_from_addon_with_http_info(sdk_plugin_id, media_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_delete_media_from_addon_with_http_info(sdk_plugin_id, media_id, **kwargs)  # noqa: E501
            return data

    def addon_delete_media_from_addon_with_http_info(self, sdk_plugin_id, media_id, **kwargs):  # noqa: E501
        """Delete given media for the specified add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_delete_media_from_addon_with_http_info(sdk_plugin_id, media_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param int media_id: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'media_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_delete_media_from_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_delete_media_from_addon`")  # noqa: E501
        # verify the required parameter 'media_id' is set
        if self.api_client.client_side_validation and ('media_id' not in params or
                                                       params['media_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `media_id` when calling `addon_delete_media_from_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501
        if 'media_id' in params:
            path_params['mediaID'] = params['media_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/media/{mediaID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_disable_addon(self, sdk_plugin_id, scope, **kwargs):  # noqa: E501
        """Disable the specified add-on for the given scope.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_disable_addon(sdk_plugin_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str scope: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_disable_addon_with_http_info(sdk_plugin_id, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_disable_addon_with_http_info(sdk_plugin_id, scope, **kwargs)  # noqa: E501
            return data

    def addon_disable_addon_with_http_info(self, sdk_plugin_id, scope, **kwargs):  # noqa: E501
        """Disable the specified add-on for the given scope.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_disable_addon_with_http_info(sdk_plugin_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str scope: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'scope', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_disable_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_disable_addon`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and ('scope' not in params or
                                                       params['scope'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `scope` when calling `addon_disable_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501
        if 'scope' in params:
            path_params['scope'] = params['scope']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/disable/{scope}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_enable_addon(self, sdk_plugin_id, scope, **kwargs):  # noqa: E501
        """Enable the specified add-on for the given scope.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_enable_addon(sdk_plugin_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str scope: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_enable_addon_with_http_info(sdk_plugin_id, scope, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_enable_addon_with_http_info(sdk_plugin_id, scope, **kwargs)  # noqa: E501
            return data

    def addon_enable_addon_with_http_info(self, sdk_plugin_id, scope, **kwargs):  # noqa: E501
        """Enable the specified add-on for the given scope.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_enable_addon_with_http_info(sdk_plugin_id, scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str scope: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'scope', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_enable_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_enable_addon`")  # noqa: E501
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and ('scope' not in params or
                                                       params['scope'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `scope` when calling `addon_enable_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501
        if 'scope' in params:
            path_params['scope'] = params['scope']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/enable/{scope}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_addon(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get an available addon by ID for internal use  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_addon(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PluginDetailed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_get_addon_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get an available addon by ID for internal use  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_addon_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PluginDetailed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_get_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginDetailed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_addon_config(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get the configuration details for the specified add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_addon_config(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_addon_config_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_addon_config_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_get_addon_config_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get the configuration details for the specified add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_addon_config_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_addon_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_get_addon_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html', 'application/hl7-v2'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_available_addons(self, **kwargs):  # noqa: E501
        """Retrieve list of addons for use in marketplace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_available_addons(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfPluginSmall
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_available_addons_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_available_addons_with_http_info(**kwargs)  # noqa: E501
            return data

    def addon_get_available_addons_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve list of addons for use in marketplace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_available_addons_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfPluginSmall
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_available_addons" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/available', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfPluginSmall',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_available_addons_grouped_by_version(self, **kwargs):  # noqa: E501
        """Get all available addons grouped by rootVar and included lower versioned add-ons.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_available_addons_grouped_by_version(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str root_var: Filter by addon identifier
        :param str scopes: Filter by scope
        :param str x_requested_with: 
        :return: PagedOfPluginSmallVersionGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_available_addons_grouped_by_version_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_available_addons_grouped_by_version_with_http_info(**kwargs)  # noqa: E501
            return data

    def addon_get_available_addons_grouped_by_version_with_http_info(self, **kwargs):  # noqa: E501
        """Get all available addons grouped by rootVar and included lower versioned add-ons.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_available_addons_grouped_by_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str root_var: Filter by addon identifier
        :param str scopes: Filter by scope
        :param str x_requested_with: 
        :return: PagedOfPluginSmallVersionGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'root_var', 'scopes', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_available_addons_grouped_by_version" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'root_var' in params:
            query_params.append(('rootVar', params['root_var']))  # noqa: E501
        if 'scopes' in params:
            query_params.append(('scopes', params['scopes']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/available/grouped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfPluginSmallVersionGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_available_upgrades_count(self, **kwargs):  # noqa: E501
        """Get the amount of available addon upgrades  # noqa: E501

        This call gets the amount of available addon upgrades in the marketplace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_available_upgrades_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_available_upgrades_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_available_upgrades_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def addon_get_available_upgrades_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get the amount of available addon upgrades  # noqa: E501

        This call gets the amount of available addon upgrades in the marketplace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_available_upgrades_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_available_upgrades_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/availableUpgradesCount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_groups_for_installed_addon(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get a list of groups which have the specified add-on installed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_groups_for_installed_addon(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[GroupSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_groups_for_installed_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_groups_for_installed_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_get_groups_for_installed_addon_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get a list of groups which have the specified add-on installed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_groups_for_installed_addon_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[GroupSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_groups_for_installed_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_get_groups_for_installed_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GroupSmall]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_installed_addon(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get the specified installed add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_installed_addon(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: InstalledAddon
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_installed_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_installed_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_get_installed_addon_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get the specified installed add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_installed_addon_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: InstalledAddon
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_installed_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_get_installed_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/installed/{sdkPluginID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstalledAddon',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_installed_addons(self, **kwargs):  # noqa: E501
        """List installed add-ons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_installed_addons(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str root_var: Filter by list of rootVars
        :param str category: Filter by category identifiers
        :param str x_requested_with: 
        :return: PagedOfInstalledAddon
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_installed_addons_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_installed_addons_with_http_info(**kwargs)  # noqa: E501
            return data

    def addon_get_installed_addons_with_http_info(self, **kwargs):  # noqa: E501
        """List installed add-ons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_installed_addons_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str root_var: Filter by list of rootVars
        :param str category: Filter by category identifiers
        :param str x_requested_with: 
        :return: PagedOfInstalledAddon
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'root_var', 'category', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_installed_addons" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'root_var' in params:
            query_params.append(('rootVar', params['root_var']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/installed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfInstalledAddon',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_institures_for_installed_addon(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get a list of institutes which have the specified add-on installed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_institures_for_installed_addon(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[OrganisationSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_institures_for_installed_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_institures_for_installed_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_get_institures_for_installed_addon_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get a list of institutes which have the specified add-on installed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_institures_for_installed_addon_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[OrganisationSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_institures_for_installed_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_get_institures_for_installed_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/institute', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrganisationSmall]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_get_users_for_installed_addon(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get a list of users which have the specified add-on installed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_users_for_installed_addon(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[UserSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_get_users_for_installed_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_get_users_for_installed_addon_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_get_users_for_installed_addon_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get a list of users which have the specified add-on installed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_get_users_for_installed_addon_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[UserSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_get_users_for_installed_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_get_users_for_installed_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserSmall]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_install_addon(self, addon, **kwargs):  # noqa: E501
        """Install the specified add-on for a given scope.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_install_addon(addon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScopedAddon addon: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_install_addon_with_http_info(addon, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_install_addon_with_http_info(addon, **kwargs)  # noqa: E501
            return data

    def addon_install_addon_with_http_info(self, addon, **kwargs):  # noqa: E501
        """Install the specified add-on for a given scope.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_install_addon_with_http_info(addon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScopedAddon addon: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_install_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon' is set
        if self.api_client.client_side_validation and ('addon' not in params or
                                                       params['addon'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `addon` when calling `addon_install_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'addon' in params:
            body_params = params['addon']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/install', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_publish_addon(self, addon, **kwargs):  # noqa: E501
        """Publish a new add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_publish_addon(addon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonPublish addon: (required)
        :param str x_requested_with: 
        :return: PluginSmall
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_publish_addon_with_http_info(addon, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_publish_addon_with_http_info(addon, **kwargs)  # noqa: E501
            return data

    def addon_publish_addon_with_http_info(self, addon, **kwargs):  # noqa: E501
        """Publish a new add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_publish_addon_with_http_info(addon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonPublish addon: (required)
        :param str x_requested_with: 
        :return: PluginSmall
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_publish_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon' is set
        if self.api_client.client_side_validation and ('addon' not in params or
                                                       params['addon'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `addon` when calling `addon_publish_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'addon' in params:
            body_params = params['addon']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginSmall',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_save_addon_config(self, config, **kwargs):  # noqa: E501
        """Set the configuration for the specified add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_save_addon_config(config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonConfiguration config: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_save_addon_config_with_http_info(config, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_save_addon_config_with_http_info(config, **kwargs)  # noqa: E501
            return data

    def addon_save_addon_config_with_http_info(self, config, **kwargs):  # noqa: E501
        """Set the configuration for the specified add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_save_addon_config_with_http_info(config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonConfiguration config: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_save_addon_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config' is set
        if self.api_client.client_side_validation and ('config' not in params or
                                                       params['config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `config` when calling `addon_save_addon_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'config' in params:
            body_params = params['config']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/configuration', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_sync_addons(self, **kwargs):  # noqa: E501
        """Synchronise the local addons with ones located in the remote sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_sync_addons(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: list[PluginDetailed]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_sync_addons_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.addon_sync_addons_with_http_info(**kwargs)  # noqa: E501
            return data

    def addon_sync_addons_with_http_info(self, **kwargs):  # noqa: E501
        """Synchronise the local addons with ones located in the remote sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_sync_addons_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: list[PluginDetailed]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_sync_addons" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/sync', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PluginDetailed]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_create_target_group(self, sdk_plugin_id, target_group, **kwargs):  # noqa: E501
        """Add new target group  # noqa: E501

        Create new target group to display/install this adddon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_create_target_group(sdk_plugin_id, target_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param TargetGroup target_group: (required)
        :param str x_requested_with: 
        :return: SDKTargetGroupMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_create_target_group_with_http_info(sdk_plugin_id, target_group, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_create_target_group_with_http_info(sdk_plugin_id, target_group, **kwargs)  # noqa: E501
            return data

    def addon_target_create_target_group_with_http_info(self, sdk_plugin_id, target_group, **kwargs):  # noqa: E501
        """Add new target group  # noqa: E501

        Create new target group to display/install this adddon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_create_target_group_with_http_info(sdk_plugin_id, target_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param TargetGroup target_group: (required)
        :param str x_requested_with: 
        :return: SDKTargetGroupMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'target_group', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_create_target_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_create_target_group`")  # noqa: E501
        # verify the required parameter 'target_group' is set
        if self.api_client.client_side_validation and ('target_group' not in params or
                                                       params['target_group'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_group` when calling `addon_target_create_target_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'target_group' in params:
            body_params = params['target_group']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SDKTargetGroupMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_create_target_organisation(self, sdk_plugin_id, target_organisation, **kwargs):  # noqa: E501
        """Add new target organisation  # noqa: E501

        Create new target organisation to display/install this adddon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_create_target_organisation(sdk_plugin_id, target_organisation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param TargetOrganisation target_organisation: (required)
        :param str x_requested_with: 
        :return: SDKTargetOrganisationMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_create_target_organisation_with_http_info(sdk_plugin_id, target_organisation, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_create_target_organisation_with_http_info(sdk_plugin_id, target_organisation, **kwargs)  # noqa: E501
            return data

    def addon_target_create_target_organisation_with_http_info(self, sdk_plugin_id, target_organisation, **kwargs):  # noqa: E501
        """Add new target organisation  # noqa: E501

        Create new target organisation to display/install this adddon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_create_target_organisation_with_http_info(sdk_plugin_id, target_organisation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param TargetOrganisation target_organisation: (required)
        :param str x_requested_with: 
        :return: SDKTargetOrganisationMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'target_organisation', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_create_target_organisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_create_target_organisation`")  # noqa: E501
        # verify the required parameter 'target_organisation' is set
        if self.api_client.client_side_validation and ('target_organisation' not in params or
                                                       params['target_organisation'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_organisation` when calling `addon_target_create_target_organisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'target_organisation' in params:
            body_params = params['target_organisation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/organisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SDKTargetOrganisationMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_create_target_user(self, sdk_plugin_id, target_user, **kwargs):  # noqa: E501
        """Add new target user  # noqa: E501

        Create new target user to display/install this adddon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_create_target_user(sdk_plugin_id, target_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param TargetUser target_user: (required)
        :param str x_requested_with: 
        :return: SDKTargetUserMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_create_target_user_with_http_info(sdk_plugin_id, target_user, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_create_target_user_with_http_info(sdk_plugin_id, target_user, **kwargs)  # noqa: E501
            return data

    def addon_target_create_target_user_with_http_info(self, sdk_plugin_id, target_user, **kwargs):  # noqa: E501
        """Add new target user  # noqa: E501

        Create new target user to display/install this adddon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_create_target_user_with_http_info(sdk_plugin_id, target_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param TargetUser target_user: (required)
        :param str x_requested_with: 
        :return: SDKTargetUserMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'target_user', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_create_target_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_create_target_user`")  # noqa: E501
        # verify the required parameter 'target_user' is set
        if self.api_client.client_side_validation and ('target_user' not in params or
                                                       params['target_user'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `target_user` when calling `addon_target_create_target_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'target_user' in params:
            body_params = params['target_user']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SDKTargetUserMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_create_targets(self, sdk_plugin_id, targets, **kwargs):  # noqa: E501
        """Create targets for addons (users, organisations and/or groups  # noqa: E501

        Create targets for addons (users, organisations and/or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_create_targets(sdk_plugin_id, targets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param MixedTargets targets: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_create_targets_with_http_info(sdk_plugin_id, targets, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_create_targets_with_http_info(sdk_plugin_id, targets, **kwargs)  # noqa: E501
            return data

    def addon_target_create_targets_with_http_info(self, sdk_plugin_id, targets, **kwargs):  # noqa: E501
        """Create targets for addons (users, organisations and/or groups  # noqa: E501

        Create targets for addons (users, organisations and/or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_create_targets_with_http_info(sdk_plugin_id, targets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param MixedTargets targets: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'targets', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_create_targets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_create_targets`")  # noqa: E501
        # verify the required parameter 'targets' is set
        if self.api_client.client_side_validation and ('targets' not in params or
                                                       params['targets'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `targets` when calling `addon_target_create_targets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'targets' in params:
            body_params = params['targets']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_get_groups_outside_target(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get groups for addons that have the add-on installed but do not fall within the specified target  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_groups_outside_target(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[GroupSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_get_groups_outside_target_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_get_groups_outside_target_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_target_get_groups_outside_target_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get groups for addons that have the add-on installed but do not fall within the specified target  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_groups_outside_target_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[GroupSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_get_groups_outside_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_get_groups_outside_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/validateTarget/group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GroupSmall]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_get_target_groups(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """List all target groups for specified addon  # noqa: E501

        Lists the targets groups that are allowed to see display/install this addon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_target_groups(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[GroupSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_get_target_groups_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_get_target_groups_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_target_get_target_groups_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """List all target groups for specified addon  # noqa: E501

        Lists the targets groups that are allowed to see display/install this addon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_target_groups_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[GroupSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_get_target_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_get_target_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GroupSmall]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_get_target_organisations(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """List all target organisations for specified addon  # noqa: E501

        Lists the targets organisations that are allowed to see display/install this addon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_target_organisations(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[OrganisationSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_get_target_organisations_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_get_target_organisations_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_target_get_target_organisations_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """List all target organisations for specified addon  # noqa: E501

        Lists the targets organisations that are allowed to see display/install this addon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_target_organisations_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[OrganisationSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_get_target_organisations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_get_target_organisations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/organisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrganisationSmall]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_get_target_users(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """List all target users for specified addon  # noqa: E501

        Lists the targets users that are allowed to see display/install this addon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_target_users(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[UserSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_get_target_users_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_get_target_users_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_target_get_target_users_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """List all target users for specified addon  # noqa: E501

        Lists the targets users that are allowed to see display/install this addon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_target_users_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[UserSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_get_target_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_get_target_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserSmall]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_get_targets(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get targets for addons (users, organisations and/or groups  # noqa: E501

        Get targets for addons (users, organisations and/or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_targets(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: MixedTargets
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_get_targets_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_get_targets_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_target_get_targets_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Get targets for addons (users, organisations and/or groups  # noqa: E501

        Get targets for addons (users, organisations and/or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_targets_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: MixedTargets
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_get_targets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_get_targets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MixedTargets',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_get_users_outside_target(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """addon_target_get_users_outside_target  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_users_outside_target(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[UserSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_get_users_outside_target_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_get_users_outside_target_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_target_get_users_outside_target_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """addon_target_get_users_outside_target  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_get_users_outside_target_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: list[UserSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_get_users_outside_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_get_users_outside_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/validateTarget/user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserSmall]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_remove_target_group(self, sdk_plugin_id, group_id, **kwargs):  # noqa: E501
        """Remove group target from addon  # noqa: E501

        Remove group from list of groups that can install/display this addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_remove_target_group(sdk_plugin_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param int group_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_remove_target_group_with_http_info(sdk_plugin_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_remove_target_group_with_http_info(sdk_plugin_id, group_id, **kwargs)  # noqa: E501
            return data

    def addon_target_remove_target_group_with_http_info(self, sdk_plugin_id, group_id, **kwargs):  # noqa: E501
        """Remove group target from addon  # noqa: E501

        Remove group from list of groups that can install/display this addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_remove_target_group_with_http_info(sdk_plugin_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param int group_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'group_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_remove_target_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_remove_target_group`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `addon_target_remove_target_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/groups/{groupID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_remove_target_organisation(self, sdk_plugin_id, organisation_id, **kwargs):  # noqa: E501
        """Remove organisation target from addon  # noqa: E501

        Remove organisation from list of organisations that can install/display this addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_remove_target_organisation(sdk_plugin_id, organisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param int organisation_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_remove_target_organisation_with_http_info(sdk_plugin_id, organisation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_remove_target_organisation_with_http_info(sdk_plugin_id, organisation_id, **kwargs)  # noqa: E501
            return data

    def addon_target_remove_target_organisation_with_http_info(self, sdk_plugin_id, organisation_id, **kwargs):  # noqa: E501
        """Remove organisation target from addon  # noqa: E501

        Remove organisation from list of organisations that can install/display this addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_remove_target_organisation_with_http_info(sdk_plugin_id, organisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param int organisation_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'organisation_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_remove_target_organisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_remove_target_organisation`")  # noqa: E501
        # verify the required parameter 'organisation_id' is set
        if self.api_client.client_side_validation and ('organisation_id' not in params or
                                                       params['organisation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organisation_id` when calling `addon_target_remove_target_organisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501
        if 'organisation_id' in params:
            path_params['organisationID'] = params['organisation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/organisations/{organisationID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_remove_target_user(self, sdk_plugin_id, user_id, **kwargs):  # noqa: E501
        """Remove user target from addon  # noqa: E501

        Remove user from list of users that can install/display this addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_remove_target_user(sdk_plugin_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_remove_target_user_with_http_info(sdk_plugin_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_remove_target_user_with_http_info(sdk_plugin_id, user_id, **kwargs)  # noqa: E501
            return data

    def addon_target_remove_target_user_with_http_info(self, sdk_plugin_id, user_id, **kwargs):  # noqa: E501
        """Remove user target from addon  # noqa: E501

        Remove user from list of users that can install/display this addon  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_remove_target_user_with_http_info(sdk_plugin_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'user_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_remove_target_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_remove_target_user`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `addon_target_remove_target_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target/users/{userID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_target_update_targets(self, sdk_plugin_id, targets, **kwargs):  # noqa: E501
        """Update targets for addons (users, organisations and/or groups  # noqa: E501

        Update targets for addons (users, organisations and/or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_update_targets(sdk_plugin_id, targets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param MixedTargets targets: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_target_update_targets_with_http_info(sdk_plugin_id, targets, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_target_update_targets_with_http_info(sdk_plugin_id, targets, **kwargs)  # noqa: E501
            return data

    def addon_target_update_targets_with_http_info(self, sdk_plugin_id, targets, **kwargs):  # noqa: E501
        """Update targets for addons (users, organisations and/or groups  # noqa: E501

        Update targets for addons (users, organisations and/or groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_target_update_targets_with_http_info(sdk_plugin_id, targets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param MixedTargets targets: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'targets', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_target_update_targets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_target_update_targets`")  # noqa: E501
        # verify the required parameter 'targets' is set
        if self.api_client.client_side_validation and ('targets' not in params or
                                                       params['targets'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `targets` when calling `addon_target_update_targets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'targets' in params:
            body_params = params['targets']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/target', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_uninstall_addon(self, addon, **kwargs):  # noqa: E501
        """Uninstall the specified add-on for a given scope.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_uninstall_addon(addon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScopedAddon addon: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_uninstall_addon_with_http_info(addon, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_uninstall_addon_with_http_info(addon, **kwargs)  # noqa: E501
            return data

    def addon_uninstall_addon_with_http_info(self, addon, **kwargs):  # noqa: E501
        """Uninstall the specified add-on for a given scope.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_uninstall_addon_with_http_info(addon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScopedAddon addon: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_uninstall_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon' is set
        if self.api_client.client_side_validation and ('addon' not in params or
                                                       params['addon'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `addon` when calling `addon_uninstall_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'addon' in params:
            body_params = params['addon']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/uninstall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_update_addon(self, addon, **kwargs):  # noqa: E501
        """Update existing add-on contents.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_update_addon(addon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonPublish addon: (required)
        :param str x_requested_with: 
        :return: PluginDetailed
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_update_addon_with_http_info(addon, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_update_addon_with_http_info(addon, **kwargs)  # noqa: E501
            return data

    def addon_update_addon_with_http_info(self, addon, **kwargs):  # noqa: E501
        """Update existing add-on contents.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_update_addon_with_http_info(addon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonPublish addon: (required)
        :param str x_requested_with: 
        :return: PluginDetailed
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['addon', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_update_addon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'addon' is set
        if self.api_client.client_side_validation and ('addon' not in params or
                                                       params['addon'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `addon` when calling `addon_update_addon`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'addon' in params:
            body_params = params['addon']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/publish', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginDetailed',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_update_all(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Update all other installed versions of this addon to this version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_update_all(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: dict(str, int)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_update_all_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_update_all_with_http_info(sdk_plugin_id, **kwargs)  # noqa: E501
            return data

    def addon_update_all_with_http_info(self, sdk_plugin_id, **kwargs):  # noqa: E501
        """Update all other installed versions of this addon to this version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_update_all_with_http_info(sdk_plugin_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param str x_requested_with: 
        :return: dict(str, int)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_update_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_update_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/updateall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, int)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def addon_upload_media(self, sdk_plugin_id, parameters, **kwargs):  # noqa: E501
        """Add media to the specified add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_upload_media(sdk_plugin_id, parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param MediaFile parameters: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.addon_upload_media_with_http_info(sdk_plugin_id, parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.addon_upload_media_with_http_info(sdk_plugin_id, parameters, **kwargs)  # noqa: E501
            return data

    def addon_upload_media_with_http_info(self, sdk_plugin_id, parameters, **kwargs):  # noqa: E501
        """Add media to the specified add-on.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.addon_upload_media_with_http_info(sdk_plugin_id, parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sdk_plugin_id: (required)
        :param MediaFile parameters: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sdk_plugin_id', 'parameters', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addon_upload_media" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sdk_plugin_id' is set
        if self.api_client.client_side_validation and ('sdk_plugin_id' not in params or
                                                       params['sdk_plugin_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `sdk_plugin_id` when calling `addon_upload_media`")  # noqa: E501
        # verify the required parameter 'parameters' is set
        if self.api_client.client_side_validation and ('parameters' not in params or
                                                       params['parameters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `parameters` when calling `addon_upload_media`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sdk_plugin_id' in params:
            path_params['sdkPluginID'] = params['sdk_plugin_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters' in params:
            body_params = params['parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/{sdkPluginID}/media', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bundle_create_bundle(self, create_bundle, **kwargs):  # noqa: E501
        """bundle_create_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_create_bundle(create_bundle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonBundleDTO create_bundle: (required)
        :param str x_requested_with: 
        :return: AddonBundle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bundle_create_bundle_with_http_info(create_bundle, **kwargs)  # noqa: E501
        else:
            (data) = self.bundle_create_bundle_with_http_info(create_bundle, **kwargs)  # noqa: E501
            return data

    def bundle_create_bundle_with_http_info(self, create_bundle, **kwargs):  # noqa: E501
        """bundle_create_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_create_bundle_with_http_info(create_bundle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonBundleDTO create_bundle: (required)
        :param str x_requested_with: 
        :return: AddonBundle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_bundle', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bundle_create_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_bundle' is set
        if self.api_client.client_side_validation and ('create_bundle' not in params or
                                                       params['create_bundle'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_bundle` when calling `bundle_create_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_bundle' in params:
            body_params = params['create_bundle']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/bundles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddonBundle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bundle_delete_bundle(self, bundle_id, **kwargs):  # noqa: E501
        """bundle_delete_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_delete_bundle(bundle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bundle_id: (required)
        :param str x_requested_with: 
        :return: AddonBundle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bundle_delete_bundle_with_http_info(bundle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bundle_delete_bundle_with_http_info(bundle_id, **kwargs)  # noqa: E501
            return data

    def bundle_delete_bundle_with_http_info(self, bundle_id, **kwargs):  # noqa: E501
        """bundle_delete_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_delete_bundle_with_http_info(bundle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bundle_id: (required)
        :param str x_requested_with: 
        :return: AddonBundle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bundle_delete_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if self.api_client.client_side_validation and ('bundle_id' not in params or
                                                       params['bundle_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle_id` when calling `bundle_delete_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['BundleID'] = params['bundle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/bundles/{BundleID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddonBundle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bundle_get_bundles(self, **kwargs):  # noqa: E501
        """bundle_get_bundles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_get_bundles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: list[AddonBundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bundle_get_bundles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bundle_get_bundles_with_http_info(**kwargs)  # noqa: E501
            return data

    def bundle_get_bundles_with_http_info(self, **kwargs):  # noqa: E501
        """bundle_get_bundles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_get_bundles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: list[AddonBundle]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bundle_get_bundles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/bundles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AddonBundle]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bundle_install_bundle(self, bundle, **kwargs):  # noqa: E501
        """bundle_install_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_install_bundle(bundle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScopedBundle bundle: (required)
        :param str x_requested_with: 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bundle_install_bundle_with_http_info(bundle, **kwargs)  # noqa: E501
        else:
            (data) = self.bundle_install_bundle_with_http_info(bundle, **kwargs)  # noqa: E501
            return data

    def bundle_install_bundle_with_http_info(self, bundle, **kwargs):  # noqa: E501
        """bundle_install_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_install_bundle_with_http_info(bundle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScopedBundle bundle: (required)
        :param str x_requested_with: 
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bundle_install_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle' is set
        if self.api_client.client_side_validation and ('bundle' not in params or
                                                       params['bundle'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle` when calling `bundle_install_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bundle' in params:
            body_params = params['bundle']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/bundles/install', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bundle_update_bundle(self, create_bundle, bundle_id, **kwargs):  # noqa: E501
        """bundle_update_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_update_bundle(create_bundle, bundle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonBundleDTO create_bundle: (required)
        :param int bundle_id: (required)
        :param str x_requested_with: 
        :return: AddonBundle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bundle_update_bundle_with_http_info(create_bundle, bundle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bundle_update_bundle_with_http_info(create_bundle, bundle_id, **kwargs)  # noqa: E501
            return data

    def bundle_update_bundle_with_http_info(self, create_bundle, bundle_id, **kwargs):  # noqa: E501
        """bundle_update_bundle  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bundle_update_bundle_with_http_info(create_bundle, bundle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddonBundleDTO create_bundle: (required)
        :param int bundle_id: (required)
        :param str x_requested_with: 
        :return: AddonBundle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_bundle', 'bundle_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bundle_update_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_bundle' is set
        if self.api_client.client_side_validation and ('create_bundle' not in params or
                                                       params['create_bundle'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_bundle` when calling `bundle_update_bundle`")  # noqa: E501
        # verify the required parameter 'bundle_id' is set
        if self.api_client.client_side_validation and ('bundle_id' not in params or
                                                       params['bundle_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `bundle_id` when calling `bundle_update_bundle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['BundleID'] = params['bundle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_bundle' in params:
            body_params = params['create_bundle']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/bundles/{BundleID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddonBundle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_create_category(self, create_category, **kwargs):  # noqa: E501
        """category_create_category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_create_category(create_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CategoryDTO create_category: (required)
        :param str x_requested_with: 
        :return: AddonCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_create_category_with_http_info(create_category, **kwargs)  # noqa: E501
        else:
            (data) = self.category_create_category_with_http_info(create_category, **kwargs)  # noqa: E501
            return data

    def category_create_category_with_http_info(self, create_category, **kwargs):  # noqa: E501
        """category_create_category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_create_category_with_http_info(create_category, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CategoryDTO create_category: (required)
        :param str x_requested_with: 
        :return: AddonCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_category', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_create_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_category' is set
        if self.api_client.client_side_validation and ('create_category' not in params or
                                                       params['create_category'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_category` when calling `category_create_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_category' in params:
            body_params = params['create_category']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddonCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_delete_category(self, category_id, **kwargs):  # noqa: E501
        """category_delete_category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_delete_category(category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_id: (required)
        :param str x_requested_with: 
        :return: AddonCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_delete_category_with_http_info(category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.category_delete_category_with_http_info(category_id, **kwargs)  # noqa: E501
            return data

    def category_delete_category_with_http_info(self, category_id, **kwargs):  # noqa: E501
        """category_delete_category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_delete_category_with_http_info(category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_id: (required)
        :param str x_requested_with: 
        :return: AddonCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_delete_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if self.api_client.client_side_validation and ('category_id' not in params or
                                                       params['category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `category_id` when calling `category_delete_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_id' in params:
            path_params['categoryID'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/categories/{categoryID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddonCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_get_categories(self, **kwargs):  # noqa: E501
        """category_get_categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_get_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: list[AddonCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_get_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.category_get_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def category_get_categories_with_http_info(self, **kwargs):  # noqa: E501
        """category_get_categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_get_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: list[AddonCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_get_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AddonCategory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def category_update_category(self, create_category, category_id, **kwargs):  # noqa: E501
        """category_update_category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_update_category(create_category, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CategoryDTO create_category: (required)
        :param int category_id: (required)
        :param str x_requested_with: 
        :return: AddonCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.category_update_category_with_http_info(create_category, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.category_update_category_with_http_info(create_category, category_id, **kwargs)  # noqa: E501
            return data

    def category_update_category_with_http_info(self, create_category, category_id, **kwargs):  # noqa: E501
        """category_update_category  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.category_update_category_with_http_info(create_category, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CategoryDTO create_category: (required)
        :param int category_id: (required)
        :param str x_requested_with: 
        :return: AddonCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_category', 'category_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method category_update_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_category' is set
        if self.api_client.client_side_validation and ('create_category' not in params or
                                                       params['create_category'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_category` when calling `category_update_category`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if self.api_client.client_side_validation and ('category_id' not in params or
                                                       params['category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `category_id` when calling `category_update_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_id' in params:
            path_params['categoryID'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_category' in params:
            body_params = params['create_category']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/categories/{categoryID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddonCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def foreign_source_create_foreign_source(self, source, **kwargs):  # noqa: E501
        """Create a new registered source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_create_foreign_source(source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ForeignSource source: (required)
        :param str x_requested_with: 
        :return: ForeignSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.foreign_source_create_foreign_source_with_http_info(source, **kwargs)  # noqa: E501
        else:
            (data) = self.foreign_source_create_foreign_source_with_http_info(source, **kwargs)  # noqa: E501
            return data

    def foreign_source_create_foreign_source_with_http_info(self, source, **kwargs):  # noqa: E501
        """Create a new registered source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_create_foreign_source_with_http_info(source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ForeignSource source: (required)
        :param str x_requested_with: 
        :return: ForeignSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method foreign_source_create_foreign_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if self.api_client.client_side_validation and ('source' not in params or
                                                       params['source'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source` when calling `foreign_source_create_foreign_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'source' in params:
            body_params = params['source']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/sources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ForeignSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def foreign_source_delete_foreign_source(self, id, **kwargs):  # noqa: E501
        """Remove a registered source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_delete_foreign_source(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.foreign_source_delete_foreign_source_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.foreign_source_delete_foreign_source_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def foreign_source_delete_foreign_source_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove a registered source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_delete_foreign_source_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method foreign_source_delete_foreign_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `foreign_source_delete_foreign_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/sources/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def foreign_source_get_foreign_source(self, id, **kwargs):  # noqa: E501
        """Get a specific source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_get_foreign_source(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ForeignSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.foreign_source_get_foreign_source_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.foreign_source_get_foreign_source_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def foreign_source_get_foreign_source_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a specific source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_get_foreign_source_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ForeignSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method foreign_source_get_foreign_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `foreign_source_get_foreign_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/sources/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ForeignSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def foreign_source_get_foreign_sources(self, **kwargs):  # noqa: E501
        """Get a list of registered sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_get_foreign_sources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: list[ForeignSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.foreign_source_get_foreign_sources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.foreign_source_get_foreign_sources_with_http_info(**kwargs)  # noqa: E501
            return data

    def foreign_source_get_foreign_sources_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of registered sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_get_foreign_sources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: list[ForeignSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method foreign_source_get_foreign_sources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/sources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ForeignSource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def foreign_source_update_foreign_source(self, id, source, **kwargs):  # noqa: E501
        """Update a source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_update_foreign_source(id, source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ForeignSource source: (required)
        :param str x_requested_with: 
        :return: ForeignSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.foreign_source_update_foreign_source_with_http_info(id, source, **kwargs)  # noqa: E501
        else:
            (data) = self.foreign_source_update_foreign_source_with_http_info(id, source, **kwargs)  # noqa: E501
            return data

    def foreign_source_update_foreign_source_with_http_info(self, id, source, **kwargs):  # noqa: E501
        """Update a source  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.foreign_source_update_foreign_source_with_http_info(id, source, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param ForeignSource source: (required)
        :param str x_requested_with: 
        :return: ForeignSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'source', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method foreign_source_update_foreign_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `foreign_source_update_foreign_source`")  # noqa: E501
        # verify the required parameter 'source' is set
        if self.api_client.client_side_validation and ('source' not in params or
                                                       params['source'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source` when calling `foreign_source_update_foreign_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'source' in params:
            body_params = params['source']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/sources/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ForeignSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permission_get_permissions(self, **kwargs):  # noqa: E501
        """permission_get_permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permission_get_permissions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: MarketPlacePermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.permission_get_permissions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.permission_get_permissions_with_http_info(**kwargs)  # noqa: E501
            return data

    def permission_get_permissions_with_http_info(self, **kwargs):  # noqa: E501
        """permission_get_permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permission_get_permissions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: MarketPlacePermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permission_get_permissions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarketPlacePermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_type_meta_get_addon_sample_meta(self, **kwargs):  # noqa: E501
        """sample_type_meta_get_addon_sample_meta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_meta_get_addon_sample_meta(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: list[AddonSampleTypeMeta]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_type_meta_get_addon_sample_meta_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_type_meta_get_addon_sample_meta_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_type_meta_get_addon_sample_meta_with_http_info(self, **kwargs):  # noqa: E501
        """sample_type_meta_get_addon_sample_meta  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_type_meta_get_addon_sample_meta_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_requested_with: 
        :return: list[AddonSampleTypeMeta]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_type_meta_get_addon_sample_meta" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/addons/sampleTypeMeta', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AddonSampleTypeMeta]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
