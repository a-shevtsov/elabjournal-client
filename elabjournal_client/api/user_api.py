# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from elabjournal_client.api_client import ApiClient


class UserApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_get_current_user_id(self, **kwargs):  # noqa: E501
        """Get the current user Info  # noqa: E501

                  $expand values (separate with a comma for multiple expands):          * permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_current_user_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: UserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_current_user_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_get_current_user_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_get_current_user_id_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current user Info  # noqa: E501

                  $expand values (separate with a comma for multiple expands):          * permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_current_user_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: UserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_current_user_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/getCurrentUserInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_current_user_plugin_setting(self, setting, **kwargs):  # noqa: E501
        """Get the current user plugin setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_current_user_plugin_setting(setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting: (required)
        :param str x_requested_with: 
        :return: UserSettingDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_current_user_plugin_setting_with_http_info(setting, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_current_user_plugin_setting_with_http_info(setting, **kwargs)  # noqa: E501
            return data

    def user_get_current_user_plugin_setting_with_http_info(self, setting, **kwargs):  # noqa: E501
        """Get the current user plugin setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_current_user_plugin_setting_with_http_info(setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting: (required)
        :param str x_requested_with: 
        :return: UserSettingDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_current_user_plugin_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting' is set
        if self.api_client.client_side_validation and ('setting' not in params or
                                                       params['setting'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `setting` when calling `user_get_current_user_plugin_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting' in params:
            path_params['setting'] = params['setting']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/setting/plugin/{setting}/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSettingDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_current_user_setting(self, setting, **kwargs):  # noqa: E501
        """Get the current user setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_current_user_setting(setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting: (required)
        :param str x_requested_with: 
        :return: UserSettingDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_current_user_setting_with_http_info(setting, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_current_user_setting_with_http_info(setting, **kwargs)  # noqa: E501
            return data

    def user_get_current_user_setting_with_http_info(self, setting, **kwargs):  # noqa: E501
        """Get the current user setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_current_user_setting_with_http_info(setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting: (required)
        :param str x_requested_with: 
        :return: UserSettingDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_current_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting' is set
        if self.api_client.client_side_validation and ('setting' not in params or
                                                       params['setting'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `setting` when calling `user_get_current_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting' in params:
            path_params['setting'] = params['setting']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/setting/{setting}/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSettingDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_user_info(self, user_id, **kwargs):  # noqa: E501
        """Get the information of a user  # noqa: E501

        Get the information of a user within your group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_user_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: UserDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_user_info_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_user_info_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_get_user_info_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get the information of a user  # noqa: E501

        Get the information of a user within your group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_user_info_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: UserDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_user_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_get_user_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/{userID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_get_user_profile(self, user_id, **kwargs):  # noqa: E501
        """Get the profile of a user  # noqa: E501

        Get the profile of a user within your group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_user_profile(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_get_user_profile_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_get_user_profile_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_get_user_profile_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get the profile of a user  # noqa: E501

        Get the profile of a user within your group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_get_user_profile_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param str x_requested_with: 
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_get_user_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_get_user_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/{userID}/profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Profile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_search_users(self, email, **kwargs):  # noqa: E501
        """Find users by email address  # noqa: E501

        Email address needs to be exact unless you have system admin privileges.   System administrators need to provide a minimum of 3 characters to search. A maximum of 250 records will be returned.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_search_users(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str x_requested_with: 
        :return: list[UserSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_search_users_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.user_search_users_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def user_search_users_with_http_info(self, email, **kwargs):  # noqa: E501
        """Find users by email address  # noqa: E501

        Email address needs to be exact unless you have system admin privileges.   System administrators need to provide a minimum of 3 characters to search. A maximum of 250 records will be returned.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_search_users_with_http_info(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str x_requested_with: 
        :return: list[UserSmall]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_search_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if self.api_client.client_side_validation and ('email' not in params or
                                                       params['email'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `email` when calling `user_search_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserSmall]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_set_current_user_plugin_setting(self, setting, value, **kwargs):  # noqa: E501
        """Set the current user plugin setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_set_current_user_plugin_setting(setting, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting: (required)
        :param str value: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_set_current_user_plugin_setting_with_http_info(setting, value, **kwargs)  # noqa: E501
        else:
            (data) = self.user_set_current_user_plugin_setting_with_http_info(setting, value, **kwargs)  # noqa: E501
            return data

    def user_set_current_user_plugin_setting_with_http_info(self, setting, value, **kwargs):  # noqa: E501
        """Set the current user plugin setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_set_current_user_plugin_setting_with_http_info(setting, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting: (required)
        :param str value: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting', 'value', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_set_current_user_plugin_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting' is set
        if self.api_client.client_side_validation and ('setting' not in params or
                                                       params['setting'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `setting` when calling `user_set_current_user_plugin_setting`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `user_set_current_user_plugin_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting' in params:
            path_params['setting'] = params['setting']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/setting/plugin/{setting}/set/{value}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_set_current_user_setting(self, setting, value, **kwargs):  # noqa: E501
        """Set the current user setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_set_current_user_setting(setting, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting: (required)
        :param str value: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_set_current_user_setting_with_http_info(setting, value, **kwargs)  # noqa: E501
        else:
            (data) = self.user_set_current_user_setting_with_http_info(setting, value, **kwargs)  # noqa: E501
            return data

    def user_set_current_user_setting_with_http_info(self, setting, value, **kwargs):  # noqa: E501
        """Set the current user setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_set_current_user_setting_with_http_info(setting, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting: (required)
        :param str value: (required)
        :param str x_requested_with: 
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting', 'value', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_set_current_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting' is set
        if self.api_client.client_side_validation and ('setting' not in params or
                                                       params['setting'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `setting` when calling `user_set_current_user_setting`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `user_set_current_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting' in params:
            path_params['setting'] = params['setting']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/setting/{setting}/set/{value}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_admin_create_user_setting(self, user_id, dto, **kwargs):  # noqa: E501
        """Create user setting by user id  # noqa: E501

        This call creates an user setting for a specified user. This call can only be used by Elab admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_create_user_setting(user_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param UserSettingNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_admin_create_user_setting_with_http_info(user_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_admin_create_user_setting_with_http_info(user_id, dto, **kwargs)  # noqa: E501
            return data

    def user_settings_admin_create_user_setting_with_http_info(self, user_id, dto, **kwargs):  # noqa: E501
        """Create user setting by user id  # noqa: E501

        This call creates an user setting for a specified user. This call can only be used by Elab admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_create_user_setting_with_http_info(user_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param UserSettingNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_admin_create_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_settings_admin_create_user_setting`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `user_settings_admin_create_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/{userID}/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_admin_delete_user_setting(self, user_id, user_settings_id, **kwargs):  # noqa: E501
        """Delete an user setting by user id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_delete_user_setting(user_id, user_settings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int user_settings_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_admin_delete_user_setting_with_http_info(user_id, user_settings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_admin_delete_user_setting_with_http_info(user_id, user_settings_id, **kwargs)  # noqa: E501
            return data

    def user_settings_admin_delete_user_setting_with_http_info(self, user_id, user_settings_id, **kwargs):  # noqa: E501
        """Delete an user setting by user id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_delete_user_setting_with_http_info(user_id, user_settings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int user_settings_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'user_settings_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_admin_delete_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_settings_admin_delete_user_setting`")  # noqa: E501
        # verify the required parameter 'user_settings_id' is set
        if self.api_client.client_side_validation and ('user_settings_id' not in params or
                                                       params['user_settings_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_settings_id` when calling `user_settings_admin_delete_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501
        if 'user_settings_id' in params:
            path_params['userSettingsID'] = params['user_settings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/{userID}/settings/{userSettingsID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_admin_get_user_setting(self, user_id, user_settings_id, **kwargs):  # noqa: E501
        """Get an user setting by user id  # noqa: E501

        This call fetches user settings of specified users. This call can only be used by Elab admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_get_user_setting(user_id, user_settings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int user_settings_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_admin_get_user_setting_with_http_info(user_id, user_settings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_admin_get_user_setting_with_http_info(user_id, user_settings_id, **kwargs)  # noqa: E501
            return data

    def user_settings_admin_get_user_setting_with_http_info(self, user_id, user_settings_id, **kwargs):  # noqa: E501
        """Get an user setting by user id  # noqa: E501

        This call fetches user settings of specified users. This call can only be used by Elab admins.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_get_user_setting_with_http_info(user_id, user_settings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int user_settings_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'user_settings_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_admin_get_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_settings_admin_get_user_setting`")  # noqa: E501
        # verify the required parameter 'user_settings_id' is set
        if self.api_client.client_side_validation and ('user_settings_id' not in params or
                                                       params['user_settings_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_settings_id` when calling `user_settings_admin_get_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501
        if 'user_settings_id' in params:
            path_params['userSettingsID'] = params['user_settings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/{userID}/settings/{userSettingsID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_admin_get_user_settings(self, user_id, **kwargs):  # noqa: E501
        """Get user settings by user id  # noqa: E501

        This call gets all user settings of a specified user. The results can be filtered on a single key or multiple keys. To filter on multiple keys the keys have to be provided in the following way: 'key1,key2,key3'. This call can only be used by Elab admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_get_user_settings(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str keys: Filter by user settings keys
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_admin_get_user_settings_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_admin_get_user_settings_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_settings_admin_get_user_settings_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get user settings by user id  # noqa: E501

        This call gets all user settings of a specified user. The results can be filtered on a single key or multiple keys. To filter on multiple keys the keys have to be provided in the following way: 'key1,key2,key3'. This call can only be used by Elab admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_get_user_settings_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str keys: Filter by user settings keys
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'expand', 'view_id', 'view_columns', 'keys', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_admin_get_user_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_settings_admin_get_user_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'keys' in params:
            query_params.append(('keys', params['keys']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/{userID}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_admin_update_user_setting(self, user_id, user_settings_id, dto, **kwargs):  # noqa: E501
        """Update an user setting by user id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_update_user_setting(user_id, user_settings_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int user_settings_id: (required)
        :param UserSettingNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_admin_update_user_setting_with_http_info(user_id, user_settings_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_admin_update_user_setting_with_http_info(user_id, user_settings_id, dto, **kwargs)  # noqa: E501
            return data

    def user_settings_admin_update_user_setting_with_http_info(self, user_id, user_settings_id, dto, **kwargs):  # noqa: E501
        """Update an user setting by user id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_admin_update_user_setting_with_http_info(user_id, user_settings_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int user_settings_id: (required)
        :param UserSettingNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'user_settings_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_admin_update_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_settings_admin_update_user_setting`")  # noqa: E501
        # verify the required parameter 'user_settings_id' is set
        if self.api_client.client_side_validation and ('user_settings_id' not in params or
                                                       params['user_settings_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_settings_id` when calling `user_settings_admin_update_user_setting`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `user_settings_admin_update_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501
        if 'user_settings_id' in params:
            path_params['userSettingsID'] = params['user_settings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/{userID}/settings/{userSettingsID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_create_user_setting(self, dto, **kwargs):  # noqa: E501
        """Create a current user setting  # noqa: E501

        This call creates a current user setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_create_user_setting(dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserSettingNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_create_user_setting_with_http_info(dto, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_create_user_setting_with_http_info(dto, **kwargs)  # noqa: E501
            return data

    def user_settings_create_user_setting_with_http_info(self, dto, **kwargs):  # noqa: E501
        """Create a current user setting  # noqa: E501

        This call creates a current user setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_create_user_setting_with_http_info(dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UserSettingNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_create_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `user_settings_create_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_delete_user_setting(self, user_settings_id, **kwargs):  # noqa: E501
        """Delete a user setting for the logged in user  # noqa: E501

        This call deletes a user setting for the logged in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_delete_user_setting(user_settings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_settings_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_delete_user_setting_with_http_info(user_settings_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_delete_user_setting_with_http_info(user_settings_id, **kwargs)  # noqa: E501
            return data

    def user_settings_delete_user_setting_with_http_info(self, user_settings_id, **kwargs):  # noqa: E501
        """Delete a user setting for the logged in user  # noqa: E501

        This call deletes a user setting for the logged in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_delete_user_setting_with_http_info(user_settings_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_settings_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_settings_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_delete_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_settings_id' is set
        if self.api_client.client_side_validation and ('user_settings_id' not in params or
                                                       params['user_settings_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_settings_id` when calling `user_settings_delete_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_settings_id' in params:
            path_params['userSettingsID'] = params['user_settings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/settings/{userSettingsID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_get_user_setting(self, user_setting_id, **kwargs):  # noqa: E501
        """Get a current user setting  # noqa: E501

        This call gets a current user setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_get_user_setting(user_setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_setting_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_get_user_setting_with_http_info(user_setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_get_user_setting_with_http_info(user_setting_id, **kwargs)  # noqa: E501
            return data

    def user_settings_get_user_setting_with_http_info(self, user_setting_id, **kwargs):  # noqa: E501
        """Get a current user setting  # noqa: E501

        This call gets a current user setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_get_user_setting_with_http_info(user_setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_setting_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_setting_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_get_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_setting_id' is set
        if self.api_client.client_side_validation and ('user_setting_id' not in params or
                                                       params['user_setting_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_setting_id` when calling `user_settings_get_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_setting_id' in params:
            path_params['userSettingID'] = params['user_setting_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/settings/{userSettingID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_get_user_settings(self, **kwargs):  # noqa: E501
        """Get a current user settings  # noqa: E501

        This call gets all current user settings. The results can be filtered on a single key or multiple keys. To filter on multiple keys the keys have to be provided in the following way: 'key1,key2,key3'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_get_user_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str keys: Filter by user settings keys
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_get_user_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_get_user_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_settings_get_user_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Get a current user settings  # noqa: E501

        This call gets all current user settings. The results can be filtered on a single key or multiple keys. To filter on multiple keys the keys have to be provided in the following way: 'key1,key2,key3'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_get_user_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str keys: Filter by user settings keys
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'view_id', 'view_columns', 'keys', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_get_user_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'keys' in params:
            query_params.append(('keys', params['keys']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_settings_update_user_setting(self, user_settings_id, dto, **kwargs):  # noqa: E501
        """Update a current user setting  # noqa: E501

        This call updates a current user setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_update_user_setting(user_settings_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_settings_id: (required)
        :param UserSettingNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_settings_update_user_setting_with_http_info(user_settings_id, dto, **kwargs)  # noqa: E501
        else:
            (data) = self.user_settings_update_user_setting_with_http_info(user_settings_id, dto, **kwargs)  # noqa: E501
            return data

    def user_settings_update_user_setting_with_http_info(self, user_settings_id, dto, **kwargs):  # noqa: E501
        """Update a current user setting  # noqa: E501

        This call updates a current user setting.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_settings_update_user_setting_with_http_info(user_settings_id, dto, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_settings_id: (required)
        :param UserSettingNew dto: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_settings_id', 'dto', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_settings_update_user_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_settings_id' is set
        if self.api_client.client_side_validation and ('user_settings_id' not in params or
                                                       params['user_settings_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_settings_id` when calling `user_settings_update_user_setting`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if self.api_client.client_side_validation and ('dto' not in params or
                                                       params['dto'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dto` when calling `user_settings_update_user_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_settings_id' in params:
            path_params['userSettingsID'] = params['user_settings_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/settings/{userSettingsID}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_update_user_profile(self, user_id, delta, **kwargs):  # noqa: E501
        """Update user information  # noqa: E501

        UserID needs to be a existing UserID in the database. Delta has an example value of the fields that can be changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_update_user_profile(user_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param ProfileUpdate delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_update_user_profile_with_http_info(user_id, delta, **kwargs)  # noqa: E501
        else:
            (data) = self.user_update_user_profile_with_http_info(user_id, delta, **kwargs)  # noqa: E501
            return data

    def user_update_user_profile_with_http_info(self, user_id, delta, **kwargs):  # noqa: E501
        """Update user information  # noqa: E501

        UserID needs to be a existing UserID in the database. Delta has an example value of the fields that can be changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_update_user_profile_with_http_info(user_id, delta, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param ProfileUpdate delta: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'delta', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_update_user_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `user_update_user_profile`")  # noqa: E501
        # verify the required parameter 'delta' is set
        if self.api_client.client_side_validation and ('delta' not in params or
                                                       params['delta'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delta` when calling `user_update_user_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userID'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delta' in params:
            body_params = params['delta']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/users/{userID}/profile', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
