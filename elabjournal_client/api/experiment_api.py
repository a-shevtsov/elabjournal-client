# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from elabjournal_client.api_client import ApiClient


class ExperimentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def experiment_assign_witness(self, experiment_id, body, **kwargs):  # noqa: E501
        """Assign a witness for an experiment signature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_assign_witness(experiment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param AssignWitness body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_assign_witness_with_http_info(experiment_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_assign_witness_with_http_info(experiment_id, body, **kwargs)  # noqa: E501
            return data

    def experiment_assign_witness_with_http_info(self, experiment_id, body, **kwargs):  # noqa: E501
        """Assign a witness for an experiment signature  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_assign_witness_with_http_info(experiment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param AssignWitness body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'body', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_assign_witness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_assign_witness`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `experiment_assign_witness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sign/assignWitness', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_create_experiment(self, experiment, **kwargs):  # noqa: E501
        """Create a new experiment  # noqa: E501

        When autoCollaborate (optional) is true, the collaborators will be assigned to the experiment based on the                           setting of study or project. Default is false.    When templateID (optional) is 0, < 0, or left out, the experiment will be created without a template. Default is 0.    Status (optional) can be PENDING, PROGRESS, COMPLETED. Default is PENDING.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_experiment(experiment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExperimentNew experiment: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_create_experiment_with_http_info(experiment, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_create_experiment_with_http_info(experiment, **kwargs)  # noqa: E501
            return data

    def experiment_create_experiment_with_http_info(self, experiment, **kwargs):  # noqa: E501
        """Create a new experiment  # noqa: E501

        When autoCollaborate (optional) is true, the collaborators will be assigned to the experiment based on the                           setting of study or project. Default is false.    When templateID (optional) is 0, < 0, or left out, the experiment will be created without a template. Default is 0.    Status (optional) can be PENDING, PROGRESS, COMPLETED. Default is PENDING.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_experiment_with_http_info(experiment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExperimentNew experiment: (required)
        :param str x_requested_with: 
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_create_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment' is set
        if self.api_client.client_side_validation and ('experiment' not in params or
                                                       params['experiment'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment` when calling `experiment_create_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'experiment' in params:
            body_params = params['experiment']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_create_saml_pre_sign_request(self, experiment_id, body, **kwargs):  # noqa: E501
        """Assign a witness for an experiment signature using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_saml_pre_sign_request(experiment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param AssignWitness body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_create_saml_pre_sign_request_with_http_info(experiment_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_create_saml_pre_sign_request_with_http_info(experiment_id, body, **kwargs)  # noqa: E501
            return data

    def experiment_create_saml_pre_sign_request_with_http_info(self, experiment_id, body, **kwargs):  # noqa: E501
        """Assign a witness for an experiment signature using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_saml_pre_sign_request_with_http_info(experiment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param AssignWitness body: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'body', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_create_saml_pre_sign_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_create_saml_pre_sign_request`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `experiment_create_saml_pre_sign_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sign/assignWitness/saml', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_create_saml_pre_sign_request_deprecated(self, experiment_id, witness_id, **kwargs):  # noqa: E501
        """Setup a new request to pre sign an experiment using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_saml_pre_sign_request_deprecated(experiment_id, witness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param int witness_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_create_saml_pre_sign_request_deprecated_with_http_info(experiment_id, witness_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_create_saml_pre_sign_request_deprecated_with_http_info(experiment_id, witness_id, **kwargs)  # noqa: E501
            return data

    def experiment_create_saml_pre_sign_request_deprecated_with_http_info(self, experiment_id, witness_id, **kwargs):  # noqa: E501
        """Setup a new request to pre sign an experiment using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_saml_pre_sign_request_deprecated_with_http_info(experiment_id, witness_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param int witness_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'witness_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_create_saml_pre_sign_request_deprecated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_create_saml_pre_sign_request_deprecated`")  # noqa: E501
        # verify the required parameter 'witness_id' is set
        if self.api_client.client_side_validation and ('witness_id' not in params or
                                                       params['witness_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `witness_id` when calling `experiment_create_saml_pre_sign_request_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501
        if 'witness_id' in params:
            path_params['witnessID'] = params['witness_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/presignrequest/saml/{witnessID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_create_saml_sign(self, experiment_id, **kwargs):  # noqa: E501
        """Sign an experiment using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_saml_sign(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_create_saml_sign_with_http_info(experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_create_saml_sign_with_http_info(experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_create_saml_sign_with_http_info(self, experiment_id, **kwargs):  # noqa: E501
        """Sign an experiment using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_saml_sign_with_http_info(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_create_saml_sign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_create_saml_sign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sign/saml', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_create_saml_sign_request(self, experiment_id, **kwargs):  # noqa: E501
        """Setup a new request to sign an experiment using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_saml_sign_request(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_create_saml_sign_request_with_http_info(experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_create_saml_sign_request_with_http_info(experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_create_saml_sign_request_with_http_info(self, experiment_id, **kwargs):  # noqa: E501
        """Setup a new request to sign an experiment using SAML authentication  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_create_saml_sign_request_with_http_info(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_create_saml_sign_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_create_saml_sign_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/signrequest/saml', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_decline_experiment(self, experiment_id, reason, **kwargs):  # noqa: E501
        """Decline an experiment of a user which requested a witness.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_decline_experiment(experiment_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str reason: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_decline_experiment_with_http_info(experiment_id, reason, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_decline_experiment_with_http_info(experiment_id, reason, **kwargs)  # noqa: E501
            return data

    def experiment_decline_experiment_with_http_info(self, experiment_id, reason, **kwargs):  # noqa: E501
        """Decline an experiment of a user which requested a witness.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_decline_experiment_with_http_info(experiment_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str reason: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'reason', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_decline_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_decline_experiment`")  # noqa: E501
        # verify the required parameter 'reason' is set
        if self.api_client.client_side_validation and ('reason' not in params or
                                                       params['reason'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `reason` when calling `experiment_decline_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sign/decline', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_fetch_collaborators_for_experiment(self, experiment_id, **kwargs):  # noqa: E501
        """Retrieve collaborators for given experimentID  # noqa: E501

        Retrieve all collaborators for the given experiment id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_fetch_collaborators_for_experiment(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfUserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_fetch_collaborators_for_experiment_with_http_info(experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_fetch_collaborators_for_experiment_with_http_info(experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_fetch_collaborators_for_experiment_with_http_info(self, experiment_id, **kwargs):  # noqa: E501
        """Retrieve collaborators for given experimentID  # noqa: E501

        Retrieve all collaborators for the given experiment id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_fetch_collaborators_for_experiment_with_http_info(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfUserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_fetch_collaborators_for_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_fetch_collaborators_for_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/collaborators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfUserInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_get_all_experiment_templates(self, **kwargs):  # noqa: E501
        """Get experiment templates  # noqa: E501

        This call will fetch all templates within the group of the current user. The templates can be sorted on 'experimentID' and 'created'. Also the templates can be filtered on 'creatorID'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_all_experiment_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str creator_id: Filter by creator
        :param str x_requested_with: 
        :return: PagedOfExperimentTemplateLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_get_all_experiment_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.experiment_get_all_experiment_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def experiment_get_all_experiment_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Get experiment templates  # noqa: E501

        This call will fetch all templates within the group of the current user. The templates can be sorted on 'experimentID' and 'created'. Also the templates can be filtered on 'creatorID'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_all_experiment_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str creator_id: Filter by creator
        :param str x_requested_with: 
        :return: PagedOfExperimentTemplateLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'creator_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_get_all_experiment_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'creator_id' in params:
            query_params.append(('creatorID', params['creator_id']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExperimentTemplateLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_get_declined_witness_signatures(self, **kwargs):  # noqa: E501
        """Retrieve declined witness signatures  # noqa: E501

        Retrieve all declined witness signatures for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_declined_witness_signatures(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_get_declined_witness_signatures_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.experiment_get_declined_witness_signatures_with_http_info(**kwargs)  # noqa: E501
            return data

    def experiment_get_declined_witness_signatures_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve declined witness signatures  # noqa: E501

        Retrieve all declined witness signatures for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_declined_witness_signatures_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_get_declined_witness_signatures" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/signatures/declined', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_get_experiment_by_id(self, experiment_id, **kwargs):  # noqa: E501
        """Get an experiment by id  # noqa: E501

        expand values  * signature    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_experiment_by_id(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ExperimentLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_get_experiment_by_id_with_http_info(experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_get_experiment_by_id_with_http_info(experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_get_experiment_by_id_with_http_info(self, experiment_id, **kwargs):  # noqa: E501
        """Get an experiment by id  # noqa: E501

        expand values  * signature    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_experiment_by_id_with_http_info(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str expand: Expand an ID field to an object
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: ExperimentLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'expand', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_get_experiment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_get_experiment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExperimentLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_get_experiment_template_groups(self, **kwargs):  # noqa: E501
        """Get experiment template groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_experiment_template_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentTemplateGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_get_experiment_template_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.experiment_get_experiment_template_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def experiment_get_experiment_template_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Get experiment template groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_experiment_template_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentTemplateGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_get_experiment_template_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/templateGroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExperimentTemplateGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_get_experiment_templates_by_group_id(self, exp_template_label_id, **kwargs):  # noqa: E501
        """Get experiment templates by templateCategoryID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_experiment_templates_by_group_id(exp_template_label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_template_label_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_get_experiment_templates_by_group_id_with_http_info(exp_template_label_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_get_experiment_templates_by_group_id_with_http_info(exp_template_label_id, **kwargs)  # noqa: E501
            return data

    def experiment_get_experiment_templates_by_group_id_with_http_info(self, exp_template_label_id, **kwargs):  # noqa: E501
        """Get experiment templates by templateCategoryID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_experiment_templates_by_group_id_with_http_info(exp_template_label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int exp_template_label_id: (required)
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: PagedOfExperimentTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exp_template_label_id', 'expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_get_experiment_templates_by_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exp_template_label_id' is set
        if self.api_client.client_side_validation and ('exp_template_label_id' not in params or
                                                       params['exp_template_label_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `exp_template_label_id` when calling `experiment_get_experiment_templates_by_group_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exp_template_label_id' in params:
            path_params['expTemplateLabelID'] = params['exp_template_label_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/templates/{expTemplateLabelID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExperimentTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_get_experiments(self, **kwargs):  # noqa: E501
        """Get experiments  # noqa: E501

        expand values  * signature    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_experiments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str created_before: Filters experiments on their created date (YYYY-MM-DDThh:mm:ss), you will only receive experiments created before the given date
        :param str status_changed_before: filter experiments on their statusChange date (YYYY-MM-DDThh:mm:ss), you will only receive experiments with a status change before the given date
        :param str project_id: Filter by project
        :param str study_id: Filter by study
        :param str search_name: Search by experiment name
        :param str search: Search experiments by name or contents
        :param str created_after: Filters experiments on their created date (YYYY-MM-DDThh:mm:ss), you will only receive experiments created after the given date
        :param str status_changed_after: filter experiments on their statusChange date (YYYY-MM-DDThh:mm:ss), you will only receive experiments with a status change after the given date
        :param str x_requested_with: 
        :return: PagedOfExperimentLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_get_experiments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.experiment_get_experiments_with_http_info(**kwargs)  # noqa: E501
            return data

    def experiment_get_experiments_with_http_info(self, **kwargs):  # noqa: E501
        """Get experiments  # noqa: E501

        expand values  * signature    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_experiments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str created_before: Filters experiments on their created date (YYYY-MM-DDThh:mm:ss), you will only receive experiments created before the given date
        :param str status_changed_before: filter experiments on their statusChange date (YYYY-MM-DDThh:mm:ss), you will only receive experiments with a status change before the given date
        :param str project_id: Filter by project
        :param str study_id: Filter by study
        :param str search_name: Search by experiment name
        :param str search: Search experiments by name or contents
        :param str created_after: Filters experiments on their created date (YYYY-MM-DDThh:mm:ss), you will only receive experiments created after the given date
        :param str status_changed_after: filter experiments on their statusChange date (YYYY-MM-DDThh:mm:ss), you will only receive experiments with a status change after the given date
        :param str x_requested_with: 
        :return: PagedOfExperimentLarge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'created_before', 'status_changed_before', 'project_id', 'study_id', 'search_name', 'search', 'created_after', 'status_changed_after', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_get_experiments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501
        if 'created_before' in params:
            query_params.append(('createdBefore', params['created_before']))  # noqa: E501
        if 'status_changed_before' in params:
            query_params.append(('statusChangedBefore', params['status_changed_before']))  # noqa: E501
        if 'project_id' in params:
            query_params.append(('projectID', params['project_id']))  # noqa: E501
        if 'study_id' in params:
            query_params.append(('studyID', params['study_id']))  # noqa: E501
        if 'search_name' in params:
            query_params.append(('searchName', params['search_name']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'created_after' in params:
            query_params.append(('createdAfter', params['created_after']))  # noqa: E501
        if 'status_changed_after' in params:
            query_params.append(('statusChangedAfter', params['status_changed_after']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedOfExperimentLarge',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_get_pending_witness_signatures(self, **kwargs):  # noqa: E501
        """Retrieve pending witness signatures  # noqa: E501

        Retrieve all pending witness signatures for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_pending_witness_signatures(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_get_pending_witness_signatures_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.experiment_get_pending_witness_signatures_with_http_info(**kwargs)  # noqa: E501
            return data

    def experiment_get_pending_witness_signatures_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve pending witness signatures  # noqa: E501

        Retrieve all pending witness signatures for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_get_pending_witness_signatures_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expand: Expand an ID field to an object
        :param str sort: Sort by a specific field
        :param str page: Set the current page (0 based)
        :param str records: Set the number of records to return (1000 maximum)
        :param str view_id: Specify a viewID to customize the result
        :param str view_columns: Specify viewColumns to extend the result
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expand', 'sort', 'page', 'records', 'view_id', 'view_columns', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_get_pending_witness_signatures" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in params:
            query_params.append(('$expand', params['expand']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'records' in params:
            query_params.append(('$records', params['records']))  # noqa: E501
        if 'view_id' in params:
            query_params.append(('$viewID', params['view_id']))  # noqa: E501
        if 'view_columns' in params:
            query_params.append(('$viewColumns', params['view_columns']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/signatures/pending', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_sign_experiment(self, experiment_id, **kwargs):  # noqa: E501
        """Sign an experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_sign_experiment(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_sign_experiment_with_http_info(experiment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_sign_experiment_with_http_info(experiment_id, **kwargs)  # noqa: E501
            return data

    def experiment_sign_experiment_with_http_info(self, experiment_id, **kwargs):  # noqa: E501
        """Sign an experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_sign_experiment_with_http_info(experiment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_sign_experiment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_sign_experiment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_update_witness(self, experiment_id, experiment_witness, **kwargs):  # noqa: E501
        """Update the witness for an experiment  # noqa: E501

        Update the existing witness for the given experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_update_witness(experiment_id, experiment_witness, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param ReassignExperimentWitness experiment_witness: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.experiment_update_witness_with_http_info(experiment_id, experiment_witness, **kwargs)  # noqa: E501
        else:
            (data) = self.experiment_update_witness_with_http_info(experiment_id, experiment_witness, **kwargs)  # noqa: E501
            return data

    def experiment_update_witness_with_http_info(self, experiment_id, experiment_witness, **kwargs):  # noqa: E501
        """Update the witness for an experiment  # noqa: E501

        Update the existing witness for the given experiment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_update_witness_with_http_info(experiment_id, experiment_witness, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int experiment_id: (required)
        :param ReassignExperimentWitness experiment_witness: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment_id', 'experiment_witness', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_update_witness" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment_id' is set
        if self.api_client.client_side_validation and ('experiment_id' not in params or
                                                       params['experiment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_id` when calling `experiment_update_witness`")  # noqa: E501
        # verify the required parameter 'experiment_witness' is set
        if self.api_client.client_side_validation and ('experiment_witness' not in params or
                                                       params['experiment_witness'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `experiment_witness` when calling `experiment_update_witness`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'experiment_id' in params:
            path_params['experimentID'] = params['experiment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'experiment_witness' in params:
            body_params = params['experiment_witness']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/experiments/{experimentID}/sign/reassignWitness', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
