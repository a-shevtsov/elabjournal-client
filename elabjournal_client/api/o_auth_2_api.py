# coding: utf-8

"""
    eLabNext REST API

    ## Authentication    To authenticate use the `POST /api/v1/auth/user` call below in the Authentication tab with a username and password. This will return an API token as property `token`.    All API calls, with the exception of authentication, need this API token in the header as `Authorization: [API token]`. Omitting this header or supplying an invalid API token results in an error 401 Not Authorized.    Example: `Authorization: eec0727eaf6f7b127aaec1ec33c21caf`    To use this with the **Try it out** buttons, fill in the **api_key** field above with the API token.    ## Request Bodies    The API uses JSON with character set UTF-8 for request and response bodies.    In any call that utilizes request bodies you must supply the header `Content-Type: application/json; charset=utf-8`.    ## Response Codes    Status Code | Name | Meaning  ----------- | ---- | -------  200 | OK | Success. (JSON) content is included in the body.  204 | No Content | Success and no body content. This status is always returned when a call does not produce content.  400 | Bad Request | Bad/missing parameters or JSON input.  401 | Not Authorized | Authentication header is missing or the supplied API token is invalid.  403 | Forbidden | The user associated with the API token has no permission for the requested operation.  404 | Not Found | The resource specified in the request does not exist.  405 | Method Not Allowed | The API call was made with an unsupported HTTP method. (e.g. GET instead of POST.)  409 | Conflict | A POST or PUT operation failed because it conflicts with existing data.  500 | Internal Server Error | A generic error occurred on the server. The response's `message` property contains a description of the error.        # noqa: E501

    OpenAPI spec version: v1
    Contact: enquiries@elabnext.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from elabjournal_client.api_client import ApiClient


class OAuth2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def o_auth2_redirect_build_redirect_url(self, state, code, **kwargs):  # noqa: E501
        """OAuth2 redirect URI  # noqa: E501

        Redirect url to be used within OAuth 2.0 applications. This endpoint understants `state` and `code` parameters which will be passed down to the endpoint that is encryped in the the `state` param.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.o_auth2_redirect_build_redirect_url(state, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param str code: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.o_auth2_redirect_build_redirect_url_with_http_info(state, code, **kwargs)  # noqa: E501
        else:
            (data) = self.o_auth2_redirect_build_redirect_url_with_http_info(state, code, **kwargs)  # noqa: E501
            return data

    def o_auth2_redirect_build_redirect_url_with_http_info(self, state, code, **kwargs):  # noqa: E501
        """OAuth2 redirect URI  # noqa: E501

        Redirect url to be used within OAuth 2.0 applications. This endpoint understants `state` and `code` parameters which will be passed down to the endpoint that is encryped in the the `state` param.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.o_auth2_redirect_build_redirect_url_with_http_info(state, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str state: (required)
        :param str code: (required)
        :param str x_requested_with: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['state', 'code', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_auth2_redirect_build_redirect_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'state' is set
        if self.api_client.client_side_validation and ('state' not in params or
                                                       params['state'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `state` when calling `o_auth2_redirect_build_redirect_url`")  # noqa: E501
        # verify the required parameter 'code' is set
        if self.api_client.client_side_validation and ('code' not in params or
                                                       params['code'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `code` when calling `o_auth2_redirect_build_redirect_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/oauth2/redirect', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def o_auth2_redirect_handle_oauth2_request_from_remote(self, o_auth_proxy_request, **kwargs):  # noqa: E501
        """o_auth2_redirect_handle_oauth2_request_from_remote  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.o_auth2_redirect_handle_oauth2_request_from_remote(o_auth_proxy_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuthProxyRequest o_auth_proxy_request: (required)
        :param str x_requested_with: 
        :return: OAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.o_auth2_redirect_handle_oauth2_request_from_remote_with_http_info(o_auth_proxy_request, **kwargs)  # noqa: E501
        else:
            (data) = self.o_auth2_redirect_handle_oauth2_request_from_remote_with_http_info(o_auth_proxy_request, **kwargs)  # noqa: E501
            return data

    def o_auth2_redirect_handle_oauth2_request_from_remote_with_http_info(self, o_auth_proxy_request, **kwargs):  # noqa: E501
        """o_auth2_redirect_handle_oauth2_request_from_remote  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.o_auth2_redirect_handle_oauth2_request_from_remote_with_http_info(o_auth_proxy_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OAuthProxyRequest o_auth_proxy_request: (required)
        :param str x_requested_with: 
        :return: OAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['o_auth_proxy_request', 'x_requested_with']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method o_auth2_redirect_handle_oauth2_request_from_remote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'o_auth_proxy_request' is set
        if self.api_client.client_side_validation and ('o_auth_proxy_request' not in params or
                                                       params['o_auth_proxy_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `o_auth_proxy_request` when calling `o_auth2_redirect_handle_oauth2_request_from_remote`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_requested_with' in params:
            header_params['X-Requested-With'] = params['x_requested_with']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'o_auth_proxy_request' in params:
            body_params = params['o_auth_proxy_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'text/html', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/oauth2/proxy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
